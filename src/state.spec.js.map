{"version":3,"file":"state.spec.js","sourceRoot":"","sources":["state.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { FORM_CONTROL_0_ID, FORM_CONTROL_1_ID } from './array/reducer/test-util';\r\nimport { FORM_CONTROL_INNER_ID, FORM_CONTROL_INNER2_ID } from './group/reducer/test-util';\r\nimport {\r\n  cast,\r\n  computeArrayState,\r\n  computeGroupState,\r\n  createFormArrayState,\r\n  createFormControlState,\r\n  createFormGroupState,\r\n  isGroupState,\r\n  isArrayState,\r\n} from './state';\r\n\r\ndescribe('state', () => {\r\n  const FORM_CONTROL_ID = 'test ID';\r\n\r\n  describe('control', () => {\r\n    const INITIAL_FORM_CONTROL_VALUE = 'abc';\r\n    const INITIAL_STATE = createFormControlState<string>(FORM_CONTROL_ID, INITIAL_FORM_CONTROL_VALUE);\r\n\r\n    it('should set the correct id', () => {\r\n      expect(INITIAL_STATE.id).toBe(FORM_CONTROL_ID);\r\n    });\r\n\r\n    it('should set the correct value', () => {\r\n      expect(INITIAL_STATE.value).toBe(INITIAL_FORM_CONTROL_VALUE);\r\n    });\r\n\r\n    it('should mark control as valid', () => {\r\n      expect(INITIAL_STATE.isValid).toBe(true);\r\n      expect(INITIAL_STATE.isInvalid).toBe(false);\r\n    });\r\n\r\n    it('should mark control as enabled', () => {\r\n      expect(INITIAL_STATE.isEnabled).toBe(true);\r\n      expect(INITIAL_STATE.isDisabled).toBe(false);\r\n    });\r\n\r\n    it('should mark control as unfocused', () => {\r\n      expect(INITIAL_STATE.isFocused).toBe(false);\r\n      expect(INITIAL_STATE.isUnfocused).toBe(true);\r\n    });\r\n\r\n    it('should set empty errors', () => {\r\n      expect(INITIAL_STATE.errors).toEqual({});\r\n    });\r\n\r\n    it('should mark control as pristine', () => {\r\n      expect(INITIAL_STATE.isPristine).toBe(true);\r\n      expect(INITIAL_STATE.isDirty).toBe(false);\r\n    });\r\n\r\n    it('should mark control as untouched', () => {\r\n      expect(INITIAL_STATE.isTouched).toBe(false);\r\n      expect(INITIAL_STATE.isUntouched).toBe(true);\r\n    });\r\n\r\n    it('should mark control as unsubmitted', () => {\r\n      expect(INITIAL_STATE.isSubmitted).toBe(false);\r\n      expect(INITIAL_STATE.isUnsubmitted).toBe(true);\r\n    });\r\n\r\n    it('should set empty user-defined properties', () => {\r\n      expect(INITIAL_STATE.userDefinedProperties).toEqual({});\r\n    });\r\n  });\r\n\r\n  describe('group', () => {\r\n    const CONTROL_VALUE = 'abc';\r\n    const GROUP_VALUE = { control: 'bcd' };\r\n    const ARRAY_VALUE = ['def'];\r\n    const INITIAL_VALUE = { control: CONTROL_VALUE, group: GROUP_VALUE, array: ARRAY_VALUE };\r\n    const INITIAL_STATE = createFormGroupState<typeof INITIAL_VALUE>(FORM_CONTROL_ID, INITIAL_VALUE);\r\n\r\n    it('should set the correct id', () => {\r\n      expect(INITIAL_STATE.id).toBe(FORM_CONTROL_ID);\r\n    });\r\n\r\n    it('should set the correct value', () => {\r\n      expect(INITIAL_STATE.value).toBe(INITIAL_VALUE);\r\n    });\r\n\r\n    it('should mark control as valid', () => {\r\n      expect(INITIAL_STATE.isValid).toBe(true);\r\n      expect(INITIAL_STATE.isInvalid).toBe(false);\r\n    });\r\n\r\n    it('should mark control as enabled', () => {\r\n      expect(INITIAL_STATE.isEnabled).toBe(true);\r\n      expect(INITIAL_STATE.isDisabled).toBe(false);\r\n    });\r\n\r\n    it('should set empty errors', () => {\r\n      expect(INITIAL_STATE.errors).toEqual({});\r\n    });\r\n\r\n    it('should mark control as pristine', () => {\r\n      expect(INITIAL_STATE.isPristine).toBe(true);\r\n      expect(INITIAL_STATE.isDirty).toBe(false);\r\n    });\r\n\r\n    it('should mark control as untouched', () => {\r\n      expect(INITIAL_STATE.isTouched).toBe(false);\r\n      expect(INITIAL_STATE.isUntouched).toBe(true);\r\n    });\r\n\r\n    it('should mark control as unsubmitted', () => {\r\n      expect(INITIAL_STATE.isSubmitted).toBe(false);\r\n      expect(INITIAL_STATE.isUnsubmitted).toBe(true);\r\n    });\r\n\r\n    it('should set empty user-defined properties', () => {\r\n      expect(INITIAL_STATE.userDefinedProperties).toEqual({});\r\n    });\r\n\r\n    it('should create control child', () => {\r\n      expect(INITIAL_STATE.controls.control.value).toEqual(CONTROL_VALUE);\r\n      expect(cast(INITIAL_STATE.controls.control).isFocused).toBeDefined();\r\n    });\r\n\r\n    it('should create group child', () => {\r\n      expect(INITIAL_STATE.controls.group.value).toEqual(GROUP_VALUE);\r\n      const controls = cast(INITIAL_STATE.controls.group).controls;\r\n      expect(controls).toBeDefined();\r\n      expect(Array.isArray(controls)).toBe(false);\r\n    });\r\n\r\n    it('should create array child', () => {\r\n      expect(INITIAL_STATE.controls.array.value).toEqual(ARRAY_VALUE);\r\n      const controls = cast(INITIAL_STATE.controls.array).controls;\r\n      expect(controls).toBeDefined();\r\n      expect(Array.isArray(controls)).toBe(true);\r\n    });\r\n\r\n    it('should produce the same state as is computed after an action is applied', () => {\r\n      const state = computeGroupState(\r\n        INITIAL_STATE.id,\r\n        INITIAL_STATE.controls,\r\n        INITIAL_STATE.value,\r\n        INITIAL_STATE.errors,\r\n        INITIAL_STATE.pendingValidations,\r\n        INITIAL_STATE.userDefinedProperties,\r\n      );\r\n\r\n      expect(state.id).toBe(INITIAL_STATE.id);\r\n      expect(state.value).toEqual(INITIAL_STATE.value);\r\n      expect(state.errors).toEqual(INITIAL_STATE.errors);\r\n      expect(state.pendingValidations).toEqual(INITIAL_STATE.pendingValidations);\r\n      expect(state.isValid).toEqual(INITIAL_STATE.isValid);\r\n      expect(state.isInvalid).toEqual(INITIAL_STATE.isInvalid);\r\n      expect(state.isEnabled).toEqual(INITIAL_STATE.isEnabled);\r\n      expect(state.isDisabled).toEqual(INITIAL_STATE.isDisabled);\r\n      expect(state.isDirty).toEqual(INITIAL_STATE.isDirty);\r\n      expect(state.isPristine).toEqual(INITIAL_STATE.isPristine);\r\n      expect(state.isTouched).toEqual(INITIAL_STATE.isTouched);\r\n      expect(state.isUntouched).toEqual(INITIAL_STATE.isUntouched);\r\n      expect(state.isSubmitted).toEqual(INITIAL_STATE.isSubmitted);\r\n      expect(state.isUnsubmitted).toEqual(INITIAL_STATE.isUnsubmitted);\r\n      expect(state.userDefinedProperties).toEqual(INITIAL_STATE.userDefinedProperties);\r\n    });\r\n\r\n    it('should produce the same state as is computed after an action is applied for empty group', () => {\r\n      const initialState = createFormGroupState(FORM_CONTROL_ID, {});\r\n      const state = computeGroupState(\r\n        initialState.id,\r\n        initialState.controls,\r\n        initialState.value,\r\n        initialState.errors,\r\n        initialState.pendingValidations,\r\n        initialState.userDefinedProperties,\r\n      );\r\n\r\n      expect(state.id).toBe(initialState.id);\r\n      expect(state.value).toEqual(initialState.value);\r\n      expect(state.errors).toEqual(initialState.errors);\r\n      expect(state.pendingValidations).toEqual(initialState.pendingValidations);\r\n      expect(state.isValid).toEqual(initialState.isValid);\r\n      expect(state.isInvalid).toEqual(initialState.isInvalid);\r\n      expect(state.isEnabled).toEqual(initialState.isEnabled);\r\n      expect(state.isDisabled).toEqual(initialState.isDisabled);\r\n      expect(state.isDirty).toEqual(initialState.isDirty);\r\n      expect(state.isPristine).toEqual(initialState.isPristine);\r\n      expect(state.isTouched).toEqual(initialState.isTouched);\r\n      expect(state.isUntouched).toEqual(initialState.isUntouched);\r\n      expect(state.isSubmitted).toEqual(initialState.isSubmitted);\r\n      expect(state.isUnsubmitted).toEqual(initialState.isUnsubmitted);\r\n      expect(state.userDefinedProperties).toEqual(initialState.userDefinedProperties);\r\n    });\r\n  });\r\n\r\n  describe('array', () => {\r\n    const INITIAL_VALUE = ['a', 'b'];\r\n    const INITIAL_STATE = createFormArrayState<string>(FORM_CONTROL_ID, INITIAL_VALUE);\r\n\r\n    it('should set the correct id', () => {\r\n      expect(INITIAL_STATE.id).toBe(FORM_CONTROL_ID);\r\n    });\r\n\r\n    it('should set the correct value', () => {\r\n      expect(INITIAL_STATE.value).toBe(INITIAL_VALUE);\r\n    });\r\n\r\n    it('should set the correct value for empty arrays', () => {\r\n      expect(createFormArrayState<string>(FORM_CONTROL_ID, []).value).toEqual([]);\r\n    });\r\n\r\n    it('should mark control as valid', () => {\r\n      expect(INITIAL_STATE.isValid).toBe(true);\r\n      expect(INITIAL_STATE.isInvalid).toBe(false);\r\n    });\r\n\r\n    it('should mark control as enabled', () => {\r\n      expect(INITIAL_STATE.isEnabled).toBe(true);\r\n      expect(INITIAL_STATE.isDisabled).toBe(false);\r\n    });\r\n\r\n    it('should set empty errors', () => {\r\n      expect(INITIAL_STATE.errors).toEqual({});\r\n    });\r\n\r\n    it('should mark control as pristine', () => {\r\n      expect(INITIAL_STATE.isPristine).toBe(true);\r\n      expect(INITIAL_STATE.isDirty).toBe(false);\r\n    });\r\n\r\n    it('should mark control as untouched', () => {\r\n      expect(INITIAL_STATE.isTouched).toBe(false);\r\n      expect(INITIAL_STATE.isUntouched).toBe(true);\r\n    });\r\n\r\n    it('should mark control as unsubmitted', () => {\r\n      expect(INITIAL_STATE.isSubmitted).toBe(false);\r\n      expect(INITIAL_STATE.isUnsubmitted).toBe(true);\r\n    });\r\n\r\n    it('should set empty user-defined properties', () => {\r\n      expect(INITIAL_STATE.userDefinedProperties).toEqual({});\r\n    });\r\n\r\n    it('should create control child', () => {\r\n      expect(INITIAL_STATE.controls[0].value).toEqual(INITIAL_VALUE[0]);\r\n      expect(cast(INITIAL_STATE.controls[0]).isFocused).toBeDefined();\r\n    });\r\n\r\n    it('should create group child', () => {\r\n      const initialValue = [{ control: 'a' }, { control: 'b' }];\r\n      const initialState = createFormArrayState<{ control: string }>(FORM_CONTROL_ID, initialValue);\r\n      expect(initialState.controls[0].value).toEqual(initialValue[0]);\r\n      const controls = cast(initialState.controls[0]).controls;\r\n      expect(controls).toBeDefined();\r\n      expect(Array.isArray(controls)).toBe(false);\r\n    });\r\n\r\n    it('should create array child', () => {\r\n      const initialValue = [['a'], ['b']];\r\n      const initialState = createFormArrayState<string[]>(FORM_CONTROL_ID, initialValue);\r\n      expect(initialState.controls[0].value).toEqual(initialValue[0]);\r\n      const controls = cast(initialState.controls[0]).controls;\r\n      expect(controls).toBeDefined();\r\n      expect(Array.isArray(controls)).toBe(true);\r\n    });\r\n\r\n    it('should create mixed children', () => {\r\n      const initialValue = [['a'], { control: 'b' }];\r\n      const initialState = createFormArrayState<string[] | { control: string }>(FORM_CONTROL_ID, initialValue);\r\n      expect(initialState.controls[0].value).toEqual(initialValue[0]);\r\n      const controls = cast(initialState.controls[0]).controls;\r\n      expect(controls).toBeDefined();\r\n      expect(Array.isArray(controls)).toBe(true);\r\n      expect(initialState.controls[1].value).toEqual(initialValue[1]);\r\n      const controls2 = cast(initialState.controls[1]).controls;\r\n      expect(controls2).toBeDefined();\r\n      expect(Array.isArray(controls2)).toBe(false);\r\n    });\r\n\r\n    it('should create empty children array for empty value array', () => {\r\n      const initialValue = [] as string[];\r\n      const initialState = createFormArrayState<string>(FORM_CONTROL_ID, initialValue);\r\n      expect(initialState.controls).toEqual([]);\r\n    });\r\n\r\n    it('should produce the same state as is computed after an action is applied', () => {\r\n      const state = computeArrayState(\r\n        INITIAL_STATE.id,\r\n        INITIAL_STATE.controls,\r\n        INITIAL_STATE.value,\r\n        INITIAL_STATE.errors,\r\n        INITIAL_STATE.pendingValidations,\r\n        INITIAL_STATE.userDefinedProperties,\r\n      );\r\n\r\n      expect(state.id).toBe(INITIAL_STATE.id);\r\n      expect(state.value).toEqual(INITIAL_STATE.value);\r\n      expect(state.errors).toEqual(INITIAL_STATE.errors);\r\n      expect(state.pendingValidations).toEqual(INITIAL_STATE.pendingValidations);\r\n      expect(state.isValid).toEqual(INITIAL_STATE.isValid);\r\n      expect(state.isInvalid).toEqual(INITIAL_STATE.isInvalid);\r\n      expect(state.isEnabled).toEqual(INITIAL_STATE.isEnabled);\r\n      expect(state.isDisabled).toEqual(INITIAL_STATE.isDisabled);\r\n      expect(state.isDirty).toEqual(INITIAL_STATE.isDirty);\r\n      expect(state.isPristine).toEqual(INITIAL_STATE.isPristine);\r\n      expect(state.isTouched).toEqual(INITIAL_STATE.isTouched);\r\n      expect(state.isUntouched).toEqual(INITIAL_STATE.isUntouched);\r\n      expect(state.isSubmitted).toEqual(INITIAL_STATE.isSubmitted);\r\n      expect(state.isUnsubmitted).toEqual(INITIAL_STATE.isUnsubmitted);\r\n      expect(state.userDefinedProperties).toEqual(INITIAL_STATE.userDefinedProperties);\r\n    });\r\n\r\n    it('should produce the same state as is computed after an action is applied for empty array', () => {\r\n      const initialState = createFormArrayState(FORM_CONTROL_ID, []);\r\n      const state = computeArrayState(\r\n        initialState.id,\r\n        initialState.controls,\r\n        initialState.value,\r\n        initialState.errors,\r\n        initialState.pendingValidations,\r\n        initialState.userDefinedProperties,\r\n      );\r\n\r\n      expect(state.id).toBe(initialState.id);\r\n      expect(state.value).toEqual(initialState.value);\r\n      expect(state.errors).toEqual(initialState.errors);\r\n      expect(state.pendingValidations).toEqual(initialState.pendingValidations);\r\n      expect(state.isValid).toEqual(initialState.isValid);\r\n      expect(state.isInvalid).toEqual(initialState.isInvalid);\r\n      expect(state.isEnabled).toEqual(initialState.isEnabled);\r\n      expect(state.isDisabled).toEqual(initialState.isDisabled);\r\n      expect(state.isDirty).toEqual(initialState.isDirty);\r\n      expect(state.isPristine).toEqual(initialState.isPristine);\r\n      expect(state.isTouched).toEqual(initialState.isTouched);\r\n      expect(state.isUntouched).toEqual(initialState.isUntouched);\r\n      expect(state.isSubmitted).toEqual(initialState.isSubmitted);\r\n      expect(state.isUnsubmitted).toEqual(initialState.isUnsubmitted);\r\n      expect(state.userDefinedProperties).toEqual(initialState.userDefinedProperties);\r\n    });\r\n  });\r\n\r\n  describe(isArrayState.name, () => {\r\n    it('should return true for array state', () => {\r\n      const INITIAL_STATE = createFormArrayState<string>(FORM_CONTROL_ID, ['abc']);\r\n      expect(isArrayState(INITIAL_STATE)).toBe(true);\r\n    });\r\n\r\n    it('should return false for group state', () => {\r\n      const INITIAL_STATE = createFormGroupState<any>(FORM_CONTROL_ID, { control: 'abc' });\r\n      expect(isArrayState(INITIAL_STATE)).toBe(false);\r\n    });\r\n\r\n    it('should return false for control state', () => {\r\n      const INITIAL_STATE = createFormControlState<string>(FORM_CONTROL_ID, 'abc');\r\n      expect(isArrayState(INITIAL_STATE)).toBe(false);\r\n    });\r\n\r\n    it('should return false for update object', () => {\r\n      expect(isArrayState({ controls: () => void 0 } as any)).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe(isGroupState.name, () => {\r\n    it('should return true for group state', () => {\r\n      const INITIAL_STATE = createFormGroupState<any>(FORM_CONTROL_ID, { control: 'abc' });\r\n      expect(isGroupState(INITIAL_STATE)).toBe(true);\r\n    });\r\n\r\n    it('should return false for control state', () => {\r\n      const INITIAL_STATE = createFormControlState<string>(FORM_CONTROL_ID, 'abc');\r\n      expect(isGroupState(INITIAL_STATE)).toBe(false);\r\n    });\r\n\r\n    it('should return false for array state', () => {\r\n      const INITIAL_STATE = createFormArrayState<string>(FORM_CONTROL_ID, ['abc']);\r\n      expect(isGroupState(INITIAL_STATE)).toBe(false);\r\n    });\r\n\r\n    it('should return false for update object', () => {\r\n      expect(isGroupState({ controls: () => void 0 } as any)).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe(computeArrayState.name, () => {\r\n    const VALUE = ['a', 'b'];\r\n    const CONTROL_1 = createFormControlState(FORM_CONTROL_0_ID, VALUE[0]);\r\n    const CONTROL_2 = createFormControlState(FORM_CONTROL_1_ID, VALUE[1]);\r\n    const CONTROLS = [CONTROL_1, CONTROL_2];\r\n\r\n    it('should aggregate child values', () => {\r\n      const state = computeArrayState(FORM_CONTROL_ID, CONTROLS, [], {}, [], {});\r\n      expect(state.value).toEqual(VALUE);\r\n    });\r\n\r\n    it('should aggregate child errors', () => {\r\n      const childError = { required: true };\r\n      const controlWithError = {\r\n        ...CONTROL_1,\r\n        errors: childError,\r\n        isValid: false,\r\n        isInvalid: true,\r\n      };\r\n      const state = computeArrayState(FORM_CONTROL_ID, [controlWithError, CONTROL_2], [], {}, [], {});\r\n      expect(state.errors).toEqual({ _0: childError });\r\n    });\r\n\r\n    it('should merge own errors with child errors', () => {\r\n      const childError = { required: true };\r\n      const ownError = { max: true };\r\n      const controlWithError = {\r\n        ...CONTROL_1,\r\n        errors: childError,\r\n        isValid: false,\r\n        isInvalid: true,\r\n      };\r\n      const state = computeArrayState(FORM_CONTROL_ID, [controlWithError, CONTROL_2], [], ownError, [], {});\r\n      expect(state.errors).toEqual({ _0: childError, ...ownError });\r\n    });\r\n\r\n    it('should mark as valid if there are no errors', () => {\r\n      const state = computeArrayState(FORM_CONTROL_ID, CONTROLS, [], {}, [], {});\r\n      expect(state.isValid).toEqual(true);\r\n      expect(state.isInvalid).toEqual(false);\r\n    });\r\n\r\n    it('should mark as invalid if there are errors', () => {\r\n      const errors = { max: true };\r\n      const state = computeArrayState(FORM_CONTROL_ID, CONTROLS, [], errors, [], {});\r\n      expect(state.isValid).toEqual(false);\r\n      expect(state.isInvalid).toEqual(true);\r\n    });\r\n\r\n    it('should mark as pristine if no child is dirty', () => {\r\n      const state = computeArrayState(FORM_CONTROL_ID, CONTROLS, [], {}, [], {});\r\n      expect(state.isDirty).toEqual(false);\r\n      expect(state.isPristine).toEqual(true);\r\n    });\r\n\r\n    it('should mark as dirty if some child is dirty', () => {\r\n      const dirtyControl = {\r\n        ...CONTROL_1,\r\n        isDirty: true,\r\n        isPristine: false,\r\n      };\r\n      const state = computeArrayState(FORM_CONTROL_ID, [dirtyControl, CONTROL_2], [], {}, [], {});\r\n      expect(state.isDirty).toEqual(true);\r\n      expect(state.isPristine).toEqual(false);\r\n    });\r\n\r\n    it('should mark as pristine if array is empty', () => {\r\n      const state = computeArrayState(FORM_CONTROL_ID, [], [], {}, [], {});\r\n      expect(state.isDirty).toBe(false);\r\n      expect(state.isPristine).toBe(true);\r\n    });\r\n\r\n    it('should mark as enabled if some child is enabled', () => {\r\n      const disabledControl = {\r\n        ...CONTROL_1,\r\n        isEnabled: false,\r\n        isDisabled: true,\r\n      };\r\n      const state = computeArrayState(FORM_CONTROL_ID, [disabledControl, CONTROL_2], [], {}, [], {});\r\n      expect(state.isEnabled).toEqual(true);\r\n      expect(state.isDisabled).toEqual(false);\r\n    });\r\n\r\n    it('should mark as disabled if all children are disabled', () => {\r\n      const disabledControl1 = {\r\n        ...CONTROL_1,\r\n        isEnabled: false,\r\n        isDisabled: true,\r\n      };\r\n      const disabledControl2 = {\r\n        ...CONTROL_1,\r\n        isEnabled: false,\r\n        isDisabled: true,\r\n      };\r\n      const state = computeArrayState(FORM_CONTROL_ID, [disabledControl1, disabledControl2], [], {}, [], {});\r\n      expect(state.isEnabled).toEqual(false);\r\n      expect(state.isDisabled).toEqual(true);\r\n    });\r\n\r\n    it('should mark as enabled if array is empty', () => {\r\n      const state = computeArrayState(FORM_CONTROL_ID, [], [], {}, [], {});\r\n      expect(state.isEnabled).toBe(true);\r\n      expect(state.isDisabled).toBe(false);\r\n    });\r\n\r\n    it('should mark as untouched if no child is touched', () => {\r\n      const state = computeArrayState(FORM_CONTROL_ID, CONTROLS, [], {}, [], {});\r\n      expect(state.isTouched).toEqual(false);\r\n      expect(state.isUntouched).toEqual(true);\r\n    });\r\n\r\n    it('should mark as touched if some child is touched', () => {\r\n      const touchedControl = {\r\n        ...CONTROL_1,\r\n        isTouched: true,\r\n        isUntouched: false,\r\n      };\r\n      const state = computeArrayState(FORM_CONTROL_ID, [touchedControl, CONTROL_2], [], {}, [], {});\r\n      expect(state.isTouched).toEqual(true);\r\n      expect(state.isUntouched).toEqual(false);\r\n    });\r\n\r\n    it('should mark as untouched if array is empty', () => {\r\n      const state = computeArrayState(FORM_CONTROL_ID, [], [], {}, [], {});\r\n      expect(state.isTouched).toEqual(false);\r\n      expect(state.isUntouched).toBe(true);\r\n    });\r\n\r\n    it('should mark as unsubmitted if no child is submitted', () => {\r\n      const state = computeArrayState(FORM_CONTROL_ID, CONTROLS, [], {}, [], {});\r\n      expect(state.isSubmitted).toEqual(false);\r\n      expect(state.isUnsubmitted).toEqual(true);\r\n    });\r\n\r\n    it('should mark as submitted if some child is submitted', () => {\r\n      const submittedControl = {\r\n        ...CONTROL_1,\r\n        isSubmitted: true,\r\n        isUnsubmitted: false,\r\n      };\r\n      const state = computeArrayState(FORM_CONTROL_ID, [submittedControl, CONTROL_2], [], {}, [], {});\r\n      expect(state.isSubmitted).toEqual(true);\r\n      expect(state.isUnsubmitted).toEqual(false);\r\n    });\r\n\r\n    it('should mark as unsubmitted if array is empty', () => {\r\n      const state = computeArrayState(FORM_CONTROL_ID, [], [], {}, [], {});\r\n      expect(state.isUnsubmitted).toBe(true);\r\n    });\r\n\r\n    it('should mark as validation pending if child has pending validations', () => {\r\n      const validationPendingControl = {\r\n        ...CONTROL_1,\r\n        pendingValidations: ['test'],\r\n        isValidationPending: true,\r\n      };\r\n      const state = computeArrayState(FORM_CONTROL_ID, [validationPendingControl, CONTROL_2], [], {}, [], {});\r\n      expect(state.isValidationPending).toEqual(true);\r\n    });\r\n\r\n    it('should mark as validation pending if array has pending validations', () => {\r\n      const state = computeArrayState(FORM_CONTROL_ID, CONTROLS, [], {}, ['test'], {});\r\n      expect(state.isValidationPending).toEqual(true);\r\n    });\r\n\r\n    it('should mark as no validation pending if no validations are pending', () => {\r\n      const state = computeArrayState(FORM_CONTROL_ID, CONTROLS, [], {}, [], {});\r\n      expect(state.isValidationPending).toEqual(false);\r\n    });\r\n  });\r\n\r\n  describe(computeGroupState.name, () => {\r\n    const VALUE = { inner1: 'a', inner2: 'b' };\r\n    const CONTROL_1 = createFormControlState(FORM_CONTROL_INNER_ID, VALUE.inner1);\r\n    const CONTROL_2 = createFormControlState(FORM_CONTROL_INNER2_ID, VALUE.inner2);\r\n    const CONTROLS = { inner1: CONTROL_1, inner2: CONTROL_2 };\r\n\r\n    it('should aggregate child values', () => {\r\n      const state = computeGroupState<typeof VALUE>(FORM_CONTROL_ID, CONTROLS, { inner1: '', inner2: '' }, {}, [], {});\r\n      expect(state.value).toEqual(VALUE);\r\n    });\r\n\r\n    it('should aggregate child errors', () => {\r\n      const childError = { required: true };\r\n      const controlWithError = {\r\n        ...CONTROL_1,\r\n        errors: childError,\r\n        isValid: false,\r\n        isInvalid: true,\r\n      };\r\n      const state = computeGroupState<typeof VALUE>(FORM_CONTROL_ID, { inner1: controlWithError, inner2: CONTROL_2 }, VALUE, {}, [], {});\r\n      expect(state.errors).toEqual({ _inner1: childError });\r\n    });\r\n\r\n    it('should merge own errors with child errors', () => {\r\n      const childError = { required: true };\r\n      const ownError = { max: true };\r\n      const controlWithError = {\r\n        ...CONTROL_1,\r\n        errors: childError,\r\n        isValid: false,\r\n        isInvalid: true,\r\n      };\r\n      const state = computeGroupState<typeof VALUE>(FORM_CONTROL_ID, { inner1: controlWithError, inner2: CONTROL_2 }, VALUE, ownError, [], {});\r\n      expect(state.errors).toEqual({ _inner1: childError, ...ownError });\r\n    });\r\n\r\n    it('should mark as valid if there are no errors', () => {\r\n      const state = computeGroupState<typeof VALUE>(FORM_CONTROL_ID, CONTROLS, VALUE, {}, [], {});\r\n      expect(state.isValid).toEqual(true);\r\n      expect(state.isInvalid).toEqual(false);\r\n    });\r\n\r\n    it('should mark as invalid if there are errors', () => {\r\n      const errors = { max: true };\r\n      const state = computeGroupState<typeof VALUE>(FORM_CONTROL_ID, CONTROLS, VALUE, errors, [], {});\r\n      expect(state.isValid).toEqual(false);\r\n      expect(state.isInvalid).toEqual(true);\r\n    });\r\n\r\n    it('should mark as pristine if no child is dirty', () => {\r\n      const state = computeGroupState<typeof VALUE>(FORM_CONTROL_ID, CONTROLS, VALUE, {}, [], {});\r\n      expect(state.isDirty).toEqual(false);\r\n      expect(state.isPristine).toEqual(true);\r\n    });\r\n\r\n    it('should mark as dirty if some child is dirty', () => {\r\n      const dirtyControl = {\r\n        ...CONTROL_1,\r\n        isDirty: true,\r\n        isPristine: false,\r\n      };\r\n      const state = computeGroupState<typeof VALUE>(FORM_CONTROL_ID, { inner1: dirtyControl, inner2: CONTROL_2 }, VALUE, {}, [], {});\r\n      expect(state.isDirty).toEqual(true);\r\n      expect(state.isPristine).toEqual(false);\r\n    });\r\n\r\n    it('should mark as pristine if group is empty', () => {\r\n      const state = computeGroupState(FORM_CONTROL_ID, {}, {}, {}, [], {});\r\n      expect(state.isDirty).toBe(false);\r\n      expect(state.isPristine).toBe(true);\r\n    });\r\n\r\n    it('should mark as enabled if some child is enabled', () => {\r\n      const disabledControl = {\r\n        ...CONTROL_1,\r\n        isEnabled: false,\r\n        isDisabled: true,\r\n      };\r\n      const state = computeGroupState<typeof VALUE>(FORM_CONTROL_ID, { inner1: disabledControl, inner2: CONTROL_2 }, VALUE, {}, [], {});\r\n      expect(state.isEnabled).toEqual(true);\r\n      expect(state.isDisabled).toEqual(false);\r\n    });\r\n\r\n    it('should mark as disabled if all children are disabled', () => {\r\n      const disabledControl1 = {\r\n        ...CONTROL_1,\r\n        isEnabled: false,\r\n        isDisabled: true,\r\n      };\r\n      const disabledControl2 = {\r\n        ...CONTROL_1,\r\n        isEnabled: false,\r\n        isDisabled: true,\r\n      };\r\n      const state = computeGroupState<typeof VALUE>(FORM_CONTROL_ID, { inner1: disabledControl1, inner2: disabledControl2 }, VALUE, {}, [], {});\r\n      expect(state.isEnabled).toEqual(false);\r\n      expect(state.isDisabled).toEqual(true);\r\n    });\r\n\r\n    it('should mark as enabled if group is empty', () => {\r\n      const state = computeGroupState(FORM_CONTROL_ID, {}, {}, {}, [], {});\r\n      expect(state.isEnabled).toBe(true);\r\n      expect(state.isDisabled).toBe(false);\r\n    });\r\n\r\n    it('should mark as untouched if no child is touched', () => {\r\n      const state = computeGroupState<typeof VALUE>(FORM_CONTROL_ID, CONTROLS, VALUE, {}, [], {});\r\n      expect(state.isTouched).toEqual(false);\r\n      expect(state.isUntouched).toEqual(true);\r\n    });\r\n\r\n    it('should mark as touched if some child is touched', () => {\r\n      const touchedControl = {\r\n        ...CONTROL_1,\r\n        isTouched: true,\r\n        isUntouched: false,\r\n      };\r\n      const state = computeGroupState<typeof VALUE>(FORM_CONTROL_ID, { inner1: touchedControl, inner2: CONTROL_2 }, VALUE, {}, [], {});\r\n      expect(state.isTouched).toEqual(true);\r\n      expect(state.isUntouched).toEqual(false);\r\n    });\r\n\r\n    it('should mark as untouched if group is empty', () => {\r\n      const state = computeGroupState(FORM_CONTROL_ID, {}, {}, {}, [], {});\r\n      expect(state.isTouched).toEqual(false);\r\n      expect(state.isUntouched).toBe(true);\r\n    });\r\n\r\n    it('should mark as unsubmitted if no child is submitted', () => {\r\n      const state = computeGroupState<typeof VALUE>(FORM_CONTROL_ID, CONTROLS, VALUE, {}, [], {});\r\n      expect(state.isSubmitted).toEqual(false);\r\n      expect(state.isUnsubmitted).toEqual(true);\r\n    });\r\n\r\n    it('should mark as submitted if some child is submitted', () => {\r\n      const submittedControl = {\r\n        ...CONTROL_1,\r\n        isSubmitted: true,\r\n        isUnsubmitted: false,\r\n      };\r\n      const state = computeGroupState<typeof VALUE>(FORM_CONTROL_ID, { inner1: submittedControl, inner2: CONTROL_2 }, VALUE, {}, [], {});\r\n      expect(state.isSubmitted).toEqual(true);\r\n      expect(state.isUnsubmitted).toEqual(false);\r\n    });\r\n\r\n    it('should mark as unsubmitted if group is empty', () => {\r\n      const state = computeGroupState(FORM_CONTROL_ID, {}, {}, {}, [], {});\r\n      expect(state.isUnsubmitted).toBe(true);\r\n    });\r\n\r\n    it('should mark as validation pending if child has pending validations', () => {\r\n      const validationPendingControl = {\r\n        ...CONTROL_1,\r\n        pendingValidations: ['test'],\r\n        isValidationPending: true,\r\n      };\r\n      const state = computeGroupState<typeof VALUE>(FORM_CONTROL_ID, { inner1: validationPendingControl, inner2: CONTROL_2 }, VALUE, {}, [], {});\r\n      expect(state.isValidationPending).toEqual(true);\r\n    });\r\n\r\n    it('should mark as validation pending if group has pending validations', () => {\r\n      const state = computeGroupState<typeof VALUE>(FORM_CONTROL_ID, CONTROLS, VALUE, {}, ['test'], {});\r\n      expect(state.isValidationPending).toEqual(true);\r\n    });\r\n\r\n    it('should mark as no validation pending if no validations are pending', () => {\r\n      const state = computeGroupState<typeof VALUE>(FORM_CONTROL_ID, CONTROLS, VALUE, {}, [], {});\r\n      expect(state.isValidationPending).toEqual(false);\r\n    });\r\n  });\r\n});\r\n"]}
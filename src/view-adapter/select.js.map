{"version":3,"file":"select.js","sourceRoot":"","sources":["select.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  Directive,\r\n  ElementRef,\r\n  forwardRef,\r\n  Host,\r\n  HostListener,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  Renderer2,\r\n} from '@angular/core';\r\n\r\nimport { FormControlState } from '../state';\r\nimport { FormViewAdapter, NGRX_FORM_VIEW_ADAPTER } from './view-adapter';\r\n\r\n// tslint:disable:directive-class-suffix\r\n\r\n@Directive({\r\n  selector: 'select:not([multiple])[ngrxFormControlState]',\r\n  providers: [{\r\n    provide: NGRX_FORM_VIEW_ADAPTER,\r\n    useExisting: forwardRef(() => NgrxSelectViewAdapter),\r\n    multi: true,\r\n  }],\r\n})\r\nexport class NgrxSelectViewAdapter implements FormViewAdapter {\r\n  private optionMap: { [id: string]: any } = {};\r\n  private idCounter = 0;\r\n  private selectedId: string | null = null;\r\n  private value: any = undefined;\r\n\r\n  onChangeFn: (value: any) => void = () => void 0;\r\n\r\n  @HostListener('blur')\r\n  onTouched: () => void = () => void 0\r\n\r\n  @Input() set ngrxFormControlState(value: FormControlState<any>) {\r\n    if (!value) {\r\n      throw new Error('The control state must not be undefined!');\r\n    }\r\n\r\n    if (value.id !== this.elementRef.nativeElement.id) {\r\n      this.renderer.setProperty(this.elementRef.nativeElement, 'id', value.id);\r\n    }\r\n  }\r\n\r\n  constructor(private renderer: Renderer2, private elementRef: ElementRef) { }\r\n\r\n  setViewValue(value: any) {\r\n    this.value = value;\r\n    this.selectedId = this.getOptionId(value);\r\n    if (this.selectedId === null) {\r\n      this.renderer.setProperty(this.elementRef.nativeElement, 'selectedIndex', -1);\r\n    }\r\n\r\n    this.renderer.setProperty(this.elementRef.nativeElement, 'value', this.selectedId);\r\n  }\r\n\r\n  @HostListener('change', ['$event'])\r\n  onChange(event: UIEvent) {\r\n    this.selectedId = (event.target as HTMLOptionElement).value;\r\n    const value = this.optionMap[this.selectedId];\r\n    this.value = value;\r\n    this.onChangeFn(value);\r\n  }\r\n\r\n  setOnChangeCallback(fn: (value: any) => void) {\r\n    this.onChangeFn = fn;\r\n  }\r\n\r\n  setOnTouchedCallback(fn: () => void) {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setIsDisabled(isDisabled: boolean) {\r\n    this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);\r\n  }\r\n\r\n  createOptionId() {\r\n    const id = this.idCounter.toString();\r\n    this.idCounter += 1;\r\n    return id;\r\n  }\r\n\r\n  updateOptionValue(id: string, value: any) {\r\n    this.optionMap[id] = value;\r\n\r\n    if (this.selectedId === id) {\r\n      this.onChangeFn(value);\r\n    } else if (value === this.value) {\r\n      this.setViewValue(value);\r\n    }\r\n  }\r\n\r\n  deregisterOption(id: string) {\r\n    delete this.optionMap[id];\r\n  }\r\n\r\n  private getOptionId(value: any) {\r\n    for (const id of Array.from(Object.keys(this.optionMap))) {\r\n      if (this.optionMap[id] === value) {\r\n        return id;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nconst NULL_VIEW_ADAPTER: NgrxSelectViewAdapter = {\r\n  createOptionId: () => '',\r\n  deregisterOption: () => void 0,\r\n  updateOptionValue: () => void 0,\r\n} as any;\r\n\r\nconst NULL_RENDERER: Renderer2 = {\r\n  setProperty: () => void 0,\r\n} as any;\r\n\r\n@Directive({\r\n  // tslint:disable-next-line:directive-selector\r\n  selector: 'option',\r\n})\r\nexport class NgrxSelectOption implements OnDestroy {\r\n  private isInitialized = false;\r\n  id: string;\r\n\r\n  constructor(\r\n    private element: ElementRef,\r\n    private renderer: Renderer2,\r\n    @Host() @Optional() private viewAdapter: NgrxSelectViewAdapter,\r\n  ) {\r\n    this.renderer = viewAdapter ? renderer : NULL_RENDERER;\r\n    this.viewAdapter = viewAdapter || NULL_VIEW_ADAPTER;\r\n    this.id = this.viewAdapter.createOptionId();\r\n  }\r\n\r\n  @Input('value')\r\n  set value(value: any) {\r\n    // this cannot be done inside ngOnInit since the value property\r\n    // must be already set when the option value is updated in the view\r\n    // adapter and the initial binding of 'value' happens before\r\n    // ngOnInit runs\r\n    if (!this.isInitialized) {\r\n      this.isInitialized = true;\r\n      this.renderer.setProperty(this.element.nativeElement, 'value', this.id);\r\n    }\r\n\r\n    this.viewAdapter.updateOptionValue(this.id, value);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.viewAdapter.deregisterOption(this.id);\r\n  }\r\n}\r\n"]}
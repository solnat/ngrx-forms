{"version":3,"file":"default.spec.js","sourceRoot":"","sources":["default.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, getDebugNode } from '@angular/core';\r\nimport { async, ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { NgrxDefaultViewAdapter } from './default';\r\n\r\nconst TEST_ID = 'test ID';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'default-test',\r\n  template: `\r\n<input type=\"text\" [ngrxFormControlState]=\"state\" />\r\n`,\r\n})\r\nexport class DefaultInputTestComponent {\r\n  state = { id: TEST_ID } as any;\r\n}\r\n\r\ndescribe(NgrxDefaultViewAdapter.name, () => {\r\n  let component: DefaultInputTestComponent;\r\n  let fixture: ComponentFixture<DefaultInputTestComponent>;\r\n  let viewAdapter: NgrxDefaultViewAdapter;\r\n  let element: HTMLInputElement;\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      declarations: [\r\n        NgrxDefaultViewAdapter,\r\n        DefaultInputTestComponent,\r\n      ],\r\n    }).compileComponents();\r\n  }));\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(DefaultInputTestComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n    element = (fixture.nativeElement as HTMLElement).querySelector('input') as HTMLInputElement;\r\n    viewAdapter = getDebugNode(element)!.injector.get(NgrxDefaultViewAdapter);\r\n  });\r\n\r\n  it('should attach the view adapter', () => expect(viewAdapter).toBeDefined());\r\n\r\n  it('should set the ID of the element to the ID of the state', () => {\r\n    expect(element.id).toBe(TEST_ID);\r\n  });\r\n\r\n  it('should set the ID of the element if the ID of the state changes', () => {\r\n    const newId = 'new ID';\r\n    viewAdapter.ngrxFormControlState = { id: newId } as any;\r\n    fixture.detectChanges();\r\n    expect(element.id).toBe(newId);\r\n  });\r\n\r\n  it('should set the input\\'s value', () => {\r\n    const newValue = 'new value';\r\n    viewAdapter.setViewValue(newValue);\r\n    expect(element.value).toBe(newValue);\r\n  });\r\n\r\n  it('should set the input\\'s value to empty string if null', () => {\r\n    viewAdapter.setViewValue(null);\r\n    expect(element.value).toBe('');\r\n  });\r\n\r\n  it('should call the registered function whenever the value changes', () => {\r\n    const spy = jasmine.createSpy('fn');\r\n    viewAdapter.setOnChangeCallback(spy);\r\n    const newValue = 'new value';\r\n    element.value = newValue;\r\n    element.dispatchEvent(new Event('input'));\r\n    expect(spy).toHaveBeenCalledWith(newValue);\r\n  });\r\n\r\n  it('should call the registered function whenever the input is blurred', () => {\r\n    const spy = jasmine.createSpy('fn');\r\n    viewAdapter.setOnTouchedCallback(spy);\r\n    element.dispatchEvent(new Event('blur'));\r\n    expect(spy).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should disable the input', () => {\r\n    viewAdapter.setIsDisabled(true);\r\n    expect(element.disabled).toBe(true);\r\n  });\r\n\r\n  it('should enable the input', () => {\r\n    element.disabled = true;\r\n    viewAdapter.setIsDisabled(false);\r\n    expect(element.disabled).toBe(false);\r\n  });\r\n\r\n  it('should throw if state is undefined', () => {\r\n    expect(() => viewAdapter.ngrxFormControlState = undefined as any).toThrowError();\r\n  });\r\n});\r\n"]}
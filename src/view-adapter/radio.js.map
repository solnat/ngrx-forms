{"version":3,"file":"radio.js","sourceRoot":"","sources":["radio.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAA0G;AAG1G,+CAAyE;AAEzE,wCAAwC;AAUxC,IAAa,oBAAoB;IA6B/B,8BACU,QAAmB,EACnB,UAAsB;QADtB,aAAQ,GAAR,QAAQ,CAAW;QACnB,eAAU,GAAV,UAAU,CAAY;QAPhC,aAAQ,GAAe,cAAM,OAAA,KAAK,CAAC,EAAN,CAAM,CAAA;QAGnC,cAAS,GAAe,cAAM,OAAA,KAAK,CAAC,EAAN,CAAM,CAAA;IAKhC,CAAC;IA/BI,sBAAI,uCAAK;aAAT,UAAU,GAAQ;YACzB,EAAE,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;gBAC7B,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC;gBACvB,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;oBACnB,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAClB,CAAC;YACH,CAAC;QACH,CAAC;;;OAAA;IAEQ,sBAAI,sDAAoB;aAAxB,UAAyB,KAA4B;YAC5D,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACX,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;YAC9D,CAAC;YAED,EAAE,CAAC,CAAC,KAAK,CAAC,EAAE,KAAK,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;gBACpD,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,MAAM,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;YAC7E,CAAC;QACH,CAAC;;;OAAA;IAgBD,uCAAQ,GAAR;QACE,IAAI,CAAC,SAAS,GAAI,IAAI,CAAC,UAAU,CAAC,aAAkC,CAAC,OAAO,CAAC;IAC/E,CAAC;IAED,2CAAY,GAAZ,UAAa,KAAU;QACrB,IAAI,CAAC,SAAS,GAAG,KAAK,KAAK,IAAI,CAAC,WAAW,CAAC;QAC5C,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IACtF,CAAC;IAED,kDAAmB,GAAnB,UAAoB,EAAoB;QAAxC,iBAEC;QADC,IAAI,CAAC,QAAQ,GAAG,cAAM,OAAA,EAAE,CAAC,KAAI,CAAC,WAAW,CAAC,EAApB,CAAoB,CAAC;IAC7C,CAAC;IAED,mDAAoB,GAApB,UAAqB,EAAc;QACjC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACtB,CAAC;IAED,4CAAa,GAAb,UAAc,UAAmB;QAC/B,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;IACnF,CAAC;IACH,2BAAC;AAAD,CAAC,AAtDD,IAsDC;AArDU;IAAR,YAAK,EAAE;;;iDAOP;AAEQ;IAAR,YAAK,EAAE;;;gEAQP;AAMD;IADC,mBAAY,CAAC,QAAQ,CAAC;;sDACY;AAGnC;IADC,mBAAY,CAAC,MAAM,CAAC;;uDACe;AA3BzB,oBAAoB;IARhC,gBAAS,CAAC;QACT,QAAQ,EAAE,yCAAyC;QACnD,SAAS,EAAE,CAAC;gBACV,OAAO,EAAE,qCAAsB;gBAC/B,WAAW,EAAE,iBAAU,CAAC,cAAM,OAAA,sBAAoB,EAApB,CAAoB,CAAC;gBACnD,KAAK,EAAE,IAAI;aACZ,CAAC;KACH,CAAC;qCA+BoB,gBAAS;QACP,iBAAU;GA/BrB,oBAAoB,CAsDhC;AAtDY,oDAAoB","sourcesContent":["import { Directive, ElementRef, forwardRef, HostListener, Input, OnInit, Renderer2 } from '@angular/core';\r\n\r\nimport { FormControlState } from '../state';\r\nimport { FormViewAdapter, NGRX_FORM_VIEW_ADAPTER } from './view-adapter';\r\n\r\n// tslint:disable:directive-class-suffix\r\n\r\n@Directive({\r\n  selector: 'input[type=radio][ngrxFormControlState]',\r\n  providers: [{\r\n    provide: NGRX_FORM_VIEW_ADAPTER,\r\n    useExisting: forwardRef(() => NgrxRadioViewAdapter),\r\n    multi: true,\r\n  }],\r\n})\r\nexport class NgrxRadioViewAdapter implements FormViewAdapter, OnInit {\r\n  @Input() set value(val: any) {\r\n    if (val !== this.latestValue) {\r\n      this.latestValue = val;\r\n      if (this.isChecked) {\r\n        this.onChange();\r\n      }\r\n    }\r\n  }\r\n\r\n  @Input() set ngrxFormControlState(value: FormControlState<any>) {\r\n    if (!value) {\r\n      throw new Error('The control state must not be undefined!');\r\n    }\r\n\r\n    if (value.id !== this.elementRef.nativeElement.name) {\r\n      this.renderer.setProperty(this.elementRef.nativeElement, 'name', value.id);\r\n    }\r\n  }\r\n\r\n  private latestValue: any;\r\n  private isChecked: boolean;\r\n\r\n  @HostListener('change')\r\n  onChange: () => void = () => void 0\r\n\r\n  @HostListener('blur')\r\n  onTouched: () => void = () => void 0\r\n\r\n  constructor(\r\n    private renderer: Renderer2,\r\n    private elementRef: ElementRef,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.isChecked = (this.elementRef.nativeElement as HTMLInputElement).checked;\r\n  }\r\n\r\n  setViewValue(value: any): void {\r\n    this.isChecked = value === this.latestValue;\r\n    this.renderer.setProperty(this.elementRef.nativeElement, 'checked', this.isChecked);\r\n  }\r\n\r\n  setOnChangeCallback(fn: (_: any) => void): void {\r\n    this.onChange = () => fn(this.latestValue);\r\n  }\r\n\r\n  setOnTouchedCallback(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setIsDisabled(isDisabled: boolean): void {\r\n    this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);\r\n  }\r\n}\r\n"]}
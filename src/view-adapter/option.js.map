{"version":3,"file":"option.js","sourceRoot":"","sources":["option.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,sCAOuB;AAEvB,mCAAiD;AACjD,qDAAkE;AAElE,wCAAwC;AAExC,IAAM,aAAa,GAAc;IAC/B,WAAW,EAAE,cAAM,OAAA,KAAK,CAAC,EAAN,CAAM;CACnB,CAAC;AAET;;;;;;;;;;GAUG;AAKH,IAAa,wBAAwB;IACnC,kCACU,OAAmB,EACnB,QAAmB,EACP,WAAkC,EAClC,mBAAkD;QAH9D,YAAO,GAAP,OAAO,CAAY;QACnB,aAAQ,GAAR,QAAQ,CAAW;QAI3B,IAAI,CAAC,QAAQ,GAAG,WAAW,IAAI,mBAAmB,GAAG,aAAa,GAAG,QAAQ,CAAC;IAChF,CAAC;IAGD,sBAAI,2CAAK;aAAT,UAAU,KAAU;YAClB,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;QACxE,CAAC;;;OAAA;IACH,+BAAC;AAAD,CAAC,AAdD,IAcC;AAHC;IADC,YAAK,CAAC,OAAO,CAAC;;;qDAGd;AAbU,wBAAwB;IAJpC,gBAAS,CAAC;QACT,8CAA8C;QAC9C,QAAQ,EAAE,QAAQ;KACnB,CAAC;IAKG,WAAA,WAAI,EAAE,CAAA,EAAE,WAAA,eAAQ,EAAE,CAAA;IAClB,WAAA,WAAI,EAAE,CAAA,EAAE,WAAA,eAAQ,EAAE,CAAA;qCAHF,iBAAU;QACT,gBAAS;QACM,8BAAqB;QACb,+CAA6B;GAL7D,wBAAwB,CAcpC;AAdY,4DAAwB","sourcesContent":["import {\r\n  Directive,\r\n  ElementRef,\r\n  Host,\r\n  Input,\r\n  Optional,\r\n  Renderer2,\r\n} from '@angular/core';\r\n\r\nimport { NgrxSelectViewAdapter } from './select';\r\nimport { NgrxSelectMultipleViewAdapter } from './select-multiple';\r\n\r\n// tslint:disable:directive-class-suffix\r\n\r\nconst NULL_RENDERER: Renderer2 = {\r\n  setProperty: () => void 0,\r\n} as any;\r\n\r\n/**\r\n * This directive is necessary to restore the default behaviour of Angular\r\n * when an `option` is used without an **ngrx-forms** form state. Since it\r\n * is not possible to select an element with a selector that considers its\r\n * parent the `option` directives for `select` and `select[multiple]` will\r\n * always be applied and therefore overriding the `[value]` binding which\r\n * disabled Angular's normal behaviour. This directive restores this\r\n * behaviour if no `select` or `select[multiple]` view adapter is found.\r\n * This is not a perfect solution since it may interfere with other\r\n * directives that try to set the `[value]` but that is very unlikely.\r\n */\r\n@Directive({\r\n  // tslint:disable-next-line:directive-selector\r\n  selector: 'option',\r\n})\r\nexport class NgrxFallbackSelectOption {\r\n  constructor(\r\n    private element: ElementRef,\r\n    private renderer: Renderer2,\r\n    @Host() @Optional() viewAdapter: NgrxSelectViewAdapter,\r\n    @Host() @Optional() multipleViewAdapter: NgrxSelectMultipleViewAdapter,\r\n  ) {\r\n    this.renderer = viewAdapter || multipleViewAdapter ? NULL_RENDERER : renderer;\r\n  }\r\n\r\n  @Input('value')\r\n  set value(value: any) {\r\n    this.renderer.setProperty(this.element.nativeElement, 'value', value);\r\n  }\r\n}\r\n"]}
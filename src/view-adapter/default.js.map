{"version":3,"file":"default.js","sourceRoot":"","sources":["default.ts"],"names":[],"mappings":"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","sourcesContent":["import { Directive, ElementRef, forwardRef, HostListener, Input, Renderer2 } from '@angular/core';\r\nimport { ÉµgetDOM as getDOM } from '@angular/platform-browser';\r\n\r\nimport { FormControlState } from '../state';\r\nimport { FormViewAdapter, NGRX_FORM_VIEW_ADAPTER } from './view-adapter';\r\n\r\n/**\r\n * We must check whether the agent is Android because composition events\r\n * behave differently between iOS and Android.\r\n */\r\nfunction isAndroid(): boolean {\r\n  const userAgent = getDOM() ? getDOM().getUserAgent() : '';\r\n  return /android (\\d+)/.test(userAgent.toLowerCase());\r\n}\r\n\r\n// tslint:disable:directive-class-suffix\r\n\r\n@Directive({\r\n  selector: 'input:not([type=checkbox])[ngrxFormControlState],textarea[ngrxFormControlState]',\r\n  providers: [{\r\n    provide: NGRX_FORM_VIEW_ADAPTER,\r\n    useExisting: forwardRef(() => NgrxDefaultViewAdapter),\r\n    multi: true,\r\n  }],\r\n})\r\nexport class NgrxDefaultViewAdapter implements FormViewAdapter {\r\n  onChange: (value: any) => void = () => void 0;\r\n\r\n  @HostListener('blur')\r\n  onTouched: () => void = () => void 0\r\n\r\n  @Input() set ngrxFormControlState(value: FormControlState<any>) {\r\n    if (!value) {\r\n      throw new Error('The control state must not be undefined!');\r\n    }\r\n\r\n    if (value.id !== this.elementRef.nativeElement.id) {\r\n      this.renderer.setProperty(this.elementRef.nativeElement, 'id', value.id);\r\n    }\r\n  }\r\n\r\n  /** Whether the user is creating a composition string (IME events). */\r\n  private isComposing = false;\r\n  private isCompositionSupported = !isAndroid();\r\n\r\n  constructor(private renderer: Renderer2, private elementRef: ElementRef) { }\r\n\r\n  setViewValue(value: any): void {\r\n    const normalizedValue = value == null ? '' : value;\r\n    this.renderer.setProperty(this.elementRef.nativeElement, 'value', normalizedValue);\r\n  }\r\n\r\n  setOnChangeCallback(fn: (value: any) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  setOnTouchedCallback(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setIsDisabled(isDisabled: boolean): void {\r\n    this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);\r\n  }\r\n\r\n  @HostListener('input', ['$event'])\r\n  handleInput(event: UIEvent): void {\r\n    if (this.isCompositionSupported && this.isComposing) {\r\n      return;\r\n    }\r\n\r\n    this.onChange((event.target as HTMLInputElement).value);\r\n  }\r\n\r\n  @HostListener('compositionstart')\r\n  compositionStart(): void {\r\n    this.isComposing = true;\r\n  }\r\n\r\n  @HostListener('compositionend', ['$event'])\r\n  compositionEnd(event: UIEvent): void {\r\n    this.isComposing = false;\r\n    if (this.isCompositionSupported) {\r\n      this.onChange((event.target as HTMLInputElement).value);\r\n    }\r\n  }\r\n}\r\n"]}
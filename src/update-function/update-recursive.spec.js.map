{"version":3,"file":"update-recursive.spec.js","sourceRoot":"","sources":["update-recursive.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { cast, createFormArrayState, createFormControlState, createFormGroupState } from '../state';\r\nimport { FORM_CONTROL_ID, FORM_CONTROL_INNER2_ID, FORM_CONTROL_INNER_ID } from './test-util';\r\nimport { updateRecursive } from './update-recursive';\r\n\r\ndescribe(updateRecursive.name, () => {\r\n  it('should apply the provided functions to controls', () => {\r\n    const state = createFormControlState(FORM_CONTROL_ID, '');\r\n    const expected = { ...state, value: 'A' };\r\n    const resultState = updateRecursive<string>(() => expected)(state);\r\n    expect(resultState).toBe(expected);\r\n  });\r\n\r\n  it('should apply the provided functions to controls uncurried', () => {\r\n    const state = createFormControlState<string>(FORM_CONTROL_ID, '');\r\n    const expected = { ...state, value: 'A' };\r\n    const resultState = updateRecursive(state, () => expected);\r\n    expect(resultState).toBe(expected);\r\n  });\r\n\r\n  it('should apply the provided functions to arrays', () => {\r\n    const state = createFormArrayState(FORM_CONTROL_ID, ['']);\r\n    const expected = { ...state, value: ['A'] };\r\n    const resultState = updateRecursive<string[]>(() => expected)(state);\r\n    expect(resultState).toBe(expected);\r\n  });\r\n\r\n  it('should apply the provided functions to arrays uncurried', () => {\r\n    const state = createFormArrayState(FORM_CONTROL_ID, ['']);\r\n    const expected = { ...state, value: ['A'] };\r\n    const resultState = updateRecursive(state, () => expected);\r\n    expect(resultState).toBe(expected);\r\n  });\r\n\r\n  it('should apply the provided functions to children in an array', () => {\r\n    const state = createFormArrayState(FORM_CONTROL_ID, ['']);\r\n    const expected = { ...state.controls[0], value: 'A' };\r\n    const resultState = updateRecursive<string[]>(s => s.id === FORM_CONTROL_ID + '.0' ? expected : s)(state);\r\n    expect(cast(resultState).controls[0]).toBe(expected);\r\n  });\r\n\r\n  it('should apply the provided functions to multiple children in an array', () => {\r\n    const state = createFormArrayState(FORM_CONTROL_ID, ['', '']);\r\n    const expected = { ...state.controls[1], value: 'A' };\r\n    const resultState = updateRecursive<string[]>(s => s.id === FORM_CONTROL_ID + '.1' ? expected : s)(state);\r\n    expect(cast(resultState).controls[1]).toBe(expected);\r\n  });\r\n\r\n  it('should apply the provided functions to groups', () => {\r\n    const state = createFormGroupState(FORM_CONTROL_ID, { inner: '' });\r\n    const expected = { ...state, value: { inner: 'A' } };\r\n    const resultState = updateRecursive<typeof state.value>(() => expected)(state);\r\n    expect(resultState).toBe(expected);\r\n  });\r\n\r\n  it('should apply the provided functions to groups uncurried', () => {\r\n    const state = createFormGroupState(FORM_CONTROL_ID, { inner: '' });\r\n    const expected = { ...state, value: { inner: 'A' } };\r\n    const resultState = updateRecursive(state, () => expected);\r\n    expect(resultState).toBe(expected);\r\n  });\r\n\r\n  it('should apply the provided functions to children in a group', () => {\r\n    const state = createFormGroupState(FORM_CONTROL_ID, { inner: '' });\r\n    const expected = { ...state.controls.inner, value: 'A' };\r\n    const resultState = updateRecursive<typeof state.value>(s => s.id === FORM_CONTROL_INNER_ID ? expected : s)(state);\r\n    expect(cast(resultState).controls.inner).toBe(expected);\r\n  });\r\n\r\n  it('should apply the provided functions to multiple children in a group', () => {\r\n    const state = createFormGroupState(FORM_CONTROL_ID, { inner: '', inner2: '' });\r\n    const expected = { ...state.controls.inner2, value: 'A' };\r\n    const resultState = updateRecursive<typeof state.value>(s => s.id === FORM_CONTROL_INNER2_ID ? expected : s)(state);\r\n    expect(cast(resultState).controls.inner2).toBe(expected);\r\n  });\r\n\r\n  it('should apply multiple provided functions one after another', () => {\r\n    const state = createFormArrayState(FORM_CONTROL_ID, ['A', 'B', 'C']);\r\n    const expected1 = { ...state.controls[0], value: 'D' };\r\n    const expected2 = { ...state.controls[1], value: 'E' };\r\n    const expected3 = { ...state.controls[2], value: 'F' };\r\n    let resultState = updateRecursive<typeof state.value>(s => s.value === 'A' ? expected1 : s.value === 'B' ? expected3 : s)(state);\r\n    resultState = updateRecursive<typeof state.value>(s => s.value === 'F' ? expected2 : s.value === 'C' ? expected3 : s)(resultState);\r\n    expect(cast(resultState).controls[0]).toBe(expected1);\r\n    expect(cast(resultState).controls[1]).toBe(expected2);\r\n    expect(cast(resultState).controls[2]).toBe(expected3);\r\n  });\r\n\r\n  it('should pass top level state itself as the second parameter for top level state', () => {\r\n    const state = createFormArrayState(FORM_CONTROL_ID, ['', '']);\r\n    updateRecursive<typeof state.value>((c, p) => {\r\n      if (c === state) {\r\n        expect(p).toBe(state);\r\n      }\r\n\r\n      return c;\r\n    })(state);\r\n  });\r\n\r\n  it('should pass the parent state as the second parameter for child states', () => {\r\n    const state = createFormArrayState(FORM_CONTROL_ID, ['', '']);\r\n    updateRecursive<typeof state.value>((c, p) => {\r\n      if (c !== state) {\r\n        expect(p).toBe(state);\r\n      }\r\n\r\n      return c;\r\n    })(state);\r\n  });\r\n});\r\n"]}
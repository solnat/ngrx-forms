{"version":3,"file":"remove-array-control.js","sourceRoot":"","sources":["remove-array-control.ts"],"names":[],"mappings":";;AAAA,sCAAsD;AACtD,4CAAoD;AAEpD,+BAAqC;AAcrC,4BAA2C,KAAa,EAAE,KAA8B;IACtF,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QACZ,MAAM,CAAC,0BAAgB,CAAC,KAAK,EAAE,IAAI,kCAAwB,CAAC,KAAK,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC;IAChF,CAAC;IAED,MAAM,CAAC,UAAC,CAAyB,IAAK,OAAA,kBAAkB,CAAC,KAAK,EAAE,kBAAW,CAAC,CAAC,CAAC,CAAC,EAAzC,CAAyC,CAAC;AAClF,CAAC;AAND,gDAMC","sourcesContent":["import { RemoveArrayControlAction } from '../actions';\r\nimport { formArrayReducer } from '../array/reducer';\r\nimport { FormArrayState } from '../state';\r\nimport { ensureState } from './util';\r\n\r\n/**\r\n * This update function takes an index and returns a projection function\r\n * that removes the child control at the given index from a form array state.\r\n */\r\nexport function removeArrayControl<TValue>(index: number): (state: FormArrayState<TValue>) => FormArrayState<TValue>;\r\n\r\n/**\r\n * This update function takes an index and an array form state and removes the\r\n * child control at the given index from the state.\r\n */\r\nexport function removeArrayControl<TValue>(index: number, state: FormArrayState<TValue>): FormArrayState<TValue>;\r\n\r\nexport function removeArrayControl<TValue>(index: number, state?: FormArrayState<TValue>) {\r\n  if (!!state) {\r\n    return formArrayReducer(state, new RemoveArrayControlAction(state.id, index));\r\n  }\r\n\r\n  return (s: FormArrayState<TValue>) => removeArrayControl(index, ensureState(s));\r\n}\r\n"]}
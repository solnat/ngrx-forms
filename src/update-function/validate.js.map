{"version":3,"file":"validate.js","sourceRoot":"","sources":["validate.ts"],"names":[],"mappings":";;AAAA,sCAA6C;AAS7C,+BAAwE;AAyCxE,kBAAiC,KAA4B,EAAE,KAAoC;IACjG,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QACZ,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC;QAC/C,IAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,YAAY,IAAK,OAAA,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAA7C,CAA6C,EAAE,EAAsB,CAAC,CAAC;QAE1H,MAAM,CAAC,6BAAsB,CAAC,KAAK,EAAE,IAAI,yBAAe,CAAC,KAAK,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC;IAC9E,CAAC;IAED,MAAM,CAAC,UAAC,CAA+B,IAAK,OAAA,QAAQ,CAAC,KAAK,EAAE,kBAAW,CAAC,CAAC,CAAC,CAAC,EAA/B,CAA+B,CAAC;AAC9E,CAAC;AATD,4BASC","sourcesContent":["import { SetErrorsAction } from '../actions';\r\nimport {\r\n  AbstractControlState,\r\n  FormArrayState,\r\n  FormControlState,\r\n  FormControlValueTypes,\r\n  FormGroupState,\r\n  ValidationErrors,\r\n} from '../state';\r\nimport { abstractControlReducer, ensureState, ProjectFn } from './util';\r\n\r\nexport type ValidationFn<TValue> = (value: TValue) => ValidationErrors;\r\nexport type ValidateParam<TValue> = ValidationFn<TValue> | Array<ValidationFn<TValue>>;\r\n\r\n/**\r\n * This update function takes a validation function or an array of validation\r\n * functions and returns a projection function that sets the errors of a form\r\n * state to the result of applying the given validation function(s) to the\r\n * state's value.\r\n */\r\nexport function validate<TValue>(param: ValidateParam<TValue>): ProjectFn<AbstractControlState<TValue>>;\r\n\r\n/**\r\n * This update function takes a validation function or an array of validation\r\n * functions and a form control state and sets the errors of the state to the\r\n * result of applying the given validation function(s) to the state's value.\r\n */\r\nexport function validate<TValue extends FormControlValueTypes>(param: ValidateParam<TValue>, state: FormControlState<TValue>): FormControlState<TValue>;\r\n\r\n/**\r\n * This update function takes a validation function or an array of validation\r\n * functions and a form array state and sets the errors of the state to the\r\n * result of applying the given validation function(s) to the state's value.\r\n */\r\nexport function validate<TValue>(param: ValidateParam<TValue>, state: FormArrayState<TValue>): FormArrayState<TValue>;\r\n\r\n/**\r\n * This update function takes a validation function or an array of validation\r\n * functions and a form group state and sets the errors of the state to the\r\n * result of applying the given validation function(s) to the state's value.\r\n */\r\nexport function validate<TValue>(param: ValidateParam<TValue>, state: FormGroupState<TValue>): FormGroupState<TValue>;\r\n\r\n/**\r\n * This update function takes a validation function or an array of validation\r\n * functions and a form state and sets the errors of the state to the result\r\n * of applying the given validation function(s) to the state's value.\r\n */\r\nexport function validate<TValue>(param: ValidateParam<TValue>, state: AbstractControlState<TValue>): AbstractControlState<TValue>;\r\n\r\nexport function validate<TValue>(param: ValidateParam<TValue>, state?: AbstractControlState<TValue>) {\r\n  if (!!state) {\r\n    param = Array.isArray(param) ? param : [param];\r\n    const errors = param.reduce((agg, validationFn) => Object.assign(agg, validationFn(state.value)), {} as ValidationErrors);\r\n\r\n    return abstractControlReducer(state, new SetErrorsAction(state.id, errors));\r\n  }\r\n\r\n  return (s: AbstractControlState<TValue>) => validate(param, ensureState(s));\r\n}\r\n"]}
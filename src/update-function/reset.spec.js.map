{"version":3,"file":"reset.spec.js","sourceRoot":"","sources":["reset.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { reset } from './reset';\r\nimport { INITIAL_STATE } from './test-util';\r\n\r\ndescribe(reset.name, () => {\r\n  it('should call reducer for controls if dirty', () => {\r\n    const state = { ...INITIAL_STATE.controls.inner, isDirty: true, isPristine: false };\r\n    const resultState = reset(state);\r\n    expect(resultState).not.toBe(state);\r\n  });\r\n\r\n  it('should call reducer for controls if touched', () => {\r\n    const state = { ...INITIAL_STATE.controls.inner, isTouched: true, isUntouched: false };\r\n    const resultState = reset(state);\r\n    expect(resultState).not.toBe(state);\r\n  });\r\n\r\n  it('should call reducer for controls if submitted', () => {\r\n    const state = { ...INITIAL_STATE.controls.inner, isSubmitted: true, isUnsubmitted: false };\r\n    const resultState = reset(state);\r\n    expect(resultState).not.toBe(state);\r\n  });\r\n\r\n  it('should call reducer for groups if dirty', () => {\r\n    const state = { ...INITIAL_STATE, isDirty: true, isPristine: false };\r\n    const resultState = reset(state);\r\n    expect(resultState).not.toBe(state);\r\n  });\r\n\r\n  it('should call reducer for groups if touched', () => {\r\n    const state = { ...INITIAL_STATE, isTouched: true, isUntouched: false };\r\n    const resultState = reset(state);\r\n    expect(resultState).not.toBe(state);\r\n  });\r\n\r\n  it('should call reducer for groups if submitted', () => {\r\n    const state = { ...INITIAL_STATE, isSubmitted: true, isUnsubmitted: false };\r\n    const resultState = reset(state);\r\n    expect(resultState).not.toBe(state);\r\n  });\r\n\r\n  it('should call reducer for arrays if dirty', () => {\r\n    const state = { ...INITIAL_STATE.controls.inner5, isDirty: true, isPristine: false };\r\n    const resultState = reset(state);\r\n    expect(resultState).not.toBe(state);\r\n  });\r\n\r\n  it('should call reducer for arrays if touched', () => {\r\n    const state = { ...INITIAL_STATE.controls.inner5, isTouched: true, isUntouched: false };\r\n    const resultState = reset(state);\r\n    expect(resultState).not.toBe(state);\r\n  });\r\n\r\n  it('should call reducer for arrays if submitted', () => {\r\n    const state = { ...INITIAL_STATE.controls.inner5, isSubmitted: true, isUnsubmitted: false };\r\n    const resultState = reset(state);\r\n    expect(resultState).not.toBe(state);\r\n  });\r\n});\r\n"]}
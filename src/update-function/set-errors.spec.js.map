{"version":3,"file":"set-errors.spec.js","sourceRoot":"","sources":["set-errors.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { cast, createFormArrayState, createFormGroupState } from '../state';\r\nimport { FormGroupValue, INITIAL_STATE } from './test-util';\r\nimport { setErrors } from './set-errors';\r\n\r\ndescribe(setErrors.name, () => {\r\n  it('should call reducer for controls', () => {\r\n    const errors = { required: true };\r\n    const resultState = setErrors<string>(errors)(cast(INITIAL_STATE.controls.inner));\r\n    expect(resultState).not.toBe(cast(INITIAL_STATE.controls.inner));\r\n  });\r\n\r\n  it('should call reducer for groups', () => {\r\n    const errors = { required: true };\r\n    const resultState = setErrors<FormGroupValue>(errors)(INITIAL_STATE);\r\n    expect(resultState).not.toBe(cast(INITIAL_STATE));\r\n  });\r\n\r\n  it('should call reducer for empty groups', () => {\r\n    const errors = { required: true };\r\n    const state = createFormGroupState('test ID', {});\r\n    const resultState = setErrors(errors)(state);\r\n    expect(resultState).not.toBe(state);\r\n  });\r\n\r\n  it('should call reducer for arrays', () => {\r\n    const errors = { required: true };\r\n    const resultState = setErrors<string[]>(errors)(INITIAL_STATE.controls.inner5);\r\n    expect(resultState).not.toBe(cast(INITIAL_STATE.controls.inner5));\r\n  });\r\n\r\n  it('should call reducer for empty arrays', () => {\r\n    const errors = { required: true };\r\n    const state = createFormArrayState<string>('test ID', []);\r\n    const resultState = setErrors<string[]>(errors)(state);\r\n    expect(resultState).not.toBe(state);\r\n  });\r\n\r\n  it('should call reducer for controls uncurried', () => {\r\n    const errors = { required: true };\r\n    const resultState = setErrors(errors, INITIAL_STATE.controls.inner);\r\n    expect(resultState).not.toBe(INITIAL_STATE.controls.inner);\r\n  });\r\n\r\n  it('should call reducer for groups uncurried', () => {\r\n    const errors = { required: true };\r\n    const resultState = setErrors(errors, INITIAL_STATE);\r\n    expect(resultState).not.toBe(INITIAL_STATE);\r\n  });\r\n\r\n  it('should call reducer for empty groups uncurried', () => {\r\n    const errors = { required: true };\r\n    const state = createFormGroupState('test ID', {});\r\n    const resultState = setErrors(errors, state);\r\n    expect(resultState).not.toBe(state);\r\n  });\r\n\r\n  it('should call reducer for arrays uncurried', () => {\r\n    const errors = { required: true };\r\n    const resultState = setErrors(errors, INITIAL_STATE.controls.inner5);\r\n    expect(resultState).not.toBe(INITIAL_STATE.controls.inner5);\r\n  });\r\n\r\n  it('should call reducer for empty arrays uncurried', () => {\r\n    const errors = { required: true };\r\n    const state = createFormArrayState<string>('test ID', []);\r\n    const resultState = setErrors<string[]>(errors, state);\r\n    expect(resultState).not.toBe(state);\r\n  });\r\n\r\n  it('should merge errors from multiple validation functions', () => {\r\n    const errors1 = { required: true };\r\n    const errors2 = { min: 1 };\r\n    const mergedErrors = { required: true, min: 1 };\r\n    const resultState = setErrors<string>([errors1, errors2])(cast(INITIAL_STATE.controls.inner));\r\n    expect(resultState.errors).toEqual(mergedErrors);\r\n  });\r\n\r\n  it('should merge errors from multiple validation functions in the order they were provided', () => {\r\n    const errors1 = { min: 1, required: true };\r\n    const errors2 = { min: 2 };\r\n    const mergedErrors = { required: true, min: 2 };\r\n    const resultState = setErrors<string>([errors1, errors2])(cast(INITIAL_STATE.controls.inner));\r\n    expect(resultState.errors).toEqual(mergedErrors);\r\n  });\r\n\r\n  it('should throw if curried and no state', () => {\r\n    const errors = { required: true };\r\n    expect(() => setErrors<string>(errors)(undefined as any)).toThrowError();\r\n  });\r\n});\r\n"]}
{"version":3,"file":"remove-group-control.js","sourceRoot":"","sources":["remove-group-control.ts"],"names":[],"mappings":";;AAAA,sCAAsD;AACtD,4CAAoD;AAEpD,+BAAqC;AAcrC,4BAA4D,IAAkB,EAAE,KAA8B;IAC5G,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QACZ,MAAM,CAAC,0BAAgB,CAAC,KAAK,EAAE,IAAI,kCAAwB,CAAS,KAAK,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC;IACvF,CAAC;IAED,MAAM,CAAC,UAAC,CAAyB,IAAK,OAAA,kBAAkB,CAAC,IAAI,EAAE,kBAAW,CAAC,CAAC,CAAC,CAAC,EAAxC,CAAwC,CAAC;AACjF,CAAC;AAND,gDAMC","sourcesContent":["import { RemoveGroupControlAction } from '../actions';\r\nimport { formGroupReducer } from '../group/reducer';\r\nimport { FormGroupState, KeyValue } from '../state';\r\nimport { ensureState } from './util';\r\n\r\n/**\r\n * This update function takes a name and returns a projection function\r\n * that removes the child control with the given name from a form group state.\r\n */\r\nexport function removeGroupControl<TValue extends KeyValue>(name: keyof TValue): (state: FormGroupState<TValue>) => FormGroupState<TValue>;\r\n\r\n/**\r\n * This update function takes a name and a group form state and removes the\r\n * child control with the given name from the state.\r\n */\r\nexport function removeGroupControl<TValue extends KeyValue>(name: keyof TValue, state: FormGroupState<TValue>): FormGroupState<TValue>;\r\n\r\nexport function removeGroupControl<TValue extends KeyValue>(name: keyof TValue, state?: FormGroupState<TValue>) {\r\n  if (!!state) {\r\n    return formGroupReducer(state, new RemoveGroupControlAction<TValue>(state.id, name));\r\n  }\r\n\r\n  return (s: FormGroupState<TValue>) => removeGroupControl(name, ensureState(s));\r\n}\r\n"]}
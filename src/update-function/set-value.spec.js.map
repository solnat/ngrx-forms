{"version":3,"file":"set-value.spec.js","sourceRoot":"","sources":["set-value.spec.ts"],"names":[],"mappings":";;AAAA,kCAAgC;AAChC,yCAA4D;AAC5D,yCAAuC;AAEvC,QAAQ,CAAC,oBAAQ,CAAC,IAAI,EAAE;IACtB,EAAE,CAAC,kCAAkC,EAAE;QACrC,IAAM,WAAW,GAAG,oBAAQ,CAAS,GAAG,CAAC,CAAC,YAAI,CAAC,yBAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;QAC9E,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,YAAI,CAAC,yBAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;IACnE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gCAAgC,EAAE;QACnC,IAAM,WAAW,GAAG,oBAAQ,CAAiB,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,yBAAa,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,yBAAa,CAAC,CAAC;QAChH,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,YAAI,CAAC,yBAAa,CAAC,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gCAAgC,EAAE;QACnC,IAAM,WAAW,GAAG,oBAAQ,CAAW,CAAC,GAAG,CAAC,CAAC,CAAC,yBAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC7E,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,YAAI,CAAC,yBAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IACpE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4CAA4C,EAAE;QAC/C,IAAM,WAAW,GAAG,oBAAQ,CAAC,GAAG,EAAE,yBAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAChE,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,yBAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE;QAC7C,IAAM,WAAW,GAAG,oBAAQ,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,yBAAa,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,yBAAa,CAAC,CAAC;QAChG,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,yBAAa,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE;QAC7C,IAAM,WAAW,GAAG,oBAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,yBAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACnE,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,yBAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sCAAsC,EAAE;QACzC,MAAM,CAAC,cAAM,OAAA,oBAAQ,CAAS,EAAE,CAAC,CAAC,SAAgB,CAAC,EAAtC,CAAsC,CAAC,CAAC,YAAY,EAAE,CAAC;IACtE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { cast } from '../state';\r\nimport { FormGroupValue, INITIAL_STATE } from './test-util';\r\nimport { setValue } from './set-value';\r\n\r\ndescribe(setValue.name, () => {\r\n  it('should call reducer for controls', () => {\r\n    const resultState = setValue<string>('A')(cast(INITIAL_STATE.controls.inner));\r\n    expect(resultState).not.toBe(cast(INITIAL_STATE.controls.inner));\r\n  });\r\n\r\n  it('should call reducer for groups', () => {\r\n    const resultState = setValue<FormGroupValue>({ inner: 'A', inner5: INITIAL_STATE.value.inner5 })(INITIAL_STATE);\r\n    expect(resultState).not.toBe(cast(INITIAL_STATE));\r\n  });\r\n\r\n  it('should call reducer for arrays', () => {\r\n    const resultState = setValue<string[]>(['A'])(INITIAL_STATE.controls.inner5);\r\n    expect(resultState).not.toBe(cast(INITIAL_STATE.controls.inner5));\r\n  });\r\n\r\n  it('should call reducer for controls uncurried', () => {\r\n    const resultState = setValue('A', INITIAL_STATE.controls.inner);\r\n    expect(resultState).not.toBe(INITIAL_STATE.controls.inner);\r\n  });\r\n\r\n  it('should call reducer for groups uncurried', () => {\r\n    const resultState = setValue({ inner: 'A', inner5: INITIAL_STATE.value.inner5 }, INITIAL_STATE);\r\n    expect(resultState).not.toBe(INITIAL_STATE);\r\n  });\r\n\r\n  it('should call reducer for arrays uncurried', () => {\r\n    const resultState = setValue(['A'], INITIAL_STATE.controls.inner5);\r\n    expect(resultState).not.toBe(INITIAL_STATE.controls.inner5);\r\n  });\r\n\r\n  it('should throw if curried and no state', () => {\r\n    expect(() => setValue<string>('')(undefined as any)).toThrowError();\r\n  });\r\n});\r\n"]}
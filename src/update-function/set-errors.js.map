{"version":3,"file":"set-errors.js","sourceRoot":"","sources":["set-errors.ts"],"names":[],"mappings":";;AAAA,sCAA6C;AAS7C,+BAA6D;AAmC7D,mBAAkC,KAA4C,EAAE,KAAoC;IAClH,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QACZ,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC;QAC/C,IAAM,MAAM,GAAI,KAA4B,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,GAAG,IAAK,OAAA,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,EAAvB,CAAuB,EAAE,EAAsB,CAAC,CAAC;QAEnH,MAAM,CAAC,6BAAsB,CAAC,KAAK,EAAE,IAAI,yBAAe,CAAC,KAAK,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC;IAC9E,CAAC;IAED,MAAM,CAAC,UAAC,CAA+B,IAAK,OAAA,SAAS,CAAC,KAAK,EAAE,kBAAW,CAAC,CAAC,CAAC,CAAC,EAAhC,CAAgC,CAAC;AAC/E,CAAC;AATD,8BASC","sourcesContent":["import { SetErrorsAction } from '../actions';\r\nimport {\r\n  AbstractControlState,\r\n  FormArrayState,\r\n  FormControlState,\r\n  FormControlValueTypes,\r\n  FormGroupState,\r\n  ValidationErrors,\r\n} from '../state';\r\nimport { abstractControlReducer, ensureState } from './util';\r\n\r\n/**\r\n * This update function takes an error object or an array of error objects and returns\r\n * a projection function that sets the errors of a form state.\r\n */\r\nexport function setErrors<TValue>(param: ValidationErrors | ValidationErrors[]): (state: AbstractControlState<TValue>) => AbstractControlState<TValue>;\r\n\r\n/**\r\n * This update function takes an error object or an array of error objects and a form\r\n * state and sets the errors of the state.\r\n */\r\nexport function setErrors<TValue extends FormControlValueTypes>(\r\n  param: ValidationErrors | ValidationErrors[],\r\n  state: FormControlState<TValue>,\r\n): FormControlState<TValue>;\r\n\r\n/**\r\n * This update function takes an error object or an array of error objects and a form\r\n * array state and sets the errors of the state.\r\n */\r\nexport function setErrors<TValue>(param: ValidationErrors | ValidationErrors[], state: FormArrayState<TValue>): FormArrayState<TValue>;\r\n\r\n/**\r\n * This update function takes an error object or an array of error objects and a form\r\n * group state and sets the errors of the state.\r\n */\r\nexport function setErrors<TValue>(param: ValidationErrors | ValidationErrors[], state: FormGroupState<TValue>): FormGroupState<TValue>;\r\n\r\n/**\r\n * This update function takes an error object or an array of error objects and a form\r\n * state and sets the errors of the state.\r\n */\r\nexport function setErrors<TValue>(param: ValidationErrors | ValidationErrors[], state: AbstractControlState<TValue>): AbstractControlState<TValue>;\r\n\r\nexport function setErrors<TValue>(param: ValidationErrors | ValidationErrors[], state?: AbstractControlState<TValue>) {\r\n  if (!!state) {\r\n    param = Array.isArray(param) ? param : [param];\r\n    const errors = (param as ValidationErrors[]).reduce((agg, err) => Object.assign(agg, err), {} as ValidationErrors);\r\n\r\n    return abstractControlReducer(state, new SetErrorsAction(state.id, errors));\r\n  }\r\n\r\n  return (s: AbstractControlState<TValue>) => setErrors(param, ensureState(s));\r\n}\r\n"]}
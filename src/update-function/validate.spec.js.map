{"version":3,"file":"validate.spec.js","sourceRoot":"","sources":["validate.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { cast } from '../state';\r\nimport { FormGroupValue, INITIAL_STATE } from './test-util';\r\nimport { validate } from './validate';\r\n\r\ndescribe(validate.name, () => {\r\n  it('should call reducer for controls', () => {\r\n    const errors = { required: true };\r\n    const resultState = validate<string>(() => errors)(cast(INITIAL_STATE.controls.inner));\r\n    expect(resultState).not.toBe(cast(INITIAL_STATE.controls.inner));\r\n  });\r\n\r\n  it('should call reducer for groups', () => {\r\n    const errors = { required: true };\r\n    const resultState = validate<FormGroupValue>(() => errors)(INITIAL_STATE);\r\n    expect(resultState).not.toBe(cast(INITIAL_STATE));\r\n  });\r\n\r\n  it('should call reducer for arrays', () => {\r\n    const errors = { required: true };\r\n    const resultState = validate<string[]>(() => errors)(INITIAL_STATE.controls.inner5);\r\n    expect(resultState).not.toBe(cast(INITIAL_STATE.controls.inner5));\r\n  });\r\n\r\n  it('should call reducer for controls uncurried', () => {\r\n    const errors = { required: true };\r\n    const resultState = validate(() => errors, INITIAL_STATE.controls.inner);\r\n    expect(resultState).not.toBe(INITIAL_STATE.controls.inner);\r\n  });\r\n\r\n  it('should call reducer for groups uncurried', () => {\r\n    const errors = { required: true };\r\n    const resultState = validate(() => errors, INITIAL_STATE);\r\n    expect(resultState).not.toBe(INITIAL_STATE);\r\n  });\r\n\r\n  it('should call reducer for arrays uncurried', () => {\r\n    const errors = { required: true };\r\n    const resultState = validate(() => errors, INITIAL_STATE.controls.inner5);\r\n    expect(resultState).not.toBe(INITIAL_STATE.controls.inner5);\r\n  });\r\n\r\n  it('should merge errors from multiple validation functions', () => {\r\n    const errors1 = { required: true };\r\n    const errors2 = { min: 1 };\r\n    const mergedErrors = { required: true, min: 1 };\r\n    const resultState = validate<string>([() => errors1, () => errors2])(cast(INITIAL_STATE.controls.inner));\r\n    expect(resultState.errors).toEqual(mergedErrors);\r\n  });\r\n\r\n  it('should merge errors from multiple validation functions in the order they were provided', () => {\r\n    const errors1 = { min: 1, required: true };\r\n    const errors2 = { min: 2 };\r\n    const mergedErrors = { required: true, min: 2 };\r\n    const resultState = validate<string>([() => errors1, () => errors2])(cast(INITIAL_STATE.controls.inner));\r\n    expect(resultState.errors).toEqual(mergedErrors);\r\n  });\r\n\r\n  it('should throw if curried and no state', () => {\r\n    const errors = { required: true };\r\n    expect(() => validate<string>(() => errors)(undefined as any)).toThrowError();\r\n  });\r\n});\r\n"]}
{"version":3,"file":"update-recursive.js","sourceRoot":"","sources":["update-recursive.ts"],"names":[],"mappings":";;AAAA,kCAQkB;AAClB,+CAA6C;AAC7C,+CAA6C;AAG7C,+BAA+B,MAAiC,EAAE,QAA0E;IAC1I,MAAM,CAAC,UAAC,KAAgC;QACtC,EAAE,CAAC,CAAC,oBAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACxB,IAAM,eAAe,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,GAAG;gBAAK,OAAA,MAAM,CAAC,MAAM,CAAC,GAAG;oBACxF,GAAC,GAAG,IAAG,UAAC,CAA4B,EAAE,CAA4B,IAAK,OAAA,qBAAqB,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,EAArC,CAAqC;wBAC5G;;YAFuE,CAEvE,EAAE,EAAE,CAAC,CAAC;YACR,KAAK,GAAG,0BAAW,CAAM,eAAe,CAAC,CAAC,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QACjC,CAAC;QAED,EAAE,CAAC,CAAC,oBAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACxB,KAAK,GAAG,0BAAW,CAAM,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,qBAAqB,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,EAArC,CAAqC,CAAC,CAAC,KAAK,CAAC,CAAC;YACjF,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QACjC,CAAC;QAED,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IACjC,CAAC,CAAC;AACJ,CAAC;AA4FD,yBACE,eAAgH;IAChH,qBAAuF;SAAvF,UAAuF,EAAvF,qBAAuF,EAAvF,IAAuF;QAAvF,oCAAuF;;IAEvF,EAAE,CAAC,CAAC,OAAO,eAAe,KAAK,UAAU,CAAC,CAAC,CAAC;QACnC,IAAA,sBAAK,EAAE,2BAAO,CAAgB;QACrC,MAAM,CAAC,eAAe,gBAAC,KAAK,SAAK,IAAI,GAAE,eAAe,CAAC,CAAC;IAC1D,CAAC;IAED,MAAM,CAAC,UAAC,KAAmC;QACzC,MAAM,CAAC,CAAC,eAAsB,SAAK,WAAW,EAAE,MAAM,CAAC,UAAC,CAAC,EAAE,QAAQ,IAAK,OAAA,qBAAqB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAzC,CAAyC,EAAE,KAAK,CAAC,CAAC;IAC5H,CAAC,CAAC;AACJ,CAAC;AAZD,0CAYC","sourcesContent":["import {\r\n  AbstractControlState,\r\n  FormArrayState,\r\n  FormControlState,\r\n  FormControlValueTypes,\r\n  FormGroupState,\r\n  isArrayState,\r\n  isGroupState,\r\n} from '../state';\r\nimport { updateArray } from './update-array';\r\nimport { updateGroup } from './update-group';\r\nimport { ProjectFn2 } from './util';\r\n\r\nfunction updateRecursiveSingle(parent: AbstractControlState<any>, updateFn: ProjectFn2<AbstractControlState<any>, AbstractControlState<any>>) {\r\n  return (state: AbstractControlState<any>): AbstractControlState<any> => {\r\n    if (isGroupState(state)) {\r\n      const updateFunctions = Object.keys(state.controls).reduce((agg, key) => Object.assign(agg, {\r\n        [key]: (s: AbstractControlState<any>, p: AbstractControlState<any>) => updateRecursiveSingle(p, updateFn)(s),\r\n      }), {});\r\n      state = updateGroup<any>(updateFunctions)(state);\r\n      return updateFn(state, parent);\r\n    }\r\n\r\n    if (isArrayState(state)) {\r\n      state = updateArray<any>((s, p) => updateRecursiveSingle(p, updateFn)(s))(state);\r\n      return updateFn(state, parent);\r\n    }\r\n\r\n    return updateFn(state, parent);\r\n  };\r\n}\r\n\r\n/**\r\n * This update function takes a variable number of update functions and returns\r\n * a projection function that applies all update functions one after another to\r\n * a form state.\r\n *\r\n * The following example uses this function to validate all controls in a\r\n * group as required.\r\n *\r\n * ```typescript\r\n * const updateFn = updateRecursive(validate(required));\r\n * const updatedState = updateFn(state);\r\n * ```\r\n */\r\nexport function updateRecursive<TValue>(\r\n  ...updateFnArr: Array<ProjectFn2<AbstractControlState<any>, AbstractControlState<any>>>,\r\n): (state: AbstractControlState<TValue>) => AbstractControlState<TValue>;\r\n\r\n/**\r\n * This update function takes a form control state and a variable number of\r\n * update functions applies all update functions one after another to the\r\n * state.\r\n */\r\nexport function updateRecursive<TValue extends FormControlValueTypes>(\r\n  state: FormControlState<TValue>,\r\n  ...updateFnArr: Array<ProjectFn2<AbstractControlState<any>, AbstractControlState<any>>>,\r\n): FormControlState<TValue>;\r\n\r\n/**\r\n * This update function takes a form array state and a variable number of\r\n * update functions applies all update functions one after another to the\r\n * state recursively, i.e. the function is applied to the state's children,\r\n * their children etc.\r\n *\r\n * The following example uses this function to validate all controls in an\r\n * array as required.\r\n *\r\n * ```typescript\r\n * const updatedState = updateRecursive(\r\n *   state,\r\n *   validate(required),\r\n * );\r\n * ```\r\n */\r\nexport function updateRecursive<TValue>(\r\n  state: FormArrayState<TValue>,\r\n  ...updateFnArr: Array<ProjectFn2<AbstractControlState<any>, AbstractControlState<any>>>,\r\n): FormArrayState<TValue>;\r\n\r\n/**\r\n * This update function takes a form group state and a variable number of\r\n * update functions applies all update functions one after another to the\r\n * state recursively, i.e. the function is applied to the state's children,\r\n * their children etc.\r\n *\r\n * The following example uses this function to validate all controls in a\r\n * group as required.\r\n *\r\n * ```typescript\r\n * const updatedState = updateRecursive(\r\n *   state,\r\n *   validate(required),\r\n * );\r\n * ```\r\n */\r\nexport function updateRecursive<TValue>(\r\n  state: FormGroupState<TValue>,\r\n  ...updateFnArr: Array<ProjectFn2<AbstractControlState<any>, AbstractControlState<any>>>,\r\n): FormGroupState<TValue>;\r\n\r\n/**\r\n * This update function takes a form state and a variable number of update\r\n * functions applies all update functions one after another to the state\r\n * recursively, i.e. the function is applied to the state's children, their\r\n * children etc.\r\n *\r\n * The following example uses this function to validate all controls in a\r\n * group as required.\r\n *\r\n * ```typescript\r\n * const updatedState = updateRecursive(\r\n *   state,\r\n *   validate(required),\r\n * );\r\n * ```\r\n */\r\nexport function updateRecursive<TValue>(\r\n  state: AbstractControlState<TValue>,\r\n  ...updateFnArr: Array<ProjectFn2<AbstractControlState<any>, AbstractControlState<any>>>,\r\n): AbstractControlState<TValue>;\r\n\r\nexport function updateRecursive<TValue>(\r\n  stateOrFunction: AbstractControlState<TValue> | ProjectFn2<AbstractControlState<any>, AbstractControlState<any>>,\r\n  ...updateFnArr: Array<ProjectFn2<AbstractControlState<any>, AbstractControlState<any>>>,\r\n) {\r\n  if (typeof stateOrFunction !== 'function') {\r\n    const [first, ...rest] = updateFnArr;\r\n    return updateRecursive(first, ...rest)(stateOrFunction);\r\n  }\r\n\r\n  return (state: AbstractControlState<TValue>): AbstractControlState<TValue> => {\r\n    return [stateOrFunction as any, ...updateFnArr].reduce((s, updateFn) => updateRecursiveSingle(state, updateFn)(s), state);\r\n  };\r\n}\r\n"]}
{"version":3,"file":"update-array.js","sourceRoot":"","sources":["update-array.ts"],"names":[],"mappings":";;AAAA,kCAAiF;AAGjF,kCAA0C,QAA0E;IAClH,MAAM,CAAC,UAAC,KAA6B;QACnC,IAAI,UAAU,GAAG,KAAK,CAAC;QACvB,IAAM,WAAW,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAC,OAAO,EAAE,KAAK;YACpD,IAAM,UAAU,GAAG,QAAQ,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;YACnD,UAAU,GAAG,UAAU,IAAI,UAAU,KAAK,OAAO,CAAC;YAClD,MAAM,CAAC,UAAU,CAAC;QACpB,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,UAAU,GAAG,WAAW,GAAG,KAAK,CAAC,QAAQ,CAAC;IACnD,CAAC,CAAC;AACJ,CAAC;AAED,2BAAmC,QAA0E;IAC3G,MAAM,CAAC,UAAC,KAA6B;QACnC,IAAM,WAAW,GAAG,wBAAwB,CAAS,QAAQ,CAAC,CAAC,KAAK,CAAC,CAAC;QACtE,MAAM,CAAC,WAAW,KAAK,KAAK,CAAC,QAAQ;cACjC,yBAAiB,CAAS,KAAK,CAAC,EAAE,EAAE,WAAW,EAAE,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,kBAAkB,EAAE,KAAK,CAAC,qBAAqB,CAAC;cAClI,KAAK,CAAC;IACZ,CAAC,CAAC;AACJ,CAAC;AA0CD,qBACE,eAA0G;IAC1G,qBAAuF;SAAvF,UAAuF,EAAvF,qBAAuF,EAAvF,IAAuF;QAAvF,oCAAuF;;IAEvF,EAAE,CAAC,CAAC,OAAO,eAAe,KAAK,UAAU,CAAC,CAAC,CAAC;QACnC,IAAA,sBAAK,EAAE,2BAAO,CAAgB;QACrC,MAAM,CAAC,WAAW,gBAAC,KAAK,SAAK,IAAI,GAAE,eAAe,CAAC,CAAC;IACtD,CAAC;IAED,MAAM,CAAC,UAAC,KAA6B;QACnC,MAAM,CAAC,CAAC,eAAsB,SAAK,WAAW,EAAE,MAAM,CAAC,UAAC,CAAC,EAAE,QAAQ,IAAK,OAAA,iBAAiB,CAAS,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAtC,CAAsC,EAAE,KAAK,CAAC,CAAC;IACzH,CAAC,CAAC;AACJ,CAAC;AAZD,kCAYC","sourcesContent":["import {AbstractControlState, computeArrayState, FormArrayState} from '../state';\nimport {ProjectFn2} from './util';\n\nfunction updateArrayControlsState<TValue>(updateFn: ProjectFn2<AbstractControlState<TValue>, FormArrayState<TValue>>) {\n  return (state: FormArrayState<TValue>) => {\n    let hasChanged = false;\n    const newControls = state.controls.map((control, index) => {\n      const newControl = updateFn(control, state, index);\n      hasChanged = hasChanged || newControl !== control;\n      return newControl;\n    });\n    return hasChanged ? newControls : state.controls;\n  };\n}\n\nfunction updateArraySingle<TValue>(updateFn: ProjectFn2<AbstractControlState<TValue>, FormArrayState<TValue>>) {\n  return (state: FormArrayState<TValue>): FormArrayState<TValue> => {\n    const newControls = updateArrayControlsState<TValue>(updateFn)(state);\n    return newControls !== state.controls\n      ? computeArrayState<TValue>(state.id, newControls, state.value, state.errors, state.pendingValidations, state.userDefinedProperties)\n      : state;\n  };\n}\n\n/**\n * This update function takes a variable number of update functions and returns\n * a projection function that applies all update functions one after another to\n * a form array state.\n *\n * The following (contrived) example uses this function to validate all its\n * children to be required and mark them as dirty.\n *\n * ```typescript\n * const arrayUpdateFn = updateArray<string>(\n *   validate(required),\n *   markAsDirty,\n * );\n * const updatedState = arrayUpdateFn(state);\n * ```\n */\nexport function updateArray<TValue>(\n  ...updateFnArr: Array<ProjectFn2<AbstractControlState<TValue>, FormArrayState<TValue>>>,\n): (state: FormArrayState<TValue> | AbstractControlState<TValue[] | undefined>) => FormArrayState<TValue>;\n\n/**\n * This update function takes a form array state and a variable number of update\n * functions applies all update functions one after another to the state.\n *\n * The following (contrived) example uses this function to validate all its\n * children to be required and mark them as dirty.\n *\n * ```typescript\n * const updatedState = updateArray<string>(\n *   state,\n *   validate(required),\n *   markAsDirty,\n * );\n * ```\n */\nexport function updateArray<TValue>(\n  state: FormArrayState<TValue>,\n  ...updateFnArr: Array<ProjectFn2<AbstractControlState<TValue>, FormArrayState<TValue>>>,\n): FormArrayState<TValue>;\n\nexport function updateArray<TValue>(\n  stateOrFunction: FormArrayState<TValue> | ProjectFn2<AbstractControlState<TValue>, FormArrayState<TValue>>,\n  ...updateFnArr: Array<ProjectFn2<AbstractControlState<TValue>, FormArrayState<TValue>>>,\n) {\n  if (typeof stateOrFunction !== 'function') {\n    const [first, ...rest] = updateFnArr;\n    return updateArray(first, ...rest)(stateOrFunction);\n  }\n\n  return (state: FormArrayState<TValue>): FormArrayState<TValue> => {\n    return [stateOrFunction as any, ...updateFnArr].reduce((s, updateFn) => updateArraySingle<TValue>(updateFn)(s), state);\n  };\n}\n"]}
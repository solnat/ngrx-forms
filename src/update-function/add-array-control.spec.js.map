{"version":3,"file":"add-array-control.spec.js","sourceRoot":"","sources":["add-array-control.spec.ts"],"names":[],"mappings":";;AAAA,kCAAsD;AACtD,yDAAsD;AACtD,yCAA8C;AAE9C,QAAQ,CAAC,mCAAe,CAAC,IAAI,EAAE;IAC7B,IAAM,mBAAmB,GAAG,4BAAoB,CAAC,2BAAe,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAExE,EAAE,CAAC,gCAAgC,EAAE;QACnC,IAAM,WAAW,GAAG,mCAAe,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC;QACjE,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,YAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8CAA8C,EAAE;QACjD,IAAM,WAAW,GAAG,mCAAe,CAAC,GAAG,CAAC,CAAC,mBAAmB,CAAC,CAAC;QAC9D,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,YAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE;QAC7C,IAAM,WAAW,GAAG,mCAAe,CAAC,GAAG,EAAE,mBAAmB,EAAE,CAAC,CAAC,CAAC;QACjE,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,YAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wDAAwD,EAAE;QAC3D,IAAM,WAAW,GAAG,mCAAe,CAAC,GAAG,EAAE,mBAAmB,CAAC,CAAC;QAC9D,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,YAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sCAAsC,EAAE;QACzC,MAAM,CAAC,cAAM,OAAA,mCAAe,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,SAAgB,CAAC,EAAzC,CAAyC,CAAC,CAAC,YAAY,EAAE,CAAC;IACzE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { cast, createFormArrayState } from '../state';\r\nimport { addArrayControl } from './add-array-control';\r\nimport { FORM_CONTROL_ID } from './test-util';\r\n\r\ndescribe(addArrayControl.name, () => {\r\n  const INITIAL_ARRAY_STATE = createFormArrayState(FORM_CONTROL_ID, ['']);\r\n\r\n  it('should call reducer for arrays', () => {\r\n    const resultState = addArrayControl('A', 1)(INITIAL_ARRAY_STATE);\r\n    expect(resultState).not.toBe(cast(INITIAL_ARRAY_STATE));\r\n  });\r\n\r\n  it('should call reducer for arrays without index', () => {\r\n    const resultState = addArrayControl('A')(INITIAL_ARRAY_STATE);\r\n    expect(resultState).not.toBe(cast(INITIAL_ARRAY_STATE));\r\n  });\r\n\r\n  it('should call reducer for arrays uncurried', () => {\r\n    const resultState = addArrayControl('A', INITIAL_ARRAY_STATE, 1);\r\n    expect(resultState).not.toBe(cast(INITIAL_ARRAY_STATE));\r\n  });\r\n\r\n  it('should call reducer for arrays uncurried without index', () => {\r\n    const resultState = addArrayControl('A', INITIAL_ARRAY_STATE);\r\n    expect(resultState).not.toBe(cast(INITIAL_ARRAY_STATE));\r\n  });\r\n\r\n  it('should throw if curried and no state', () => {\r\n    expect(() => addArrayControl('A', 1)(undefined as any)).toThrowError();\r\n  });\r\n});\r\n"]}
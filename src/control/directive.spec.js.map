{"version":3,"file":"directive.spec.js","sourceRoot":"","sources":["directive.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import 'rxjs/add/operator/count';\r\nimport 'rxjs/add/operator/first';\r\nimport 'rxjs/add/operator/skip';\r\n\r\nimport { ElementRef } from '@angular/core';\r\nimport { Action } from '@ngrx/store';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\r\n\r\nimport { MarkAsDirtyAction, SetValueAction, FocusAction, UnfocusAction } from '../actions';\r\nimport { createFormControlState } from '../state';\r\nimport { FormViewAdapter } from '../view-adapter/view-adapter';\r\nimport { NgrxFormControlDirective } from './directive';\r\nimport { NgrxValueConverters } from './value-converter';\r\n\r\ndescribe(NgrxFormControlDirective.name, () => {\r\n  let directive: NgrxFormControlDirective<string | null, any>;\r\n  let elementRef: ElementRef;\r\n  let nativeElement: HTMLElement;\r\n  let document: Document;\r\n  let actionsSubject: ReplaySubject<Action>;\r\n  let actions$: Observable<Action>;\r\n  let viewAdapter: FormViewAdapter;\r\n  let onChange: (value: any) => void;\r\n  let onTouched: () => void;\r\n  const FORM_CONTROL_ID = 'test ID';\r\n  const INITIAL_FORM_CONTROL_VALUE = 'value';\r\n  const INITIAL_STATE = createFormControlState<string>(FORM_CONTROL_ID, INITIAL_FORM_CONTROL_VALUE);\r\n\r\n  beforeEach(() => {\r\n    nativeElement = jasmine.createSpyObj('nativeElement', ['focus', 'blur']);\r\n    elementRef = { nativeElement } as any as ElementRef;\r\n    document = {} as any as Document;\r\n    actionsSubject = new ReplaySubject<Action>();\r\n    actions$ = actionsSubject as any; // required due to mismatch of lift() function signature\r\n    viewAdapter = {\r\n      setViewValue: () => void 0,\r\n      setOnChangeCallback: fn => onChange = fn,\r\n      setOnTouchedCallback: fn => onTouched = fn,\r\n      setIsDisabled: () => void 0,\r\n    };\r\n    directive = new NgrxFormControlDirective<string>(elementRef, document, actionsSubject as any, [viewAdapter], []);\r\n    directive.ngrxFormControlState = INITIAL_STATE;\r\n  });\r\n\r\n  describe('writing values and dispatching value and dirty actions', () => {\r\n    beforeEach(() => {\r\n      directive.ngOnInit();\r\n    });\r\n\r\n    it('should write the value when the state changes', () => {\r\n      const newValue = 'new value';\r\n      const spy = spyOn(viewAdapter, 'setViewValue');\r\n      directive.ngrxFormControlState = { ...INITIAL_STATE, value: newValue };\r\n      expect(spy).toHaveBeenCalledWith(newValue);\r\n    });\r\n\r\n    it('should not write the value when the state value does not change', () => {\r\n      const spy = spyOn(viewAdapter, 'setViewValue');\r\n      directive.ngrxFormControlState = INITIAL_STATE;\r\n      expect(spy).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('should not write the value when the state value is the same as the view value', () => {\r\n      const newValue = 'new value';\r\n      onChange(newValue);\r\n      const spy = spyOn(viewAdapter, 'setViewValue');\r\n      directive.ngrxFormControlState = { ...INITIAL_STATE, value: newValue };\r\n      expect(spy).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('should write the value when the state value does not change but the id does', () => {\r\n      const spy = spyOn(viewAdapter, 'setViewValue');\r\n      directive.ngrxFormControlState = { ...INITIAL_STATE, id: FORM_CONTROL_ID + '1' };\r\n      expect(spy).toHaveBeenCalledWith(INITIAL_STATE.value);\r\n    });\r\n\r\n    it('should write the value when the state value does not change but the id does after a new view value was reported', () => {\r\n      const newValue = 'new value';\r\n      onChange(newValue);\r\n      const spy = spyOn(viewAdapter, 'setViewValue');\r\n      directive.ngrxFormControlState = { ...INITIAL_STATE, id: FORM_CONTROL_ID + '1', value: newValue };\r\n      expect(spy).toHaveBeenCalledWith(newValue);\r\n    });\r\n\r\n    it('should write the value when the state value does not change but the id does after an undefined view value was reported', () => {\r\n      const newValue = undefined as any;\r\n      onChange(newValue);\r\n      const spy = spyOn(viewAdapter, 'setViewValue');\r\n      directive.ngrxFormControlState = { ...INITIAL_STATE, id: FORM_CONTROL_ID + '1', value: newValue };\r\n      expect(spy).toHaveBeenCalledWith(newValue);\r\n    });\r\n\r\n    it(`should dispatch a ${SetValueAction.name} if the view value changes`, done => {\r\n      actions$.first().subscribe(a => {\r\n        expect(a).toEqual(new SetValueAction(INITIAL_STATE.id, newValue));\r\n        done();\r\n      });\r\n\r\n      const newValue = 'new value';\r\n      onChange(newValue);\r\n    });\r\n\r\n    it(`should not dispatch a ${SetValueAction.name} if the view value is the same as the state`, done => {\r\n      actions$.count().subscribe(c => {\r\n        expect(c).toEqual(0);\r\n        done();\r\n      });\r\n\r\n      onChange(INITIAL_STATE.value);\r\n      actionsSubject.complete();\r\n    });\r\n\r\n    it(`should dispatch a ${MarkAsDirtyAction.name} if the view value changes when the state is not marked as dirty`, done => {\r\n      actions$.skip(1).first().subscribe(a => {\r\n        expect(a).toEqual(new MarkAsDirtyAction(INITIAL_STATE.id));\r\n        done();\r\n      });\r\n\r\n      const newValue = 'new value';\r\n      onChange(newValue);\r\n    });\r\n\r\n    it(`should not dispatch a ${MarkAsDirtyAction.name} if the view value changes when the state is marked as dirty`, done => {\r\n      actions$.count().subscribe(c => {\r\n        expect(c).toEqual(1);\r\n        done();\r\n      });\r\n\r\n      directive.ngrxFormControlState = { ...INITIAL_STATE, isDirty: true, isPristine: false };\r\n      const newValue = 'new value';\r\n      onChange(newValue);\r\n      actionsSubject.complete();\r\n    });\r\n\r\n    it('should write the value when the state changes to the same value that was reported from the view before', () => {\r\n      const newValue = 'new value';\r\n      onChange(newValue);\r\n      directive.ngrxFormControlState = { ...INITIAL_STATE, value: newValue };\r\n      directive.ngrxFormControlState = INITIAL_STATE;\r\n      const spy = spyOn(viewAdapter, 'setViewValue');\r\n      directive.ngrxFormControlState = { ...INITIAL_STATE, value: newValue };\r\n      expect(spy).toHaveBeenCalledWith(newValue);\r\n    });\r\n\r\n    it('should correctly set the initial values if a value converter is set after the initial state', () => {\r\n      const convertedValue = ['A'];\r\n      viewAdapter = {\r\n        ...viewAdapter,\r\n        setViewValue: v => expect(v).toEqual(convertedValue),\r\n      };\r\n      directive = new NgrxFormControlDirective<string>(elementRef, document, actionsSubject as any, [viewAdapter], []);\r\n      directive.ngrxFormControlState = INITIAL_STATE;\r\n      directive.ngrxValueConverter = {\r\n        convertStateToViewValue: () => convertedValue,\r\n        convertViewToStateValue: s => s,\r\n      };\r\n      directive.ngOnInit();\r\n    });\r\n  });\r\n\r\n  describe('ngrxUpdateOn \"blur\"', () => {\r\n    beforeEach(() => {\r\n      directive.ngOnInit();\r\n      directive.ngrxFormControlState = { ...INITIAL_STATE, isTouched: true, isUntouched: false };\r\n      directive.ngrxUpdateOn = 'blur';\r\n    });\r\n\r\n    it('should dispatch an action on blur if the view value has changed with ngrxUpdateOn \"blur\"', done => {\r\n      actions$.first().subscribe(a => {\r\n        expect(a).toEqual(new SetValueAction(INITIAL_STATE.id, newValue));\r\n        done();\r\n      });\r\n\r\n      const newValue = 'new value';\r\n      onChange(newValue);\r\n      onTouched();\r\n    });\r\n\r\n    it('should not dispatch an action on blur if the view value has not changed with ngrxUpdateOn \"blur\"', done => {\r\n      actions$.count().subscribe(c => {\r\n        expect(c).toEqual(0);\r\n        done();\r\n      });\r\n\r\n      onTouched();\r\n      actionsSubject.complete();\r\n    });\r\n\r\n    it('should not dispatch an action if the view value changes with ngrxUpdateOn \"blur\"', done => {\r\n      actions$.count().subscribe(c => {\r\n        expect(c).toEqual(0);\r\n        done();\r\n      });\r\n\r\n      const newValue = 'new value';\r\n      onChange(newValue);\r\n      actionsSubject.complete();\r\n    });\r\n\r\n    it('should not write the value when the state value does not change', () => {\r\n      const newValue = 'new value';\r\n      onChange(newValue);\r\n      const spy = spyOn(viewAdapter, 'setViewValue');\r\n      directive.ngrxFormControlState = { ...INITIAL_STATE };\r\n      expect(spy).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('value conversion', () => {\r\n    const VIEW_VALUE = new Date(0);\r\n    const STATE_VALUE = '1970-01-01T00:00:00.000Z';\r\n\r\n    beforeEach(() => {\r\n      directive.ngOnInit();\r\n      directive.ngrxValueConverter = NgrxValueConverters.dateToISOString;\r\n    });\r\n\r\n    it('should convert the state value when the state changes', () => {\r\n      const spy = spyOn(viewAdapter, 'setViewValue');\r\n      directive.ngrxFormControlState = { ...INITIAL_STATE, value: STATE_VALUE };\r\n      expect(spy).toHaveBeenCalledWith(VIEW_VALUE);\r\n    });\r\n\r\n    it('should convert the view value if it changes', done => {\r\n      actions$.first().subscribe(a => {\r\n        expect(a).toEqual(new SetValueAction(INITIAL_STATE.id, STATE_VALUE));\r\n        done();\r\n      });\r\n\r\n      onChange(VIEW_VALUE);\r\n    });\r\n\r\n    it('should not write the value when the state value does not change with conversion', () => {\r\n      directive.ngrxFormControlState = { ...INITIAL_STATE, value: STATE_VALUE };\r\n      const spy = spyOn(viewAdapter, 'setViewValue');\r\n      directive.ngrxFormControlState = { ...INITIAL_STATE, value: STATE_VALUE };\r\n      expect(spy).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('should not dispatch an action if the view value is the same as the state with conversion', done => {\r\n      actions$.count().subscribe(c => {\r\n        expect(c).toEqual(0);\r\n        done();\r\n      });\r\n\r\n      directive.ngrxFormControlState = { ...INITIAL_STATE, value: STATE_VALUE };\r\n      onChange(VIEW_VALUE);\r\n      actionsSubject.complete();\r\n    });\r\n  });\r\n\r\n  describe('focus tracking', () => {\r\n    describe('is enabled', () => {\r\n      beforeEach(() => {\r\n        directive.ngrxEnableFocusTracking = true;\r\n      });\r\n\r\n      it('should focus the element if state is focused initially', () => {\r\n        directive.ngrxFormControlState = { ...INITIAL_STATE, isFocused: true, isUnfocused: false };\r\n        directive.ngOnInit();\r\n        expect(nativeElement.focus).toHaveBeenCalled();\r\n      });\r\n\r\n      it('should blur the element if state is unfocused initially', () => {\r\n        directive.ngOnInit();\r\n        expect(nativeElement.blur).toHaveBeenCalled();\r\n      });\r\n\r\n      it('should focus the element if state becomes focused', () => {\r\n        directive.ngOnInit();\r\n        expect(nativeElement.focus).not.toHaveBeenCalled();\r\n        directive.ngrxFormControlState = { ...INITIAL_STATE, isFocused: true, isUnfocused: false };\r\n        expect(nativeElement.focus).toHaveBeenCalled();\r\n      });\r\n\r\n      it('should blur the element if state becomes unfocused', () => {\r\n        directive.ngrxFormControlState = { ...INITIAL_STATE, isFocused: true, isUnfocused: false };\r\n        directive.ngOnInit();\r\n        expect(nativeElement.blur).not.toHaveBeenCalled();\r\n        directive.ngrxFormControlState = INITIAL_STATE;\r\n        expect(nativeElement.blur).toHaveBeenCalled();\r\n      });\r\n\r\n      it(`should dispatch a ${FocusAction} when element becomes focused and state is not focused`, done => {\r\n        directive.ngOnInit();\r\n\r\n        actions$.first().subscribe(a => {\r\n          expect(a).toEqual(new FocusAction(INITIAL_STATE.id));\r\n          done();\r\n        });\r\n\r\n        (document as any).activeElement = nativeElement;\r\n        directive.onFocusChange();\r\n        actionsSubject.complete();\r\n      });\r\n\r\n      it('should not dispatch an action when element becomes focused and state is focused', done => {\r\n        directive.ngOnInit();\r\n\r\n        actions$.count().subscribe(c => {\r\n          expect(c).toEqual(0);\r\n          done();\r\n        });\r\n\r\n        directive.ngrxFormControlState = { ...INITIAL_STATE, isFocused: true, isUnfocused: false };\r\n        (document as any).activeElement = nativeElement;\r\n        directive.onFocusChange();\r\n        actionsSubject.complete();\r\n      });\r\n\r\n      it(`should dispatch an ${UnfocusAction} when element becomes unfocused and state is focused`, done => {\r\n        directive.ngOnInit();\r\n\r\n        actions$.first().subscribe(a => {\r\n          expect(a).toEqual(new UnfocusAction(INITIAL_STATE.id));\r\n          done();\r\n        });\r\n\r\n        directive.ngrxFormControlState = { ...INITIAL_STATE, isFocused: true, isUnfocused: false };\r\n        directive.onFocusChange();\r\n        actionsSubject.complete();\r\n      });\r\n\r\n      it('should not dispatch an action when element becomes unfocused and state is unfocused', done => {\r\n        directive.ngOnInit();\r\n\r\n        actions$.count().subscribe(c => {\r\n          expect(c).toEqual(0);\r\n          done();\r\n        });\r\n\r\n        directive.onFocusChange();\r\n        actionsSubject.complete();\r\n      });\r\n    });\r\n\r\n    describe('is disabled', () => {\r\n      it('should not focus the element initially', () => {\r\n        directive.ngrxFormControlState = { ...INITIAL_STATE, isFocused: true, isUnfocused: false };\r\n        directive.ngOnInit();\r\n        expect(nativeElement.focus).not.toHaveBeenCalled();\r\n      });\r\n\r\n      it('should not blur the element initially', () => {\r\n        directive.ngOnInit();\r\n        expect(nativeElement.blur).not.toHaveBeenCalled();\r\n      });\r\n\r\n      it('should not focus the element if state becomes focused', () => {\r\n        directive.ngOnInit();\r\n        directive.ngrxFormControlState = { ...INITIAL_STATE, isFocused: true, isUnfocused: false };\r\n        expect(nativeElement.focus).not.toHaveBeenCalled();\r\n      });\r\n\r\n      it('should not blur the element if state becomes unfocused', () => {\r\n        directive.ngrxFormControlState = { ...INITIAL_STATE, isFocused: true, isUnfocused: false };\r\n        directive.ngOnInit();\r\n        directive.ngrxFormControlState = INITIAL_STATE;\r\n        expect(nativeElement.blur).not.toHaveBeenCalled();\r\n      });\r\n\r\n      it(`should not dispatch an action when element becomes focused and state is not focused`, done => {\r\n        directive.ngOnInit();\r\n\r\n        actions$.count().subscribe(c => {\r\n          expect(c).toEqual(0);\r\n          done();\r\n        });\r\n\r\n        (document as any).activeElement = nativeElement;\r\n        directive.onFocusChange();\r\n        actionsSubject.complete();\r\n      });\r\n\r\n      it('should not dispatch an action when element becomes focused and state is focused', done => {\r\n        directive.ngOnInit();\r\n\r\n        actions$.count().subscribe(c => {\r\n          expect(c).toEqual(0);\r\n          done();\r\n        });\r\n\r\n        directive.ngrxFormControlState = { ...INITIAL_STATE, isFocused: true, isUnfocused: false };\r\n        (document as any).activeElement = nativeElement;\r\n        directive.onFocusChange();\r\n        actionsSubject.complete();\r\n      });\r\n\r\n      it(`should not dispatch an action when element becomes unfocused and state is focused`, done => {\r\n        directive.ngOnInit();\r\n\r\n        actions$.count().subscribe(c => {\r\n          expect(c).toEqual(0);\r\n          done();\r\n        });\r\n\r\n        directive.ngrxFormControlState = { ...INITIAL_STATE, isFocused: true, isUnfocused: false };\r\n        directive.onFocusChange();\r\n        actionsSubject.complete();\r\n      });\r\n\r\n      it('should not dispatch an action when element becomes unfocused and state is unfocused', done => {\r\n        directive.ngOnInit();\r\n\r\n        actions$.count().subscribe(c => {\r\n          expect(c).toEqual(0);\r\n          done();\r\n        });\r\n\r\n        directive.onFocusChange();\r\n        actionsSubject.complete();\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('non-browser platforms', () => {\r\n    beforeEach(() => {\r\n      directive = new NgrxFormControlDirective<string>(elementRef, null, actionsSubject as any, [viewAdapter], []);\r\n      directive.ngrxFormControlState = INITIAL_STATE;\r\n    });\r\n\r\n    it('should throw when trying to enable focus tracking', () => {\r\n      expect(() => directive.ngrxEnableFocusTracking = true).toThrowError();\r\n    });\r\n  });\r\n\r\n  // TODO: throwing error on undefined state\r\n  // TODO: mark as touched\r\n  // TODO: disabling and enabling\r\n  // TODO: last keydown code tracking\r\n});\r\n"]}
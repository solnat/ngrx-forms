{"version":3,"file":"set-errors.spec.js","sourceRoot":"","sources":["set-errors.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { createFormControlState } from '../../state';\r\nimport { SetErrorsAction } from '../../actions';\r\nimport { setErrorsReducer } from './set-errors';\r\n\r\ndescribe('form control setErrorsReducer', () => {\r\n  const FORM_CONTROL_ID = 'test ID';\r\n  const INITIAL_FORM_CONTROL_VALUE = '';\r\n  const INITIAL_STATE = createFormControlState<string>(FORM_CONTROL_ID, INITIAL_FORM_CONTROL_VALUE);\r\n\r\n  it('should skip any action of the wrong type', () => expect(setErrorsReducer(INITIAL_STATE, { type: '' } as any)).toBe(INITIAL_STATE));\r\n\r\n  it('should update state if there are errors', () => {\r\n    const errors = { required: true };\r\n    const resultState = setErrorsReducer(INITIAL_STATE, new SetErrorsAction(FORM_CONTROL_ID, errors));\r\n    expect(resultState.errors).toBe(errors);\r\n    expect(resultState.isValid).toBe(false);\r\n    expect(resultState.isInvalid).toBe(true);\r\n  });\r\n\r\n  it('should update state if there are no errors', () => {\r\n    const errors = { required: true };\r\n    const state = { ...INITIAL_STATE, isValid: false, isInvalid: true, errors };\r\n    const newErrors = {};\r\n    const resultState = setErrorsReducer(state, new SetErrorsAction(FORM_CONTROL_ID, newErrors));\r\n    expect(resultState.errors).toBe(newErrors);\r\n    expect(resultState.isValid).toBe(true);\r\n    expect(resultState.isInvalid).toBe(false);\r\n  });\r\n\r\n  it('should not update state if errors are equal', () => {\r\n    const state = { ...INITIAL_STATE, isValid: false, isInvalid: true, errors: { required: true } };\r\n    const resultState = setErrorsReducer(state, new SetErrorsAction(FORM_CONTROL_ID, { required: true }));\r\n    expect(resultState).toBe(state);\r\n  });\r\n\r\n  it('should not update state if control is disabled', () => {\r\n    const errors = { required: true };\r\n    const state = { ...INITIAL_STATE, isEnabled: false, isDisabled: true };\r\n    const resultState = setErrorsReducer(state, new SetErrorsAction(FORM_CONTROL_ID, errors));\r\n    expect(resultState).toBe(state);\r\n  });\r\n\r\n  it('should not update state if errors are equal and empty', () => {\r\n    const resultState = setErrorsReducer(INITIAL_STATE, new SetErrorsAction(FORM_CONTROL_ID, {}));\r\n    expect(resultState).toBe(INITIAL_STATE);\r\n  });\r\n\r\n  it('should keep async errors', () => {\r\n    const syncErrors = { required: true };\r\n    const asyncErrors = { $required: true };\r\n    const state = { ...INITIAL_STATE, isValid: false, isInvalid: true, errors: asyncErrors };\r\n    const resultState = setErrorsReducer(state, new SetErrorsAction(FORM_CONTROL_ID, syncErrors));\r\n    expect(resultState.errors).toEqual({ ...asyncErrors, ...syncErrors });\r\n  });\r\n\r\n  it('should throw if trying to set invalid error value', () => {\r\n    expect(() => setErrorsReducer(INITIAL_STATE, new SetErrorsAction(FORM_CONTROL_ID, null as any))).toThrowError();\r\n    expect(() => setErrorsReducer(INITIAL_STATE, new SetErrorsAction(FORM_CONTROL_ID, 1 as any))).toThrowError();\r\n    expect(() => setErrorsReducer(INITIAL_STATE, new SetErrorsAction(FORM_CONTROL_ID, [] as any))).toThrowError();\r\n    expect(() => setErrorsReducer(INITIAL_STATE, new SetErrorsAction(FORM_CONTROL_ID, { $required: true }))).toThrowError();\r\n  });\r\n});\r\n"]}
{"version":3,"file":"reset.spec.js","sourceRoot":"","sources":["reset.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { ResetAction } from '../../actions';\r\nimport { createFormControlState } from '../../state';\r\nimport { resetReducer } from './reset';\r\n\r\ndescribe(`form control ${resetReducer.name}`, () => {\r\n  const FORM_CONTROL_ID = 'test ID';\r\n  const INITIAL_FORM_CONTROL_VALUE = '';\r\n  const INITIAL_STATE = createFormControlState<string>(FORM_CONTROL_ID, INITIAL_FORM_CONTROL_VALUE);\r\n\r\n  it('should skip any action of the wrong type', () =>\r\n    expect(resetReducer(INITIAL_STATE, { type: '' } as any)).toBe(INITIAL_STATE));\r\n\r\n  it('should update state if dirty', () => {\r\n    const state = { ...INITIAL_STATE, isDirty: true, isPristine: false };\r\n    const resultState = resetReducer(state, new ResetAction(FORM_CONTROL_ID));\r\n    expect(resultState.isDirty).toEqual(false);\r\n    expect(resultState.isPristine).toEqual(true);\r\n    expect(resultState.isTouched).toEqual(false);\r\n    expect(resultState.isUntouched).toEqual(true);\r\n    expect(resultState.isSubmitted).toEqual(false);\r\n    expect(resultState.isUnsubmitted).toEqual(true);\r\n  });\r\n\r\n  it('should update state if touched', () => {\r\n    const state = { ...INITIAL_STATE, isTouched: true, isUntouched: false };\r\n    const resultState = resetReducer(state, new ResetAction(FORM_CONTROL_ID));\r\n    expect(resultState.isDirty).toEqual(false);\r\n    expect(resultState.isPristine).toEqual(true);\r\n    expect(resultState.isTouched).toEqual(false);\r\n    expect(resultState.isUntouched).toEqual(true);\r\n    expect(resultState.isSubmitted).toEqual(false);\r\n    expect(resultState.isUnsubmitted).toEqual(true);\r\n  });\r\n\r\n  it('should update state if submitted', () => {\r\n    const state = { ...INITIAL_STATE, isSubmitted: true, isUnsubmitted: false };\r\n    const resultState = resetReducer(state, new ResetAction(FORM_CONTROL_ID));\r\n    expect(resultState.isDirty).toEqual(false);\r\n    expect(resultState.isPristine).toEqual(true);\r\n    expect(resultState.isTouched).toEqual(false);\r\n    expect(resultState.isUntouched).toEqual(true);\r\n    expect(resultState.isSubmitted).toEqual(false);\r\n    expect(resultState.isUnsubmitted).toEqual(true);\r\n  });\r\n\r\n  it('should not update state if pristine and untouched and unsubmitted', () => {\r\n    const resultState = resetReducer(INITIAL_STATE, new ResetAction(FORM_CONTROL_ID));\r\n    expect(resultState).toBe(INITIAL_STATE);\r\n  });\r\n});\r\n"]}
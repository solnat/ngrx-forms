{"version":3,"file":"clear-async-error.spec.js","sourceRoot":"","sources":["clear-async-error.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { createFormControlState } from '../../state';\r\nimport { ClearAsyncErrorAction } from '../../actions';\r\nimport { clearAsyncErrorReducer } from './clear-async-error';\r\n\r\ndescribe(`form control ${clearAsyncErrorReducer.name}`, () => {\r\n  const FORM_CONTROL_ID = 'test ID';\r\n  const INITIAL_FORM_CONTROL_VALUE = '';\r\n  const INITIAL_STATE = createFormControlState<string>(FORM_CONTROL_ID, INITIAL_FORM_CONTROL_VALUE);\r\n\r\n  it('should skip any action of the wrong type', () => expect(clearAsyncErrorReducer(INITIAL_STATE, { type: '' } as any)).toBe(INITIAL_STATE));\r\n\r\n  it('should remove error from state', () => {\r\n    const name = 'required';\r\n    const state = { ...INITIAL_STATE, isValid: false, isInvalid: true, errors: { ['$' + name]: true }, pendingValidations: [name], isValidationPending: true };\r\n    const resultState = clearAsyncErrorReducer(state, new ClearAsyncErrorAction(FORM_CONTROL_ID, name));\r\n    expect(resultState.errors).toEqual({});\r\n    expect(resultState.isValid).toBe(true);\r\n    expect(resultState.isInvalid).toBe(false);\r\n  });\r\n\r\n  it('should remove the validation from pending validations if validation is the last pending', () => {\r\n    const name = 'required';\r\n    const state = { ...INITIAL_STATE, isValid: false, isInvalid: true, errors: { ['$' + name]: true }, pendingValidations: [name], isValidationPending: true };\r\n    const resultState = clearAsyncErrorReducer(state, new ClearAsyncErrorAction(FORM_CONTROL_ID, name));\r\n    expect(resultState.pendingValidations).toEqual([]);\r\n    expect(resultState.isValidationPending).toBe(false);\r\n  });\r\n\r\n  it('should remove the validation from pending validations if validation is not the last pending', () => {\r\n    const name = 'required';\r\n    const name2 = 'min';\r\n    const state = {\r\n      ...INITIAL_STATE,\r\n      isValid: false,\r\n      isInvalid: true,\r\n      errors: { ['$' + name]: true },\r\n      pendingValidations: [name, name2],\r\n      isValidationPending: true,\r\n    };\r\n\r\n    const resultState = clearAsyncErrorReducer(state, new ClearAsyncErrorAction(FORM_CONTROL_ID, name));\r\n    expect(resultState.pendingValidations).toEqual([name2]);\r\n    expect(resultState.isValidationPending).toBe(true);\r\n  });\r\n\r\n  it('should remove pending validation without changing the errors if no matching error is found', () => {\r\n    const name = 'required';\r\n    const errors = { $min: true };\r\n    const state = { ...INITIAL_STATE, isValid: false, isInvalid: true, errors, pendingValidations: [name], isValidationPending: true };\r\n    const resultState = clearAsyncErrorReducer(state, new ClearAsyncErrorAction(FORM_CONTROL_ID, name));\r\n    expect(resultState.errors).toBe(errors);\r\n    expect(resultState.pendingValidations).toEqual([]);\r\n    expect(resultState.isValidationPending).toBe(false);\r\n  });\r\n\r\n  it('should not update state if no matching pending validation is found', () => {\r\n    const name = 'required';\r\n    const state = { ...INITIAL_STATE, pendingValidations: ['min'], isValidationPending: true };\r\n    const resultState = clearAsyncErrorReducer(state, new ClearAsyncErrorAction(FORM_CONTROL_ID, name));\r\n    expect(resultState).toBe(state);\r\n  });\r\n});\r\n"]}
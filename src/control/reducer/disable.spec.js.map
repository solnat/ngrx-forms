{"version":3,"file":"disable.spec.js","sourceRoot":"","sources":["disable.spec.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qCAAqD;AACrD,yCAA8C;AAC9C,qCAA2C;AAE3C,QAAQ,CAAC,6BAA6B,EAAE;IACtC,IAAM,eAAe,GAAG,SAAS,CAAC;IAClC,IAAM,0BAA0B,GAAG,EAAE,CAAC;IACtC,IAAM,aAAa,GAAG,8BAAsB,CAAS,eAAe,EAAE,0BAA0B,CAAC,CAAC;IAElG,EAAE,CAAC,yCAAyC,EAAE,cAAM,OAAA,MAAM,CAAC,wBAAc,CAAC,aAAa,EAAE,EAAE,IAAI,EAAE,EAAE,EAAS,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,EAA9E,CAA8E,CAAC,CAAC;IAEpI,EAAE,CAAC,gCAAgC,EAAE;QACnC,IAAM,WAAW,GAAG,wBAAc,CAAC,aAAa,EAAE,IAAI,uBAAa,CAAC,eAAe,CAAC,CAAC,CAAC;QACtF,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC7C,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE;QACxC,IAAM,KAAK,gBAAQ,aAAa,IAAE,SAAS,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,GAAE,CAAC;QACvE,IAAM,WAAW,GAAG,wBAAc,CAAC,KAAK,EAAE,IAAI,uBAAa,CAAC,eAAe,CAAC,CAAC,CAAC;QAC9E,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE;QACxD,IAAM,MAAM,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;QAClC,IAAM,KAAK,gBAAQ,aAAa,IAAE,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,QAAA,GAAE,CAAC;QAC5E,IAAM,WAAW,GAAG,wBAAc,CAAC,KAAK,EAAE,IAAI,uBAAa,CAAC,eAAe,CAAC,CAAC,CAAC;QAC9E,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC1C,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC7C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sCAAsC,EAAE;QACzC,IAAM,KAAK,gBAAQ,aAAa,IAAE,kBAAkB,EAAE,CAAC,UAAU,CAAC,EAAE,mBAAmB,EAAE,IAAI,GAAE,CAAC;QAChG,IAAM,WAAW,GAAG,wBAAc,CAAC,KAAK,EAAE,IAAI,uBAAa,CAAC,eAAe,CAAC,CAAC,CAAC;QAC9E,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACnD,MAAM,CAAC,WAAW,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { createFormControlState } from '../../state';\r\nimport { DisableAction } from '../../actions';\r\nimport { disableReducer } from './disable';\r\n\r\ndescribe('form control disableReducer', () => {\r\n  const FORM_CONTROL_ID = 'test ID';\r\n  const INITIAL_FORM_CONTROL_VALUE = '';\r\n  const INITIAL_STATE = createFormControlState<string>(FORM_CONTROL_ID, INITIAL_FORM_CONTROL_VALUE);\r\n\r\n  it('should skip any actionof the wrong type', () => expect(disableReducer(INITIAL_STATE, { type: '' } as any)).toBe(INITIAL_STATE));\r\n\r\n  it('should update state if enabled', () => {\r\n    const resultState = disableReducer(INITIAL_STATE, new DisableAction(FORM_CONTROL_ID));\r\n    expect(resultState.isEnabled).toEqual(false);\r\n    expect(resultState.isDisabled).toEqual(true);\r\n  });\r\n\r\n  it('should not update state if disabled', () => {\r\n    const state = { ...INITIAL_STATE, isEnabled: false, isDisabled: true };\r\n    const resultState = disableReducer(state, new DisableAction(FORM_CONTROL_ID));\r\n    expect(resultState).toBe(state);\r\n  });\r\n\r\n  it('should mark the state as valid and clear all errors', () => {\r\n    const errors = { required: true };\r\n    const state = { ...INITIAL_STATE, isValid: false, isInvalid: true, errors };\r\n    const resultState = disableReducer(state, new DisableAction(FORM_CONTROL_ID));\r\n    expect(resultState.isValid).toEqual(true);\r\n    expect(resultState.isInvalid).toEqual(false);\r\n    expect(resultState.errors).toEqual({});\r\n  });\r\n\r\n  it('should clear all pending validations', () => {\r\n    const state = { ...INITIAL_STATE, pendingValidations: ['required'], isValidationPending: true };\r\n    const resultState = disableReducer(state, new DisableAction(FORM_CONTROL_ID));\r\n    expect(resultState.pendingValidations).toEqual([]);\r\n    expect(resultState.isValidationPending).toBe(false);\r\n  });\r\n});\r\n"]}
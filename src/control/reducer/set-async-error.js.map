{"version":3,"file":"set-async-error.js","sourceRoot":"","sources":["set-async-error.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,yCAA6D;AAE7D,mCAAwC;AAExC,8BACE,KAA+B,EAC/B,MAAuB;IAEvB,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,KAAK,6BAAmB,CAAC,IAAI,CAAC,CAAC,CAAC;QAC7C,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAED,EAAE,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;QACrB,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAED,EAAE,CAAC,CAAC,KAAK,CAAC,kBAAkB,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC9D,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAED,IAAM,IAAI,GAAG,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC;IACvC,IAAI,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC;IAEjC,EAAE,CAAC,CAAC,iBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACzD,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAED,IAAM,MAAM,gBAAQ,KAAK,CAAC,MAAM,eAAG,IAAI,IAAG,KAAK,MAAE,CAAC;IAClD,IAAM,kBAAkB,GAAG,KAAK,CAAC,kBAAkB,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,KAAK,MAAM,CAAC,OAAO,CAAC,IAAI,EAAzB,CAAyB,CAAC,CAAC;IAE3F,MAAM,cACD,KAAK,IACR,OAAO,EAAE,KAAK,EACd,SAAS,EAAE,IAAI,EACf,MAAM,QAAA;QACN,kBAAkB,oBAAA,EAClB,mBAAmB,EAAE,kBAAkB,CAAC,MAAM,GAAG,CAAC,IAClD;;AACJ,CAAC;AAlCD,oDAkCC","sourcesContent":["import { Actions, SetAsyncErrorAction } from '../../actions';\r\nimport { FormControlState, FormControlValueTypes } from '../../state';\r\nimport { deepEquals } from '../../util';\r\n\r\nexport function setAsyncErrorReducer<TValue extends FormControlValueTypes>(\r\n  state: FormControlState<TValue>,\r\n  action: Actions<TValue>,\r\n): FormControlState<TValue> {\r\n  if (action.type !== SetAsyncErrorAction.TYPE) {\r\n    return state;\r\n  }\r\n\r\n  if (state.isDisabled) {\r\n    return state;\r\n  }\r\n\r\n  if (state.pendingValidations.indexOf(action.payload.name) < 0) {\r\n    return state;\r\n  }\r\n\r\n  const name = '$' + action.payload.name;\r\n  let value = action.payload.value;\r\n\r\n  if (deepEquals(state.errors[name], action.payload.value)) {\r\n    value = state.errors[name];\r\n  }\r\n\r\n  const errors = { ...state.errors, [name]: value };\r\n  const pendingValidations = state.pendingValidations.filter(v => v !== action.payload.name);\r\n\r\n  return {\r\n    ...state,\r\n    isValid: false,\r\n    isInvalid: true,\r\n    errors,\r\n    pendingValidations,\r\n    isValidationPending: pendingValidations.length > 0,\r\n  };\r\n}\r\n"]}
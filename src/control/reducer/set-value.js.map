{"version":3,"file":"set-value.js","sourceRoot":"","sources":["set-value.ts"],"names":[],"mappings":";;;;;;;;;;AACA,yCAAwD;AAExD,yBACE,KAA+B,EAC/B,MAAuB;IAEvB,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,KAAK,wBAAc,CAAC,IAAI,CAAC,CAAC,CAAC;QACxC,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAED,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,KAAK,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAED,IAAM,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC;IACnC,IAAM,SAAS,GAAG,OAAO,KAAK,CAAC;IAC/B,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7F,IAAM,QAAQ,GAAG,sFAAsF,CAAC;QACxG,MAAM,IAAI,KAAK,CAAI,QAAQ,cAAS,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,mBAAa,SAAS,OAAG,CAAC,CAAC,CAAC,KAAK;IAC3G,CAAC;IAED,MAAM,cACD,KAAK,IACR,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC,KAAK,IAC3B;AACJ,CAAC;AAvBD,0CAuBC","sourcesContent":["import { FormControlState, FormControlValueTypes } from '../../state';\r\nimport { Actions, SetValueAction } from '../../actions';\r\n\r\nexport function setValueReducer<TValue extends FormControlValueTypes>(\r\n  state: FormControlState<TValue>,\r\n  action: Actions<TValue>,\r\n): FormControlState<TValue> {\r\n  if (action.type !== SetValueAction.TYPE) {\r\n    return state;\r\n  }\r\n\r\n  if (state.value === action.payload.value) {\r\n    return state;\r\n  }\r\n\r\n  const value = action.payload.value;\r\n  const valueType = typeof value;\r\n  if (value !== null && ['string', 'number', 'boolean', 'undefined'].indexOf(valueType) === -1) {\r\n    const errorMsg = 'Form control states only support undefined, null, string, number, and boolean values';\r\n    throw new Error(`${errorMsg}; got ${JSON.stringify(action.payload.value)} of type \"${valueType}\"`); // `;\r\n  }\r\n\r\n  return {\r\n    ...state,\r\n    value: action.payload.value,\r\n  };\r\n}\r\n"]}
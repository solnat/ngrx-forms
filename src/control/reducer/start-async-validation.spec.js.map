{"version":3,"file":"start-async-validation.spec.js","sourceRoot":"","sources":["start-async-validation.spec.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qCAAqD;AACrD,yCAA2D;AAC3D,mEAAuE;AAEvE,QAAQ,CAAC,kBAAgB,oDAA2B,CAAC,IAAM,EAAE;IAC3D,IAAM,eAAe,GAAG,SAAS,CAAC;IAClC,IAAM,0BAA0B,GAAG,EAAE,CAAC;IACtC,IAAM,aAAa,GAAG,8BAAsB,CAAS,eAAe,EAAE,0BAA0B,CAAC,CAAC;IAElG,EAAE,CAAC,0CAA0C,EAAE,cAAM,OAAA,MAAM,CAAC,oDAA2B,CAAC,aAAa,EAAE,EAAE,IAAI,EAAE,EAAE,EAAS,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,EAA3F,CAA2F,CAAC,CAAC;IAElJ,EAAE,CAAC,6CAA6C,EAAE;QAChD,IAAM,IAAI,GAAG,UAAU,CAAC;QACxB,IAAM,WAAW,GAAG,oDAA2B,CAAC,aAAa,EAAE,IAAI,oCAA0B,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC,CAAC;QACtH,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QACvD,MAAM,CAAC,WAAW,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gFAAgF,EAAE;QACnF,IAAM,IAAI,GAAG,UAAU,CAAC;QACxB,IAAM,YAAY,GAAG,KAAK,CAAC;QAC3B,IAAM,KAAK,gBAAQ,aAAa,IAAE,kBAAkB,EAAE,CAAC,YAAY,CAAC,EAAE,mBAAmB,EAAE,IAAI,GAAE,CAAC;QAClG,IAAM,WAAW,GAAG,oDAA2B,CAAC,KAAK,EAAE,IAAI,oCAA0B,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC,CAAC;QAC9G,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC,OAAO,CAAC,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC;QACrE,MAAM,CAAC,WAAW,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0DAA0D,EAAE;QAC7D,IAAM,IAAI,GAAG,UAAU,CAAC;QACxB,IAAM,KAAK,gBAAQ,aAAa,IAAE,kBAAkB,EAAE,CAAC,IAAI,CAAC,EAAE,mBAAmB,EAAE,IAAI,GAAE,CAAC;QAC1F,IAAM,WAAW,GAAG,oDAA2B,CAAC,KAAK,EAAE,IAAI,oCAA0B,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC,CAAC;QAC9G,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { createFormControlState } from '../../state';\r\nimport { StartAsyncValidationAction } from '../../actions';\r\nimport { startAsyncValidationReducer } from './start-async-validation';\r\n\r\ndescribe(`form control ${startAsyncValidationReducer.name}`, () => {\r\n  const FORM_CONTROL_ID = 'test ID';\r\n  const INITIAL_FORM_CONTROL_VALUE = '';\r\n  const INITIAL_STATE = createFormControlState<string>(FORM_CONTROL_ID, INITIAL_FORM_CONTROL_VALUE);\r\n\r\n  it('should skip any action of the wrong type', () => expect(startAsyncValidationReducer(INITIAL_STATE, { type: '' } as any)).toBe(INITIAL_STATE));\r\n\r\n  it('should update state with pending validation', () => {\r\n    const name = 'required';\r\n    const resultState = startAsyncValidationReducer(INITIAL_STATE, new StartAsyncValidationAction(FORM_CONTROL_ID, name));\r\n    expect(resultState.pendingValidations).toEqual([name]);\r\n    expect(resultState.isValidationPending).toBe(true);\r\n  });\r\n\r\n  it('should update state with pending validation if validations are already pending', () => {\r\n    const name = 'required';\r\n    const existingName = 'min';\r\n    const state = { ...INITIAL_STATE, pendingValidations: [existingName], isValidationPending: true };\r\n    const resultState = startAsyncValidationReducer(state, new StartAsyncValidationAction(FORM_CONTROL_ID, name));\r\n    expect(resultState.pendingValidations).toEqual([existingName, name]);\r\n    expect(resultState.isValidationPending).toBe(true);\r\n  });\r\n\r\n  it('should not update state if validation is already pending', () => {\r\n    const name = 'required';\r\n    const state = { ...INITIAL_STATE, pendingValidations: [name], isValidationPending: true };\r\n    const resultState = startAsyncValidationReducer(state, new StartAsyncValidationAction(FORM_CONTROL_ID, name));\r\n    expect(resultState).toBe(state);\r\n  });\r\n});\r\n"]}
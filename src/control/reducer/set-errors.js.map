{"version":3,"file":"set-errors.js","sourceRoot":"","sources":["set-errors.ts"],"names":[],"mappings":";;;;;;;;;;AACA,yCAAyD;AACzD,mCAAiD;AAEjD,0BACE,KAA+B,EAC/B,MAAuB;IAEvB,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,KAAK,yBAAe,CAAC,IAAI,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAED,EAAE,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;QACrB,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAED,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,KAAK,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;QAC3C,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAED,EAAE,CAAC,CAAC,iBAAU,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACpD,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAED,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,IAAI,OAAO,MAAM,CAAC,OAAO,CAAC,MAAM,KAAK,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAChH,MAAM,IAAI,KAAK,CAAC,2CAAyC,MAAM,CAAC,OAAO,CAAC,MAAQ,CAAC,CAAC,CAAC,KAAK;IAC1F,CAAC;IAED,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,EAAnB,CAAmB,CAAC,CAAC,CAAC,CAAC;QACxE,MAAM,IAAI,KAAK,CAAC,oDAAkD,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAG,CAAC,CAAC,CAAC,KAAK;IACnH,CAAC;IAED,IAAM,WAAW,GACf,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;SACtB,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,EAAnB,CAAmB,CAAC;SAClC,MAAM,CAAC,UAAC,GAAG,EAAE,GAAG;QAAK,OAAA,MAAM,CAAC,MAAM,CAAC,GAAG,YAAI,GAAC,GAAG,IAAG,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,MAAG;;IAAhD,CAAgD,EAAE,EAAE,CAAC,CAAC;IAEhF,IAAM,SAAS,GAAG,cAAO,CAAC,WAAW,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACnH,IAAM,OAAO,GAAG,cAAO,CAAC,SAAS,CAAC,CAAC;IAEnC,MAAM,cACD,KAAK,IACR,OAAO,SAAA,EACP,SAAS,EAAE,CAAC,OAAO,EACnB,MAAM,EAAE,SAAS,IACjB;AACJ,CAAC;AA1CD,4CA0CC","sourcesContent":["import { FormControlState, FormControlValueTypes } from '../../state';\r\nimport { Actions, SetErrorsAction } from '../../actions';\r\nimport { isEmpty, deepEquals } from '../../util';\r\n\r\nexport function setErrorsReducer<TValue extends FormControlValueTypes>(\r\n  state: FormControlState<TValue>,\r\n  action: Actions<TValue>,\r\n): FormControlState<TValue> {\r\n  if (action.type !== SetErrorsAction.TYPE) {\r\n    return state;\r\n  }\r\n\r\n  if (state.isDisabled) {\r\n    return state;\r\n  }\r\n\r\n  if (state.errors === action.payload.errors) {\r\n    return state;\r\n  }\r\n\r\n  if (deepEquals(state.errors, action.payload.errors)) {\r\n    return state;\r\n  }\r\n\r\n  if (!action.payload.errors || typeof action.payload.errors !== 'object' || Array.isArray(action.payload.errors)) {\r\n    throw new Error(`Control errors must be an object; got ${action.payload.errors}`); // `;\r\n  }\r\n\r\n  if (Object.keys(action.payload.errors).some(key => key.startsWith('$'))) {\r\n    throw new Error(`Control errors must not use $ as a prefix; got ${JSON.stringify(action.payload.errors)}`); // `;\r\n  }\r\n\r\n  const asyncErrors =\r\n    Object.keys(state.errors)\r\n      .filter(key => key.startsWith('$'))\r\n      .reduce((res, key) => Object.assign(res, { [key]: state.errors[key] }), {});\r\n\r\n  const newErrors = isEmpty(asyncErrors) ? action.payload.errors : Object.assign(asyncErrors, action.payload.errors);\r\n  const isValid = isEmpty(newErrors);\r\n\r\n  return {\r\n    ...state,\r\n    isValid,\r\n    isInvalid: !isValid,\r\n    errors: newErrors,\r\n  };\r\n}\r\n"]}
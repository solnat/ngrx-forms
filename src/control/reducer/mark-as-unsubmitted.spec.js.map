{"version":3,"file":"mark-as-unsubmitted.spec.js","sourceRoot":"","sources":["mark-as-unsubmitted.spec.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qCAAqD;AACrD,yCAAwD;AACxD,6DAAiE;AAEjE,QAAQ,CAAC,uCAAuC,EAAE;IAChD,IAAM,eAAe,GAAG,SAAS,CAAC;IAClC,IAAM,0BAA0B,GAAG,EAAE,CAAC;IACtC,IAAM,aAAa,GAAG,8BAAsB,CAAS,eAAe,EAAE,0BAA0B,CAAC,CAAC;IAElG,EAAE,CAAC,yCAAyC,EAAE;QAC5C,OAAA,MAAM,CAAC,8CAAwB,CAAC,aAAa,EAAE,EAAE,IAAI,EAAE,EAAE,EAAS,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC;IAAxF,CAAwF,CAAC,CAAC;IAE5F,QAAQ,CAAC,iCAAuB,CAAC,IAAI,EAAE;QACrC,EAAE,CAAC,kCAAkC,EAAE;YACrC,IAAM,KAAK,gBAAQ,aAAa,IAAE,WAAW,EAAE,IAAI,EAAE,aAAa,EAAE,KAAK,GAAE,CAAC;YAC5E,IAAM,WAAW,GAAG,8CAAwB,CAAC,KAAK,EAAE,IAAI,iCAAuB,CAAC,eAAe,CAAC,CAAC,CAAC;YAClG,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE;YAC3C,IAAM,WAAW,GAAG,8CAAwB,CAAC,aAAa,EAAE,IAAI,iCAAuB,CAAC,eAAe,CAAC,CAAC,CAAC;YAC1G,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { createFormControlState } from '../../state';\r\nimport { MarkAsUnsubmittedAction } from '../../actions';\r\nimport { markAsUnsubmittedReducer } from './mark-as-unsubmitted';\r\n\r\ndescribe('form control markAsUnsubmittedReducer', () => {\r\n  const FORM_CONTROL_ID = 'test ID';\r\n  const INITIAL_FORM_CONTROL_VALUE = '';\r\n  const INITIAL_STATE = createFormControlState<string>(FORM_CONTROL_ID, INITIAL_FORM_CONTROL_VALUE);\r\n\r\n  it('should skip any actionof the wrong type', () =>\r\n    expect(markAsUnsubmittedReducer(INITIAL_STATE, { type: '' } as any)).toBe(INITIAL_STATE));\r\n\r\n  describe(MarkAsUnsubmittedAction.name, () => {\r\n    it('should update state if submitted', () => {\r\n      const state = { ...INITIAL_STATE, isSubmitted: true, isUnsubmitted: false };\r\n      const resultState = markAsUnsubmittedReducer(state, new MarkAsUnsubmittedAction(FORM_CONTROL_ID));\r\n      expect(resultState.isSubmitted).toEqual(false);\r\n      expect(resultState.isUnsubmitted).toEqual(true);\r\n    });\r\n\r\n    it('should not update state if unsubmitted', () => {\r\n      const resultState = markAsUnsubmittedReducer(INITIAL_STATE, new MarkAsUnsubmittedAction(FORM_CONTROL_ID));\r\n      expect(resultState).toBe(INITIAL_STATE);\r\n    });\r\n  });\r\n});\r\n"]}
{"version":3,"file":"set-value.spec.js","sourceRoot":"","sources":["set-value.spec.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qCAAqD;AACrD,yCAA+C;AAC/C,yCAA8C;AAE9C,QAAQ,CAAC,8BAA8B,EAAE;IACvC,IAAM,eAAe,GAAG,SAAS,CAAC;IAClC,IAAM,0BAA0B,GAAG,EAAE,CAAC;IACtC,IAAM,aAAa,GAAG,8BAAsB,CAAS,eAAe,EAAE,0BAA0B,CAAC,CAAC;IAElG,EAAE,CAAC,yCAAyC,EAAE,cAAM,OAAA,MAAM,CAAC,2BAAe,CAAC,aAAa,EAAE,EAAE,IAAI,EAAE,EAAE,EAAS,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,EAA/E,CAA+E,CAAC,CAAC;IAErI,EAAE,CAAC,wCAAwC,EAAE;QAC3C,IAAM,KAAK,GAAG,GAAG,CAAC;QAClB,IAAM,WAAW,GAAG,2BAAe,CAAC,aAAa,EAAE,IAAI,wBAAc,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC,CAAC;QAC/F,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE;QAC1C,IAAM,KAAK,GAAG,GAAG,CAAC;QAClB,IAAM,KAAK,gBAAQ,aAAa,IAAE,KAAK,OAAA,GAAE,CAAC;QAC1C,IAAM,WAAW,GAAG,2BAAe,CAAC,KAAK,EAAE,IAAI,wBAAc,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC,CAAC;QACvF,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gCAAgC,EAAE;QACnC,IAAM,KAAK,GAAG,GAAG,CAAC;QAClB,IAAM,WAAW,GAAG,2BAAe,CAAC,aAAa,EAAE,IAAI,wBAAc,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC,CAAC;QAC/F,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8BAA8B,EAAE;QACjC,IAAM,KAAK,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACnC,IAAM,KAAK,GAAG,8BAAsB,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;QAC5D,MAAM,CAAC,cAAM,OAAA,2BAAe,CAAM,KAAK,EAAE,IAAI,wBAAc,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC,EAAvE,CAAuE,CAAC,CAAC,YAAY,EAAE,CAAC;IACvG,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE;QAC3C,IAAM,KAAK,GAAG,EAAE,CAAC;QACjB,MAAM,CAAC,cAAM,OAAA,2BAAe,CAAM,aAAa,EAAE,IAAI,wBAAc,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC,EAA/E,CAA+E,CAAC,CAAC,YAAY,EAAE,CAAC;IAC/G,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { createFormControlState } from '../../state';\r\nimport { SetValueAction } from '../../actions';\r\nimport { setValueReducer } from './set-value';\r\n\r\ndescribe('form control setValueReducer', () => {\r\n  const FORM_CONTROL_ID = 'test ID';\r\n  const INITIAL_FORM_CONTROL_VALUE = '';\r\n  const INITIAL_STATE = createFormControlState<string>(FORM_CONTROL_ID, INITIAL_FORM_CONTROL_VALUE);\r\n\r\n  it('should skip any actionof the wrong type', () => expect(setValueReducer(INITIAL_STATE, { type: '' } as any)).toBe(INITIAL_STATE));\r\n\r\n  it('should update state value if different', () => {\r\n    const value = 'A';\r\n    const resultState = setValueReducer(INITIAL_STATE, new SetValueAction(FORM_CONTROL_ID, value));\r\n    expect(resultState.value).toEqual(value);\r\n  });\r\n\r\n  it('should not update state value if same', () => {\r\n    const value = 'A';\r\n    const state = { ...INITIAL_STATE, value };\r\n    const resultState = setValueReducer(state, new SetValueAction(FORM_CONTROL_ID, value));\r\n    expect(resultState).toBe(state);\r\n  });\r\n\r\n  it('should not mark state as dirty', () => {\r\n    const value = 'A';\r\n    const resultState = setValueReducer(INITIAL_STATE, new SetValueAction(FORM_CONTROL_ID, value));\r\n    expect(resultState.isDirty).toEqual(false);\r\n  });\r\n\r\n  it('should throw for date values', () => {\r\n    const value = new Date(1970, 0, 1);\r\n    const state = createFormControlState(FORM_CONTROL_ID, null);\r\n    expect(() => setValueReducer<any>(state, new SetValueAction(FORM_CONTROL_ID, value))).toThrowError();\r\n  });\r\n\r\n  it('should throw if value is not supported', () => {\r\n    const value = {};\r\n    expect(() => setValueReducer<any>(INITIAL_STATE, new SetValueAction(FORM_CONTROL_ID, value))).toThrowError();\r\n  });\r\n});\r\n"]}
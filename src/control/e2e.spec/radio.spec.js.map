{"version":3,"file":"radio.spec.js","sourceRoot":"","sources":["radio.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import 'rxjs';\r\n\r\nimport { Component, Input } from '@angular/core';\r\nimport { async, ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { Action, ActionsSubject } from '@ngrx/store';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Subject } from 'rxjs/Subject';\r\n\r\nimport { MarkAsDirtyAction, SetValueAction } from '../../actions';\r\nimport { NgrxFormsModule } from '../../module';\r\nimport { createFormControlState, FormControlState } from '../../state';\r\n\r\nconst RADIO_OPTIONS = ['op1', 'op2'];\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'radio-test',\r\n  template: '<input *ngFor=\"let o of options; trackBy: trackByIndex\" type=\"radio\" [value]=\"o\" [ngrxFormControlState]=\"state\" />',\r\n})\r\nexport class RadioTestComponent {\r\n  @Input() state: FormControlState<string>;\r\n  options = RADIO_OPTIONS;\r\n  trackByIndex = (index: number) => index;\r\n}\r\n\r\ndescribe(RadioTestComponent.name, () => {\r\n  let component: RadioTestComponent;\r\n  let fixture: ComponentFixture<RadioTestComponent>;\r\n  let actionsSubject: ActionsSubject;\r\n  let actions$: Observable<Action>;\r\n  let element1: HTMLInputElement;\r\n  let element2: HTMLInputElement;\r\n  const FORM_CONTROL_ID = 'test ID';\r\n  const INITIAL_FORM_CONTROL_VALUE = RADIO_OPTIONS[1];\r\n  const INITIAL_STATE = createFormControlState(FORM_CONTROL_ID, INITIAL_FORM_CONTROL_VALUE);\r\n\r\n  beforeEach(() => {\r\n    actionsSubject = new Subject<Action>() as ActionsSubject;\r\n    actions$ = actionsSubject as Observable<Action>; // cast required due to mismatch of lift() function signature\r\n  });\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [NgrxFormsModule],\r\n      declarations: [RadioTestComponent],\r\n      providers: [{ provide: ActionsSubject, useValue: actionsSubject }],\r\n    }).compileComponents();\r\n  }));\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(RadioTestComponent);\r\n    component = fixture.componentInstance;\r\n    component.state = INITIAL_STATE;\r\n    fixture.detectChanges();\r\n    element1 = (fixture.nativeElement as HTMLElement).querySelectorAll('input')[0];\r\n    element2 = (fixture.nativeElement as HTMLElement).querySelectorAll('input')[1];\r\n  });\r\n\r\n  it('should set the name of all elements to the ID of the state', () => {\r\n    expect(element1.name).toBe(INITIAL_STATE.id);\r\n    expect(element2.name).toBe(INITIAL_STATE.id);\r\n  });\r\n\r\n  it('should update the name of the elements if the state\\'s ID changes', () => {\r\n    const newId = 'new ID';\r\n    component.state = { ...INITIAL_STATE, id: newId };\r\n    fixture.detectChanges();\r\n    expect(element1.name).toBe(newId);\r\n    expect(element2.name).toBe(newId);\r\n  });\r\n\r\n  it('should select the correct option initially', () => {\r\n    expect(element2.checked).toBe(true);\r\n  });\r\n\r\n  it(`should trigger a ${SetValueAction.name} with the selected value when an option is selected`, done => {\r\n    actions$.take(1).subscribe(a => {\r\n      expect(a.type).toBe(SetValueAction.TYPE);\r\n      expect((a as SetValueAction<string>).payload.value).toBe(RADIO_OPTIONS[0]);\r\n      done();\r\n    });\r\n\r\n    element1.click();\r\n  });\r\n\r\n  it(`should trigger a ${MarkAsDirtyAction.name} when an option is selected`, done => {\r\n    actions$.skip(1).take(1).subscribe(a => {\r\n      expect(a.type).toBe(MarkAsDirtyAction.TYPE);\r\n      done();\r\n    });\r\n\r\n    element1.click();\r\n  });\r\n\r\n  it(`should trigger ${SetValueAction.name}s and ${MarkAsDirtyAction.name}s when switching between options`, done => {\r\n    actions$.bufferCount(4).take(1).subscribe(([a1, a2, a3, a4]) => {\r\n      expect(a1.type).toBe(SetValueAction.TYPE);\r\n      expect(a2.type).toBe(MarkAsDirtyAction.TYPE);\r\n      expect(a3.type).toBe(SetValueAction.TYPE);\r\n      expect(a4.type).toBe(MarkAsDirtyAction.TYPE);\r\n      expect((a1 as SetValueAction<string>).payload.value).toBe(RADIO_OPTIONS[0]);\r\n      expect((a3 as SetValueAction<string>).payload.value).toBe(RADIO_OPTIONS[1]);\r\n      done();\r\n    });\r\n\r\n    element1.click();\r\n    component.state = { ...component.state, value: RADIO_OPTIONS[0] };\r\n    fixture.detectChanges();\r\n    element2.click();\r\n  });\r\n\r\n  it(`should trigger a ${SetValueAction.name} if the value of the selected option changes`, done => {\r\n    const newValue = 'new value';\r\n\r\n    actions$.take(1).subscribe(a => {\r\n      expect(a.type).toBe(SetValueAction.TYPE);\r\n      expect((a as SetValueAction<string>).payload.value).toBe(newValue);\r\n      done();\r\n    });\r\n\r\n    component.options[1] = newValue;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should deselect other options when option is selected', () => {\r\n    element1.click();\r\n    expect(element2.checked).toBe(false);\r\n  });\r\n});\r\n"]}
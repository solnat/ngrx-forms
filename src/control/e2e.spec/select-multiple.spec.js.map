{"version":3,"file":"select-multiple.spec.js","sourceRoot":"","sources":["select-multiple.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import 'rxjs/add/operator/first';\r\nimport 'rxjs/add/operator/skip';\r\n\r\nimport { Component, Input } from '@angular/core';\r\nimport { async, ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { Action, ActionsSubject } from '@ngrx/store';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { SetValueAction, MarkAsDirtyAction } from '../../actions';\r\nimport { NgrxFormsModule } from '../../module';\r\nimport { createFormControlState, FormControlState } from '../../state';\r\nimport { NgrxValueConverters } from '../../control/value-converter';\r\n\r\nconst SELECT_OPTIONS = ['op1', 'op2'];\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'select-multiple-test',\r\n  template: `\r\n  <select multiple [ngrxFormControlState]=\"state\" [ngrxValueConverter]=\"valueConverter\">\r\n    <option *ngFor=\"let o of options\" [value]=\"o\">{{o}}</option>\r\n  </select>\r\n  `,\r\n})\r\nexport class SelectMultipleComponent {\r\n  @Input() state: FormControlState<string>;\r\n  options = SELECT_OPTIONS;\r\n  valueConverter = NgrxValueConverters.objectToJSON;\r\n}\r\n\r\ndescribe(SelectMultipleComponent.name, () => {\r\n  let component: SelectMultipleComponent;\r\n  let fixture: ComponentFixture<SelectMultipleComponent>;\r\n  let actionsSubject: ActionsSubject;\r\n  let actions$: Observable<Action>;\r\n  let element: HTMLSelectElement;\r\n  let option1: HTMLOptionElement;\r\n  let option2: HTMLOptionElement;\r\n  const FORM_CONTROL_ID = 'test ID';\r\n  const INITIAL_FORM_CONTROL_VALUE = `[\"${SELECT_OPTIONS[1]}\"]`;\r\n  const INITIAL_STATE = createFormControlState(FORM_CONTROL_ID, INITIAL_FORM_CONTROL_VALUE);\r\n\r\n  beforeEach(() => {\r\n    actionsSubject = new Subject<Action>() as ActionsSubject;\r\n    actions$ = actionsSubject as Observable<Action>; // cast required due to mismatch of lift() function signature\r\n  });\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [NgrxFormsModule],\r\n      declarations: [SelectMultipleComponent],\r\n      providers: [{ provide: ActionsSubject, useValue: actionsSubject }],\r\n    }).compileComponents();\r\n  }));\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(SelectMultipleComponent);\r\n    component = fixture.componentInstance;\r\n    component.state = INITIAL_STATE;\r\n    fixture.detectChanges();\r\n    const nativeElement = fixture.nativeElement as HTMLElement;\r\n    element = nativeElement.querySelector('select') as HTMLSelectElement;\r\n    option1 = nativeElement.querySelectorAll('option')[0] as HTMLOptionElement;\r\n    option2 = nativeElement.querySelectorAll('option')[1] as HTMLOptionElement;\r\n  });\r\n\r\n  it('should select the correct option initially', () => {\r\n    expect(option2.selected).toBe(true);\r\n  });\r\n\r\n  it('should trigger a SetValueAction with the selected value when an option is selected', done => {\r\n    actions$.first().subscribe(a => {\r\n      expect(a.type).toBe(SetValueAction.TYPE);\r\n      expect((a as SetValueAction<string>).payload.value).toBe(JSON.stringify(SELECT_OPTIONS));\r\n      done();\r\n    });\r\n\r\n    option1.selected = true;\r\n    element.dispatchEvent(new Event('change'));\r\n  });\r\n\r\n  it(`should trigger a ${MarkAsDirtyAction.name} when an option is selected`, done => {\r\n    actions$.skip(1).first().subscribe(a => {\r\n      expect(a.type).toBe(MarkAsDirtyAction.TYPE);\r\n      done();\r\n    });\r\n\r\n    option1.selected = true;\r\n    element.dispatchEvent(new Event('change'));\r\n  });\r\n});\r\n"]}
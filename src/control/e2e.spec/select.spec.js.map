{"version":3,"file":"select.spec.js","sourceRoot":"","sources":["select.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import 'rxjs/add/operator/first';\r\nimport 'rxjs/add/operator/skip';\r\n\r\nimport { Component, Input } from '@angular/core';\r\nimport { async, ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { Action, ActionsSubject } from '@ngrx/store';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { MarkAsDirtyAction, SetValueAction } from '../../actions';\r\nimport { NgrxFormsModule } from '../../module';\r\nimport { createFormControlState, FormControlState } from '../../state';\r\n\r\nconst SELECT_OPTIONS = ['op1', 'op2'];\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'select-test',\r\n  template: '<select [ngrxFormControlState]=\"state\"><option *ngFor=\"let o of options\" [value]=\"o\">{{o}}</option></select>',\r\n})\r\nexport class SelectComponent {\r\n  @Input() state: FormControlState<string>;\r\n  options = SELECT_OPTIONS;\r\n}\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'select-test-fallback',\r\n  template: '<select><option *ngFor=\"let o of options\" [value]=\"o\">{{o}} Label</option></select>',\r\n})\r\nexport class SelectFallbackComponent {\r\n  options = SELECT_OPTIONS;\r\n}\r\n\r\ndescribe(SelectComponent.name, () => {\r\n  let component: SelectComponent;\r\n  let fixture: ComponentFixture<SelectComponent>;\r\n  let actionsSubject: ActionsSubject;\r\n  let actions$: Observable<Action>;\r\n  let element: HTMLSelectElement;\r\n  let option1: HTMLOptionElement;\r\n  let option2: HTMLOptionElement;\r\n  const FORM_CONTROL_ID = 'test ID';\r\n  const INITIAL_FORM_CONTROL_VALUE = SELECT_OPTIONS[1];\r\n  const INITIAL_STATE = createFormControlState(FORM_CONTROL_ID, INITIAL_FORM_CONTROL_VALUE);\r\n\r\n  beforeEach(() => {\r\n    actionsSubject = new Subject<Action>() as ActionsSubject;\r\n    actions$ = actionsSubject as Observable<Action>; // cast required due to mismatch of lift() function signature\r\n  });\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [NgrxFormsModule],\r\n      declarations: [SelectComponent, SelectFallbackComponent],\r\n      providers: [{ provide: ActionsSubject, useValue: actionsSubject }],\r\n    }).compileComponents();\r\n  }));\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(SelectComponent);\r\n    component = fixture.componentInstance;\r\n    component.state = INITIAL_STATE;\r\n    fixture.detectChanges();\r\n    const nativeElement = fixture.nativeElement as HTMLElement;\r\n    element = nativeElement.querySelector('select') as HTMLSelectElement;\r\n    option1 = nativeElement.querySelectorAll('option')[0] as HTMLOptionElement;\r\n    option2 = nativeElement.querySelectorAll('option')[1] as HTMLOptionElement;\r\n  });\r\n\r\n  it('should select the correct option initially', () => {\r\n    expect(option2.selected).toBe(true);\r\n  });\r\n\r\n  it(`should trigger a ${SetValueAction.name} with the selected value when an option is selected`, done => {\r\n    actions$.first().subscribe(a => {\r\n      expect(a.type).toBe(SetValueAction.TYPE);\r\n      expect((a as SetValueAction<string>).payload.value).toBe(SELECT_OPTIONS[0]);\r\n      done();\r\n    });\r\n\r\n    element.selectedIndex = 0;\r\n    element.dispatchEvent(new Event('change'));\r\n  });\r\n\r\n  it(`should trigger a ${MarkAsDirtyAction.name} when an option is selected`, done => {\r\n    actions$.skip(1).first().subscribe(a => {\r\n      expect(a.type).toBe(MarkAsDirtyAction.TYPE);\r\n      done();\r\n    });\r\n\r\n    element.selectedIndex = 0;\r\n    element.dispatchEvent(new Event('change'));\r\n  });\r\n\r\n  it('should set the value attribute for options without associated form state', () => {\r\n    const fallbackFixture = TestBed.createComponent(SelectFallbackComponent);\r\n    fallbackFixture.detectChanges();\r\n    const nativeElement = fallbackFixture.nativeElement as HTMLElement;\r\n    element = nativeElement.querySelector('select') as HTMLSelectElement;\r\n    option1 = nativeElement.querySelectorAll('option')[0] as HTMLOptionElement;\r\n    option2 = nativeElement.querySelectorAll('option')[1] as HTMLOptionElement;\r\n    expect(option1.value).toBe(SELECT_OPTIONS[0]);\r\n    expect(option2.value).toBe(SELECT_OPTIONS[1]);\r\n  });\r\n});\r\n\r\nconst SELECT_NUMBER_OPTIONS = [1, 2];\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'select-test',\r\n  template: '<select [ngrxFormControlState]=\"state\"><option *ngFor=\"let o of options\" [value]=\"o\">{{o}}</option></select>',\r\n})\r\nexport class NumberSelectComponent {\r\n  @Input() state: FormControlState<number>;\r\n  options = SELECT_NUMBER_OPTIONS;\r\n}\r\n\r\ndescribe(NumberSelectComponent.name, () => {\r\n  let component: NumberSelectComponent;\r\n  let fixture: ComponentFixture<NumberSelectComponent>;\r\n  let actionsSubject: ActionsSubject;\r\n  let actions$: Observable<Action>;\r\n  let element: HTMLSelectElement;\r\n  let option1: HTMLOptionElement;\r\n  let option2: HTMLOptionElement;\r\n  const FORM_CONTROL_ID = 'test ID';\r\n  const INITIAL_FORM_CONTROL_VALUE = SELECT_NUMBER_OPTIONS[1];\r\n  const INITIAL_STATE = createFormControlState(FORM_CONTROL_ID, INITIAL_FORM_CONTROL_VALUE);\r\n\r\n  beforeEach(() => {\r\n    actionsSubject = new Subject<Action>() as ActionsSubject;\r\n    actions$ = actionsSubject as Observable<Action>; // cast required due to mismatch of lift() function signature\r\n  });\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [NgrxFormsModule],\r\n      declarations: [NumberSelectComponent],\r\n      providers: [{ provide: ActionsSubject, useValue: actionsSubject }],\r\n    }).compileComponents();\r\n  }));\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(NumberSelectComponent);\r\n    component = fixture.componentInstance;\r\n    component.state = INITIAL_STATE;\r\n    fixture.detectChanges();\r\n    const nativeElement = fixture.nativeElement as HTMLElement;\r\n    element = nativeElement.querySelector('select') as HTMLSelectElement;\r\n    option1 = element.querySelectorAll('option')[0] as HTMLOptionElement;\r\n    option2 = element.querySelectorAll('option')[1] as HTMLOptionElement;\r\n  });\r\n\r\n  it('should select the correct option initially', () => {\r\n    expect(option2.selected).toBe(true);\r\n  });\r\n\r\n  it(`should trigger a ${SetValueAction.name} with the selected value when an option is selected`, done => {\r\n    actions$.first().subscribe(a => {\r\n      expect(a.type).toBe(SetValueAction.TYPE);\r\n      expect((a as SetValueAction<number>).payload.value).toBe(SELECT_NUMBER_OPTIONS[0]);\r\n      done();\r\n    });\r\n\r\n    element.selectedIndex = 0;\r\n    element.dispatchEvent(new Event('change'));\r\n  });\r\n\r\n  it(`should trigger a ${MarkAsDirtyAction.name} when an option is selected`, done => {\r\n    actions$.skip(1).first().subscribe(a => {\r\n      expect(a.type).toBe(MarkAsDirtyAction.TYPE);\r\n      done();\r\n    });\r\n\r\n    element.selectedIndex = 0;\r\n    element.dispatchEvent(new Event('change'));\r\n  });\r\n});\r\n"]}
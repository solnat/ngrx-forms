{"version":3,"file":"directive.js","sourceRoot":"","sources":["directive.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  AfterViewInit,\r\n  Directive,\r\n  ElementRef,\r\n  HostBinding,\r\n  HostListener,\r\n  Inject,\r\n  Input,\r\n  OnInit,\r\n  Optional,\r\n  Self,\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { DOCUMENT } from '@angular/platform-browser';\r\nimport { ActionsSubject } from '@ngrx/store';\r\n\r\nimport { FocusAction, MarkAsDirtyAction, MarkAsTouchedAction, SetValueAction, UnfocusAction } from '../actions';\r\nimport { FormControlState, FormControlValueTypes } from '../state';\r\nimport { selectViewAdapter } from '../view-adapter/util';\r\nimport { FormViewAdapter, NGRX_FORM_VIEW_ADAPTER } from '../view-adapter/view-adapter';\r\nimport { NgrxValueConverter, NgrxValueConverters } from './value-converter';\r\n\r\nconst CHANGE = 'change';\r\nconst BLUR = 'blur';\r\n\r\n@Directive({\r\n  selector: '[ngrxFormControlState]',\r\n})\r\nexport class NgrxFormControlDirective<TStateValue extends FormControlValueTypes, TViewValue = TStateValue> implements AfterViewInit, OnInit {\r\n  private isInitialized = false;\r\n  private focusTrackingIsEnabled = false;\r\n\r\n  @Input() set ngrxFormControlState(newState: FormControlState<TStateValue>) {\r\n    if (!newState) {\r\n      throw new Error('The control state must not be undefined!');\r\n    }\r\n\r\n    const oldState = this.state;\r\n    this.state = newState;\r\n\r\n    if (this.isInitialized) {\r\n      this.updateViewIfControlIdChanged(newState, oldState);\r\n      this.updateViewIfValueChanged(newState, oldState);\r\n      this.updateViewIfIsDisabledChanged(newState, oldState);\r\n      this.updateViewIfIsFocusedChanged(newState, oldState);\r\n    }\r\n  }\r\n\r\n  @Input() ngrxUpdateOn: 'change' | 'blur' = CHANGE;\r\n  @Input() set ngrxEnableFocusTracking(value: boolean) {\r\n    if (value && !this.dom) {\r\n      throw new Error('focus tracking is only supported on the browser platform');\r\n    }\r\n\r\n    this.focusTrackingIsEnabled = value;\r\n  }\r\n\r\n  @Input() ngrxValueConverter: NgrxValueConverter<TViewValue, TStateValue> = NgrxValueConverters.identity<any>();\r\n\r\n  // TODO: move this into a separate directive\r\n  // automatically apply the attribute that's used by the CDK to set initial focus\r\n  @HostBinding('attr.cdk-focus-region-start') get focusRegionStartAttr() {\r\n    return this.state && this.state.isFocused ? '' : null;\r\n  }\r\n\r\n  state: FormControlState<TStateValue>;\r\n\r\n  private viewAdapter: FormViewAdapter;\r\n\r\n  // we have to store the latest known state value since most input elements don't play nicely with\r\n  // setting the same value again (e.g. input elements move the cursor to the end of the input when\r\n  // a new value is set which means whenever the user types something the cursor is forced to the\r\n  // end of the input) which would for example happen every time a new value is pushed to the state\r\n  // since when the action to update the state is dispatched a new state will be received inside\r\n  // the directive, which in turn would trigger a view update; to prevent this behavior we compare\r\n  // the latest known state value with the value to be set and filter out those values that are equal\r\n  // to the latest known value\r\n  private viewValue: TViewValue;\r\n  private stateValue: TStateValue;\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    // for the dom parameter the `null` type must be last to ensure that in the compiled output\r\n    // there is no reference to the Document type to support non-browser platforms\r\n    @Optional() @Inject(DOCUMENT) private dom: Document | null,\r\n    private actionsSubject: ActionsSubject,\r\n    @Self() @Optional() @Inject(NGRX_FORM_VIEW_ADAPTER) viewAdapters: FormViewAdapter[],\r\n    @Self() @Optional() @Inject(NG_VALUE_ACCESSOR) valueAccessors: ControlValueAccessor[],\r\n  ) {\r\n    viewAdapters = viewAdapters || [];\r\n    valueAccessors = valueAccessors || [];\r\n\r\n    if (valueAccessors.length > 1) {\r\n      throw new Error('More than one custom control value accessor matches!');\r\n    }\r\n\r\n    this.viewAdapter = valueAccessors.length > 0\r\n      ? new ControlValueAccessorAdapter(valueAccessors[0])\r\n      : selectViewAdapter(viewAdapters);\r\n  }\r\n\r\n  updateViewIfControlIdChanged(newState: FormControlState<TStateValue>, oldState: FormControlState<TStateValue> | undefined) {\r\n    if (oldState && newState.id === oldState.id) {\r\n      return;\r\n    }\r\n\r\n    this.stateValue = newState.value;\r\n    this.viewValue = this.ngrxValueConverter.convertStateToViewValue(this.stateValue);\r\n    this.viewAdapter.setViewValue(this.viewValue);\r\n    if (this.viewAdapter.setIsDisabled) {\r\n      this.viewAdapter.setIsDisabled(newState.isDisabled);\r\n    }\r\n  }\r\n\r\n  updateViewIfValueChanged(newState: FormControlState<TStateValue>, oldState: FormControlState<TStateValue> | undefined) {\r\n    if (newState.value === this.stateValue) {\r\n      return;\r\n    }\r\n\r\n    this.stateValue = newState.value;\r\n    this.viewValue = this.ngrxValueConverter.convertStateToViewValue(newState.value);\r\n    this.viewAdapter.setViewValue(this.viewValue);\r\n  }\r\n\r\n  updateViewIfIsDisabledChanged(newState: FormControlState<TStateValue>, oldState: FormControlState<TStateValue> | undefined) {\r\n    if (!this.viewAdapter.setIsDisabled) {\r\n      return;\r\n    }\r\n\r\n    if (oldState && newState.isDisabled === oldState.isDisabled) {\r\n      return;\r\n    }\r\n\r\n    this.viewAdapter.setIsDisabled(newState.isDisabled);\r\n  }\r\n\r\n  updateViewIfIsFocusedChanged(newState: FormControlState<TStateValue>, oldState: FormControlState<TStateValue> | undefined) {\r\n    if (!this.focusTrackingIsEnabled) {\r\n      return;\r\n    }\r\n\r\n    if (oldState && newState.isFocused === oldState.isFocused) {\r\n      return;\r\n    }\r\n\r\n    if (newState.isFocused) {\r\n      this.el.nativeElement.focus();\r\n    } else {\r\n      this.el.nativeElement.blur();\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (!this.state) {\r\n      throw new Error('The form state must not be undefined!');\r\n    }\r\n\r\n    this.isInitialized = true;\r\n\r\n    this.updateViewIfControlIdChanged(this.state, undefined);\r\n    this.updateViewIfValueChanged(this.state, undefined);\r\n    this.updateViewIfIsDisabledChanged(this.state, undefined);\r\n    this.updateViewIfIsFocusedChanged(this.state, undefined);\r\n\r\n    const dispatchSetValueAction = () => {\r\n      this.stateValue = this.ngrxValueConverter.convertViewToStateValue(this.viewValue);\r\n      if (this.stateValue !== this.state.value) {\r\n        this.actionsSubject.next(new SetValueAction(this.state.id, this.stateValue));\r\n\r\n        if (this.state.isPristine) {\r\n          this.actionsSubject.next(new MarkAsDirtyAction(this.state.id));\r\n        }\r\n      }\r\n    };\r\n\r\n    this.viewAdapter.setOnChangeCallback((viewValue: TViewValue) => {\r\n      this.viewValue = viewValue;\r\n\r\n      if (this.ngrxUpdateOn === CHANGE) {\r\n        dispatchSetValueAction();\r\n      }\r\n    });\r\n\r\n    this.viewAdapter.setOnTouchedCallback(() => {\r\n      if (!this.state.isTouched) {\r\n        this.actionsSubject.next(new MarkAsTouchedAction(this.state.id));\r\n      }\r\n\r\n      if (this.ngrxUpdateOn === BLUR) {\r\n        dispatchSetValueAction();\r\n      }\r\n    });\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    // we need to update the view again after it was initialized since some\r\n    // controls depend on child elements for setting the value (e.g. selects)\r\n    this.viewAdapter.setViewValue(this.viewValue);\r\n    if (this.viewAdapter.setIsDisabled) {\r\n      this.viewAdapter.setIsDisabled(this.state.isDisabled);\r\n    }\r\n  }\r\n\r\n  @HostListener('focusin')\r\n  @HostListener('focusout')\r\n  onFocusChange() {\r\n    if (!this.focusTrackingIsEnabled) {\r\n      return;\r\n    }\r\n\r\n    const isControlFocused = this.el.nativeElement === this.dom!.activeElement;\r\n    if (isControlFocused !== this.state.isFocused) {\r\n      this.actionsSubject.next(isControlFocused ? new FocusAction(this.state.id) : new UnfocusAction(this.state.id));\r\n    }\r\n  }\r\n}\r\n\r\nclass ControlValueAccessorAdapter implements FormViewAdapter {\r\n  constructor(private valueAccessor: ControlValueAccessor) { }\r\n\r\n  setViewValue(value: any): void {\r\n    this.valueAccessor.writeValue(value);\r\n  }\r\n\r\n  setOnChangeCallback(fn: (value: any) => void): void {\r\n    this.valueAccessor.registerOnChange(fn);\r\n  }\r\n  setOnTouchedCallback(fn: () => void): void {\r\n    this.valueAccessor.registerOnTouched(fn);\r\n  }\r\n\r\n  setIsDisabled(isDisabled: boolean) {\r\n    if (this.valueAccessor.setDisabledState) {\r\n      this.valueAccessor.setDisabledState(isDisabled);\r\n    }\r\n  }\r\n}\r\n"]}
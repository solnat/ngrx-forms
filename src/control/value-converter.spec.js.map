{"version":3,"file":"value-converter.spec.js","sourceRoot":"","sources":["value-converter.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { NgrxValueConverters } from './value-converter';\r\n\r\ndescribe('NgrxValueConverters', () => {\r\n  describe('identity', () => {\r\n    it('should return the same view value', () => {\r\n      const viewValue = new Date();\r\n      expect(NgrxValueConverters.identity<Date>().convertViewToStateValue(viewValue)).toBe(viewValue);\r\n    });\r\n\r\n    it('should return the same state value', () => {\r\n      const stateValue = new Date();\r\n      expect(NgrxValueConverters.identity<Date>().convertStateToViewValue(stateValue)).toBe(stateValue);\r\n    });\r\n  });\r\n\r\n  describe('dateToISOString', () => {\r\n    it('should return an ISO string when converting view value', () => {\r\n      const viewValue = new Date();\r\n      const stateValue = NgrxValueConverters.dateToISOString.convertViewToStateValue(viewValue);\r\n      expect(stateValue).toEqual(viewValue.toISOString());\r\n    });\r\n\r\n    it('should pass through \"null\" view values', () => {\r\n      const stateValue = NgrxValueConverters.dateToISOString.convertViewToStateValue(null);\r\n      expect(stateValue).toEqual(null);\r\n    });\r\n\r\n    it('should return a date when converting state value', () => {\r\n      const stateValue = '1970-01-01T00:00:00.000Z';\r\n      const viewValue = NgrxValueConverters.dateToISOString.convertStateToViewValue(stateValue);\r\n      expect(viewValue).toEqual(new Date(stateValue));\r\n    });\r\n\r\n    it('should pass through \"null\" state values', () => {\r\n      const viewValue = NgrxValueConverters.dateToISOString.convertStateToViewValue(null);\r\n      expect(viewValue).toEqual(null);\r\n    });\r\n\r\n    it('should return an equal value if converting from view to state and back', () => {\r\n      const viewValue = new Date();\r\n      const stateValue = NgrxValueConverters.dateToISOString.convertViewToStateValue(viewValue);\r\n      expect(NgrxValueConverters.dateToISOString.convertStateToViewValue(stateValue)).toEqual(viewValue);\r\n    });\r\n\r\n    it('should return an equal value if converting from state to view and back', () => {\r\n      const stateValue = '1970-01-01T00:00:00.000Z';\r\n      const viewValue = NgrxValueConverters.dateToISOString.convertStateToViewValue(stateValue);\r\n      expect(NgrxValueConverters.dateToISOString.convertViewToStateValue(viewValue)).toEqual(stateValue);\r\n    });\r\n  });\r\n\r\n  describe('objectToJSON', () => {\r\n    const tests = [\r\n      {\r\n        type: 'string',\r\n        expectedViewValue: 'Hello world',\r\n        expectedStateValue: '\"Hello world\"',\r\n      },\r\n      {\r\n        type: 'number',\r\n        expectedViewValue: 356.2,\r\n        expectedStateValue: '356.2',\r\n      },\r\n      {\r\n        type: 'boolean',\r\n        expectedViewValue: true,\r\n        expectedStateValue: 'true',\r\n      },\r\n      {\r\n        type: 'array',\r\n        expectedViewValue: [1, 2, 'this is a string', { a: 'b' }],\r\n        expectedStateValue: '[1,2,\"this is a string\",{\"a\":\"b\"}]',\r\n      },\r\n      {\r\n        type: 'object',\r\n        expectedViewValue: {\r\n          a: [1, 2, 3],\r\n          b: {\r\n            c: '456',\r\n          },\r\n        },\r\n        expectedStateValue: '{\"a\":[1,2,3],\"b\":{\"c\":\"456\"}}',\r\n      },\r\n    ];\r\n\r\n    tests.forEach(({ type, expectedStateValue, expectedViewValue }) => {\r\n      it(`should return the expected ${type} when converting a view value`, () => {\r\n        const stateValue = NgrxValueConverters.objectToJSON.convertViewToStateValue(expectedViewValue);\r\n        expect(stateValue).toEqual(stateValue);\r\n      });\r\n\r\n      it(`should return the expected JSON string when converting a state value of type ${type}`, () => {\r\n        const viewValue = NgrxValueConverters.objectToJSON.convertStateToViewValue(expectedStateValue);\r\n        expect(viewValue).toEqual(viewValue);\r\n      });\r\n\r\n      it(`should return an equal value if converting from view to state and back (type ${type})`, () => {\r\n        const stateValue = NgrxValueConverters.objectToJSON.convertViewToStateValue(expectedViewValue);\r\n        expect(NgrxValueConverters.objectToJSON.convertStateToViewValue(stateValue)).toEqual(expectedViewValue);\r\n      });\r\n\r\n      it(`should return an equal value if converting from state to view and back (type ${type})`, () => {\r\n        const stateValue = NgrxValueConverters.objectToJSON.convertStateToViewValue(expectedStateValue);\r\n        expect(NgrxValueConverters.objectToJSON.convertViewToStateValue(stateValue)).toEqual(expectedStateValue);\r\n      });\r\n    });\r\n\r\n    it('should pass through a \"null\" view value', () => {\r\n      const stateValue = NgrxValueConverters.objectToJSON.convertViewToStateValue(null);\r\n      expect(stateValue).toEqual(null);\r\n    });\r\n\r\n    it('should pass through a \"null\" state value', () => {\r\n      const viewValue = NgrxValueConverters.objectToJSON.convertStateToViewValue(null);\r\n      expect(viewValue).toEqual(null);\r\n    });\r\n  });\r\n});\r\n"]}
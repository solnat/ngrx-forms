{"version":3,"file":"mark-as-dirty.spec.js","sourceRoot":"","sources":["mark-as-dirty.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { MarkAsDirtyAction } from '../../actions';\r\nimport { cast } from '../../state';\r\nimport { markAsDirtyReducer } from './mark-as-dirty';\r\nimport {\r\n  FORM_CONTROL_ID,\r\n  FORM_CONTROL_INNER3_ID,\r\n  FORM_CONTROL_INNER5_ID,\r\n  FORM_CONTROL_INNER_ID,\r\n  INITIAL_STATE,\r\n  INITIAL_STATE_FULL,\r\n  setPropertiesRecursively,\r\n} from './test-util';\r\n\r\ndescribe(`form group ${markAsDirtyReducer.name}`, () => {\r\n  const INITIAL_STATE_FULL_DIRTY = cast(setPropertiesRecursively(INITIAL_STATE_FULL, [['isDirty', true], ['isPristine', false]]));\r\n\r\n  it('should mark itself and all children recursively as dirty', () => {\r\n    const resultState = markAsDirtyReducer(INITIAL_STATE_FULL, new MarkAsDirtyAction(FORM_CONTROL_ID));\r\n    expect(resultState).toEqual(INITIAL_STATE_FULL_DIRTY);\r\n  });\r\n\r\n  it('should not update state if all children are marked as dirty recursively', () => {\r\n    const resultState = markAsDirtyReducer(INITIAL_STATE_FULL_DIRTY, new MarkAsDirtyAction(FORM_CONTROL_ID));\r\n    expect(resultState).toBe(INITIAL_STATE_FULL_DIRTY);\r\n  });\r\n\r\n  it('should mark children as dirty if the group itself is already marked as dirty', () => {\r\n    const state = {\r\n      ...INITIAL_STATE_FULL,\r\n      isDirty: true,\r\n      isPristine: false,\r\n      controls: {\r\n        ...INITIAL_STATE_FULL.controls,\r\n        inner: {\r\n          ...INITIAL_STATE_FULL.controls.inner,\r\n          isDirty: true,\r\n          isPristine: false,\r\n        },\r\n      },\r\n    };\r\n    const resultState = markAsDirtyReducer(state, new MarkAsDirtyAction(FORM_CONTROL_ID));\r\n    expect(resultState).toEqual(INITIAL_STATE_FULL_DIRTY);\r\n  });\r\n\r\n  it('should mark control children as dirty', () => {\r\n    const resultState = markAsDirtyReducer(INITIAL_STATE, new MarkAsDirtyAction(FORM_CONTROL_ID));\r\n    expect(resultState.controls.inner.isDirty).toEqual(true);\r\n    expect(resultState.controls.inner.isPristine).toEqual(false);\r\n  });\r\n\r\n  it('should mark group children as dirty', () => {\r\n    const resultState = markAsDirtyReducer(INITIAL_STATE_FULL, new MarkAsDirtyAction(FORM_CONTROL_ID));\r\n    expect(resultState.controls.inner3.isDirty).toEqual(true);\r\n    expect(resultState.controls.inner3.isPristine).toEqual(false);\r\n  });\r\n\r\n  it('should mark array children as dirty', () => {\r\n    const resultState = markAsDirtyReducer(INITIAL_STATE_FULL, new MarkAsDirtyAction(FORM_CONTROL_ID));\r\n    expect(resultState.controls.inner5.isDirty).toEqual(true);\r\n    expect(resultState.controls.inner5.isPristine).toEqual(false);\r\n  });\r\n\r\n  it('should mark state as dirty if control child is marked as dirty', () => {\r\n    const resultState = markAsDirtyReducer(INITIAL_STATE, new MarkAsDirtyAction(FORM_CONTROL_INNER_ID));\r\n    expect(resultState.isDirty).toEqual(true);\r\n    expect(resultState.isPristine).toEqual(false);\r\n  });\r\n\r\n  it('should mark state as dirty if group child is marked as dirty', () => {\r\n    const resultState = markAsDirtyReducer(INITIAL_STATE_FULL, new MarkAsDirtyAction(FORM_CONTROL_INNER3_ID));\r\n    expect(resultState.isDirty).toEqual(true);\r\n    expect(resultState.isPristine).toEqual(false);\r\n  });\r\n\r\n  it('should mark state as dirty if array child is marked as dirty', () => {\r\n    const resultState = markAsDirtyReducer(INITIAL_STATE_FULL, new MarkAsDirtyAction(FORM_CONTROL_INNER5_ID));\r\n    expect(resultState.isDirty).toEqual(true);\r\n    expect(resultState.isPristine).toEqual(false);\r\n  });\r\n});\r\n"]}
{"version":3,"file":"test-util.js","sourceRoot":"","sources":["test-util.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qCAAwH;AAE3G,QAAA,eAAe,GAAG,SAAS,CAAC;AAC5B,QAAA,qBAAqB,GAAG,uBAAe,GAAG,QAAQ,CAAC;AACnD,QAAA,sBAAsB,GAAG,uBAAe,GAAG,SAAS,CAAC;AACrD,QAAA,sBAAsB,GAAG,uBAAe,GAAG,SAAS,CAAC;AACrD,QAAA,sBAAsB,GAAG,8BAAsB,GAAG,SAAS,CAAC;AAC5D,QAAA,sBAAsB,GAAG,uBAAe,GAAG,SAAS,CAAC;AACrD,QAAA,wBAAwB,GAAG,uBAAe,GAAG,WAAW,CAAC;AAEzD,QAAA,0BAA0B,GAAmB,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;AAC3D,QAAA,+BAA+B,GAAmB,EAAE,KAAK,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AAClH,QAAA,aAAa,GAAG,4BAAoB,CAAC,uBAAe,EAAE,kCAA0B,CAAC,CAAC;AAClF,QAAA,kBAAkB,GAAG,4BAAoB,CAAC,uBAAe,EAAE,uCAA+B,CAAC,CAAC;AAE5F,QAAA,sBAAsB,GAAG,UACpC,KAAmC,EACnC,QAA4C,EAC5C,KAAU;IACV,oBAAuB;SAAvB,UAAuB,EAAvB,qBAAuB,EAAvB,IAAuB;QAAvB,mCAAuB;;IAEvB,EAAE,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACtC,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAED,KAAK,gBACA,KAAK,eACP,QAAQ,IAAG,KAAK,MAClB,CAAC;IAEF,EAAE,CAAC,CAAC,oBAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACxB,IAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,8BAAsB,gBAAC,CAAC,EAAE,QAAQ,EAAE,KAAK,SAAK,UAAU,IAAxD,CAAyD,CAAC,CAAC;QACpG,MAAM,CAAC,aACF,KAAK,IACR,QAAQ,UAAA,GACF,CAAC;IACX,CAAC;IAED,EAAE,CAAC,CAAC,oBAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACxB,IAAM,UAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC;QAChC,IAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,UAAQ,CAAC,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,GAAG;YACxD,IAAM,CAAC,GAAG,8BAAsB,gBAAC,UAAQ,CAAC,GAAG,CAAC,EAAE,QAAQ,EAAE,KAAK,SAAK,UAAU,EAAC,CAAC;YAChF,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACb,MAAM,CAAC,GAAG,CAAC;QACb,CAAC,EAAE,EAA4B,CAAC,CAAC;QAEjC,MAAM,CAAC,aACF,KAAK,IACR,QAAQ,EAAE,WAAW,GACf,CAAC;IACX,CAAC;IAED,MAAM,CAAC,KAAK,CAAC;;AACf,CAAC,CAAC;AAEW,QAAA,wBAAwB,GAAG,UACtC,KAAmC,EACnC,UAA4D;IAC5D,oBAAuB;SAAvB,UAAuB,EAAvB,qBAAuB,EAAvB,IAAuB;QAAvB,mCAAuB;;IAEvB,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,CAAC,EAAE,EAAM;YAAL,SAAC,EAAE,SAAC;QAAM,OAAA,8BAAsB,gBAAC,CAAC,EAAE,CAAC,EAAE,CAAC,SAAK,UAAU;IAA7C,CAA8C,EAAE,KAAK,CAAC,CAAC;AACjG,CAAC,CAAC","sourcesContent":["import { AbstractControlState, createFormGroupState, FormGroupControls, isArrayState, isGroupState } from '../../state';\r\n\r\nexport const FORM_CONTROL_ID = 'test ID';\r\nexport const FORM_CONTROL_INNER_ID = FORM_CONTROL_ID + '.inner';\r\nexport const FORM_CONTROL_INNER2_ID = FORM_CONTROL_ID + '.inner2';\r\nexport const FORM_CONTROL_INNER3_ID = FORM_CONTROL_ID + '.inner3';\r\nexport const FORM_CONTROL_INNER4_ID = FORM_CONTROL_INNER3_ID + '.inner4';\r\nexport const FORM_CONTROL_INNER5_ID = FORM_CONTROL_ID + '.inner5';\r\nexport const FORM_CONTROL_INNER5_0_ID = FORM_CONTROL_ID + '.inner5.0';\r\nexport interface FormGroupValue { inner: string; inner2?: string; inner3?: { inner4: string }; inner5?: string[]; }\r\nexport const INITIAL_FORM_CONTROL_VALUE: FormGroupValue = { inner: '' };\r\nexport const INITIAL_FORM_CONTROL_VALUE_FULL: FormGroupValue = { inner: '', inner2: '', inner3: { inner4: '' }, inner5: [''] };\r\nexport const INITIAL_STATE = createFormGroupState(FORM_CONTROL_ID, INITIAL_FORM_CONTROL_VALUE);\r\nexport const INITIAL_STATE_FULL = createFormGroupState(FORM_CONTROL_ID, INITIAL_FORM_CONTROL_VALUE_FULL);\r\n\r\nexport const setPropertyRecursively = <TValue>(\r\n  state: AbstractControlState<TValue>,\r\n  property: keyof AbstractControlState<TValue>,\r\n  value: any,\r\n  ...excludeIds: string[],\r\n): AbstractControlState<TValue> => {\r\n  if (excludeIds.indexOf(state.id) >= 0) {\r\n    return state;\r\n  }\r\n\r\n  state = {\r\n    ...state,\r\n    [property]: value,\r\n  };\r\n\r\n  if (isArrayState(state)) {\r\n    const controls = state.controls.map(s => setPropertyRecursively(s, property, value, ...excludeIds));\r\n    return {\r\n      ...state,\r\n      controls,\r\n    } as any;\r\n  }\r\n\r\n  if (isGroupState(state)) {\r\n    const controls = state.controls;\r\n    const newControls = Object.keys(controls).reduce((res, key) => {\r\n      const s = setPropertyRecursively(controls[key], property, value, ...excludeIds);\r\n      res[key] = s;\r\n      return res;\r\n    }, {} as FormGroupControls<any>);\r\n\r\n    return {\r\n      ...state,\r\n      controls: newControls,\r\n    } as any;\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nexport const setPropertiesRecursively = <TValue>(\r\n  state: AbstractControlState<TValue>,\r\n  properties: Array<[keyof AbstractControlState<TValue>, any]>,\r\n  ...excludeIds: string[],\r\n): AbstractControlState<TValue> => {\r\n  return properties.reduce((s, [p, v]) => setPropertyRecursively(s, p, v, ...excludeIds), state);\r\n};\r\n"]}
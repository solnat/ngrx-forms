{"version":3,"file":"set-value.spec.js","sourceRoot":"","sources":["set-value.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { SetValueAction } from '../../actions';\r\nimport { cast, createFormGroupState } from '../../state';\r\nimport { setValueReducer } from './set-value';\r\nimport {\r\n  FORM_CONTROL_ID,\r\n  FORM_CONTROL_INNER3_ID,\r\n  FORM_CONTROL_INNER4_ID,\r\n  FORM_CONTROL_INNER5_0_ID,\r\n  FORM_CONTROL_INNER5_ID,\r\n  FORM_CONTROL_INNER_ID,\r\n  FormGroupValue,\r\n  INITIAL_STATE,\r\n} from './test-util';\r\n\r\ndescribe(`form group ${setValueReducer.name}`, () => {\r\n  it('should update state value if different', () => {\r\n    const value = { inner: 'A' };\r\n    const resultState = setValueReducer(INITIAL_STATE, new SetValueAction(FORM_CONTROL_ID, value));\r\n    expect(resultState.value).toEqual(value);\r\n  });\r\n\r\n  it('should not update state value if same', () => {\r\n    const value = { inner: 'A' };\r\n    const state = { ...INITIAL_STATE, value };\r\n    const resultState = setValueReducer(state, new SetValueAction(FORM_CONTROL_ID, value));\r\n    expect(resultState).toBe(state);\r\n  });\r\n\r\n  it('should not mark state as dirty', () => {\r\n    const value = { inner: 'A' };\r\n    const resultState = setValueReducer(INITIAL_STATE, new SetValueAction(FORM_CONTROL_ID, value));\r\n    expect(resultState.isDirty).toEqual(false);\r\n  });\r\n\r\n  it('should update child state value', () => {\r\n    const value = { inner: 'A' };\r\n    const resultState = setValueReducer(INITIAL_STATE, new SetValueAction(FORM_CONTROL_ID, value));\r\n    expect(resultState.controls.inner.value).toEqual(value.inner);\r\n  });\r\n\r\n  it('should create child states on demand', () => {\r\n    const value = { inner: 'A', inner2: 'B' };\r\n    const resultState = setValueReducer<FormGroupValue>(INITIAL_STATE, new SetValueAction(FORM_CONTROL_ID, value));\r\n    expect(resultState.value).toEqual(value);\r\n    expect(resultState.controls.inner2.value).toEqual(value.inner2);\r\n  });\r\n\r\n  it('should create child states on demand for group children', () => {\r\n    const value = { inner: 'A', inner3: { inner4: 'C' } };\r\n    const resultState = setValueReducer<FormGroupValue>(INITIAL_STATE, new SetValueAction(FORM_CONTROL_ID, value));\r\n    expect(resultState.value).toEqual(value);\r\n    expect(resultState.controls.inner3.value).toEqual(value.inner3);\r\n  });\r\n\r\n  it('should create child states on demand for array children', () => {\r\n    const value = { inner: 'A', inner5: ['C'] };\r\n    const resultState = setValueReducer<FormGroupValue>(INITIAL_STATE, new SetValueAction(FORM_CONTROL_ID, value));\r\n    expect(resultState.value).toEqual(value);\r\n    expect(resultState.controls.inner5.value).toEqual(value.inner5);\r\n  });\r\n\r\n  it('should create child states on demand for null children', () => {\r\n    const value = { inner: 'A', inner2: null as any as string };\r\n    const resultState = setValueReducer<FormGroupValue>(INITIAL_STATE, new SetValueAction(FORM_CONTROL_ID, value));\r\n    expect(resultState.value).toEqual(value);\r\n    expect(resultState.controls.inner2.value).toEqual(value.inner2);\r\n  });\r\n\r\n  it('should remove child states on demand', () => {\r\n    const value = { inner: 'A', inner2: 'B' };\r\n    let resultState = setValueReducer<FormGroupValue>(INITIAL_STATE, new SetValueAction(FORM_CONTROL_ID, value));\r\n    const value2 = { inner: 'A' };\r\n    resultState = setValueReducer(resultState, new SetValueAction(FORM_CONTROL_ID, value2));\r\n    expect(resultState.value).toEqual(value2);\r\n    expect(resultState.controls.inner2).toBeUndefined();\r\n  });\r\n\r\n  it('should remove child states on demand when value is empty', () => {\r\n    interface FormValue { inner?: number; }\r\n    const id = 'ID';\r\n    const state = createFormGroupState<FormValue>(id, { inner: 5 });\r\n    const resultState = setValueReducer<FormValue>(state, new SetValueAction(id, {}));\r\n    expect(resultState.value).toEqual({});\r\n    expect(resultState.controls.inner).toBeUndefined();\r\n  });\r\n\r\n  it('should aggregate child values', () => {\r\n    const value = 'A';\r\n    const resultState = setValueReducer(INITIAL_STATE, new SetValueAction(FORM_CONTROL_INNER_ID, value) as any);\r\n    expect(resultState.value).toEqual({ inner: 'A' });\r\n  });\r\n\r\n  it('should not mark state as dirty if child value is updated', () => {\r\n    const value = 'A';\r\n    const resultState = setValueReducer(INITIAL_STATE, new SetValueAction(FORM_CONTROL_INNER_ID, value) as any);\r\n    expect(resultState.isDirty).toEqual(false);\r\n    expect(resultState.controls.inner.isDirty).toEqual(false);\r\n  });\r\n\r\n  it('should aggregate child values for group children', () => {\r\n    let resultState = setValueReducer<FormGroupValue>(\r\n      INITIAL_STATE,\r\n      new SetValueAction(FORM_CONTROL_ID, { inner: 'A', inner3: { inner4: 'C' } }),\r\n    );\r\n    const value = { inner4: 'D' };\r\n    resultState = setValueReducer(resultState, new SetValueAction(FORM_CONTROL_INNER3_ID, value) as any);\r\n    expect(resultState.value.inner3).toEqual(value);\r\n  });\r\n\r\n  it('should aggregate child values for array children', () => {\r\n    let resultState = setValueReducer<FormGroupValue>(\r\n      INITIAL_STATE,\r\n      new SetValueAction(FORM_CONTROL_ID, { inner: 'A', inner5: ['C'] }),\r\n    );\r\n    const value = ['D'];\r\n    resultState = setValueReducer(resultState, new SetValueAction(FORM_CONTROL_INNER5_ID, value) as any);\r\n    expect(resultState.value.inner5).toEqual(value);\r\n  });\r\n\r\n  it('should not mark state as dirty if group child value is updated', () => {\r\n    let resultState = setValueReducer<FormGroupValue>(\r\n      INITIAL_STATE,\r\n      new SetValueAction(FORM_CONTROL_ID, { inner: 'A', inner3: { inner4: 'C' } }),\r\n    );\r\n    const value = { inner4: 'D' };\r\n    resultState = setValueReducer(resultState, new SetValueAction(FORM_CONTROL_INNER3_ID, value) as any);\r\n    expect(resultState.isDirty).toEqual(false);\r\n    expect(resultState.controls.inner3.isDirty).toEqual(false);\r\n  });\r\n\r\n  it('should not mark state as dirty if array child value is updated', () => {\r\n    let resultState = setValueReducer<FormGroupValue>(\r\n      INITIAL_STATE,\r\n      new SetValueAction(FORM_CONTROL_ID, { inner: 'A', inner5: ['C'] }),\r\n    );\r\n    const value = ['D'];\r\n    resultState = setValueReducer(resultState, new SetValueAction(FORM_CONTROL_INNER5_ID, value) as any);\r\n    expect(resultState.isDirty).toEqual(false);\r\n    expect(resultState.controls.inner5.isDirty).toEqual(false);\r\n  });\r\n\r\n  it('should aggregate nested child values in groups', () => {\r\n    let resultState = setValueReducer<FormGroupValue>(\r\n      INITIAL_STATE,\r\n      new SetValueAction(FORM_CONTROL_ID, { inner: 'A', inner3: { inner4: 'C' } }),\r\n    );\r\n    const value = 'D';\r\n    resultState = setValueReducer(resultState, new SetValueAction(FORM_CONTROL_INNER4_ID, value) as any);\r\n    expect(resultState.value.inner3!.inner4).toEqual(value);\r\n  });\r\n\r\n  it('should aggregate nested child values in arrays', () => {\r\n    let resultState = setValueReducer<FormGroupValue>(\r\n      INITIAL_STATE,\r\n      new SetValueAction(FORM_CONTROL_ID, { inner: 'A', inner5: ['C'] }),\r\n    );\r\n    const value = 'D';\r\n    resultState = setValueReducer(resultState, new SetValueAction(FORM_CONTROL_INNER5_0_ID, value) as any);\r\n    expect(resultState.value.inner5![0]).toEqual(value);\r\n  });\r\n\r\n  it('should not mark state as dirty if nested child value in group is updated', () => {\r\n    let resultState = setValueReducer<FormGroupValue>(\r\n      INITIAL_STATE,\r\n      new SetValueAction(FORM_CONTROL_ID, { inner: 'A', inner3: { inner4: 'C' } }),\r\n    );\r\n    const value = 'D';\r\n    resultState = setValueReducer(resultState, new SetValueAction(FORM_CONTROL_INNER4_ID, value) as any);\r\n    expect(resultState.isDirty).toEqual(false);\r\n    expect(cast(resultState.controls.inner3)!.controls.inner4.isDirty).toEqual(false);\r\n  });\r\n\r\n  it('should not mark state as dirty if nested child value in array is updated', () => {\r\n    let resultState = setValueReducer<FormGroupValue>(\r\n      INITIAL_STATE,\r\n      new SetValueAction(FORM_CONTROL_ID, { inner: 'A', inner5: ['C'] }),\r\n    );\r\n    const value = 'D';\r\n    resultState = setValueReducer(resultState, new SetValueAction(FORM_CONTROL_INNER5_0_ID, value) as any);\r\n    expect(resultState.isDirty).toEqual(false);\r\n    expect(cast(resultState.controls.inner5)!.controls[0].isDirty).toEqual(false);\r\n  });\r\n\r\n  it('should remove child errors on demand when value is empty', () => {\r\n    interface FormValue { inner?: number; }\r\n    const id = 'ID';\r\n    const errors = { required: true };\r\n    let state = createFormGroupState<FormValue>(id, { inner: 5 });\r\n    state = {\r\n      ...state,\r\n      errors: {\r\n        _inner: errors,\r\n      },\r\n      controls: {\r\n        inner: {\r\n          ...state.controls.inner,\r\n          errors,\r\n        },\r\n      },\r\n    };\r\n    const resultState = setValueReducer<FormValue>(state, new SetValueAction(id, {}));\r\n    expect(resultState.value).toEqual({});\r\n    expect(resultState.errors).toEqual({});\r\n    expect(resultState.controls.inner).toBeUndefined();\r\n  });\r\n\r\n  it('should remove child errors and keep own errors on demand when value is empty', () => {\r\n    interface FormValue { inner?: number; }\r\n    const id = 'ID';\r\n    const errors = { required: true };\r\n    let state = createFormGroupState<FormValue>(id, { inner: 5 });\r\n    state = {\r\n      ...state,\r\n      errors: {\r\n        _inner: errors,\r\n        ...errors,\r\n      },\r\n      controls: {\r\n        inner: {\r\n          ...state.controls.inner,\r\n          errors,\r\n        },\r\n      },\r\n    };\r\n    const resultState = setValueReducer<FormValue>(state, new SetValueAction(id, {}));\r\n    expect(resultState.value).toEqual({});\r\n    expect(resultState.errors).toEqual(errors);\r\n    expect(resultState.controls.inner).toBeUndefined();\r\n  });\r\n});\r\n"]}
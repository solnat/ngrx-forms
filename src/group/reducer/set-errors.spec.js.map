{"version":3,"file":"set-errors.spec.js","sourceRoot":"","sources":["set-errors.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { SetErrorsAction } from '../../actions';\r\nimport { createFormGroupState } from '../../state';\r\nimport { setErrorsReducer } from './set-errors';\r\nimport {\r\n  FORM_CONTROL_ID,\r\n  FORM_CONTROL_INNER3_ID,\r\n  FORM_CONTROL_INNER4_ID,\r\n  FORM_CONTROL_INNER5_0_ID,\r\n  FORM_CONTROL_INNER5_ID,\r\n  FORM_CONTROL_INNER_ID,\r\n  INITIAL_STATE,\r\n  INITIAL_STATE_FULL,\r\n} from './test-util';\r\n\r\ndescribe(`form group ${setErrorsReducer.name}`, () => {\r\n  it('should update state if there are errors', () => {\r\n    const errors = { required: true };\r\n    const resultState = setErrorsReducer(INITIAL_STATE, new SetErrorsAction(FORM_CONTROL_ID, errors));\r\n    expect(resultState.errors).toEqual(errors);\r\n    expect(resultState.isValid).toBe(false);\r\n    expect(resultState.isInvalid).toBe(true);\r\n  });\r\n\r\n  it('should update state if there are no errors', () => {\r\n    const errors = { required: true };\r\n    const state = { ...INITIAL_STATE, isValid: false, isInvalid: true, errors };\r\n    const resultState = setErrorsReducer(state, new SetErrorsAction(FORM_CONTROL_ID, {}));\r\n    expect(resultState.errors).toEqual({});\r\n    expect(resultState.isValid).toBe(true);\r\n    expect(resultState.isInvalid).toBe(false);\r\n  });\r\n\r\n  it('should not update state if errors are equal', () => {\r\n    const state = { ...INITIAL_STATE, isValid: false, isInvalid: true, errors: { required: true } };\r\n    const resultState = setErrorsReducer(state, new SetErrorsAction(FORM_CONTROL_ID, { required: true }));\r\n    expect(resultState).toBe(state);\r\n  });\r\n\r\n  it('should not update state if control is disabled', () => {\r\n    const errors = { required: true };\r\n    const state = { ...INITIAL_STATE, isEnabled: false, isDisabled: true };\r\n    const resultState = setErrorsReducer(state, new SetErrorsAction(FORM_CONTROL_ID, errors));\r\n    expect(resultState).toBe(state);\r\n  });\r\n\r\n  it('should not update state if errors are equal and empty', () => {\r\n    const resultState = setErrorsReducer(INITIAL_STATE, new SetErrorsAction(FORM_CONTROL_ID, {}));\r\n    expect(resultState).toBe(INITIAL_STATE);\r\n  });\r\n\r\n  it('should update state if group is empty', () => {\r\n    const errors = { required: true };\r\n    const state = createFormGroupState('test ID', {});\r\n    const resultState = setErrorsReducer(state, new SetErrorsAction(FORM_CONTROL_ID, errors));\r\n    expect(resultState.errors).toEqual(errors);\r\n    expect(resultState.isValid).toBe(false);\r\n    expect(resultState.isInvalid).toBe(true);\r\n  });\r\n\r\n  it('should keep async errors', () => {\r\n    const syncErrors = { required: true };\r\n    const asyncErrors = { $required: true };\r\n    const state = { ...INITIAL_STATE, isValid: false, isInvalid: true, errors: asyncErrors };\r\n    const resultState = setErrorsReducer(state, new SetErrorsAction(FORM_CONTROL_ID, syncErrors));\r\n    expect(resultState.errors).toEqual({ ...asyncErrors, ...syncErrors });\r\n  });\r\n\r\n  it('should throw if trying to set invalid error value', () => {\r\n    expect(() => setErrorsReducer(INITIAL_STATE, new SetErrorsAction(FORM_CONTROL_ID, null as any))).toThrowError();\r\n    expect(() => setErrorsReducer(INITIAL_STATE, new SetErrorsAction(FORM_CONTROL_ID, 1 as any))).toThrowError();\r\n    expect(() => setErrorsReducer(INITIAL_STATE, new SetErrorsAction(FORM_CONTROL_ID, [] as any))).toThrowError();\r\n    expect(() => setErrorsReducer(INITIAL_STATE, new SetErrorsAction(FORM_CONTROL_ID, { $required: true }))).toThrowError();\r\n    expect(() => setErrorsReducer(INITIAL_STATE, new SetErrorsAction(FORM_CONTROL_ID, { _inner: true }))).toThrowError();\r\n  });\r\n\r\n  it('should aggregate child errors', () => {\r\n    const errors = { required: true };\r\n    const resultState = setErrorsReducer(INITIAL_STATE, new SetErrorsAction(FORM_CONTROL_INNER_ID, errors));\r\n    expect(resultState.errors).toEqual({ _inner: errors });\r\n    expect(resultState.isValid).toEqual(false);\r\n    expect(resultState.isInvalid).toEqual(true);\r\n  });\r\n\r\n  it('should aggregate child errors for group children', () => {\r\n    const errors = { required: true };\r\n    const resultState = setErrorsReducer(INITIAL_STATE_FULL, new SetErrorsAction(FORM_CONTROL_INNER3_ID, errors));\r\n    expect(resultState.errors).toEqual({ _inner3: errors });\r\n    expect(resultState.isValid).toEqual(false);\r\n    expect(resultState.isInvalid).toEqual(true);\r\n  });\r\n\r\n  it('should aggregate child errors for array children', () => {\r\n    const errors = { required: true };\r\n    const resultState = setErrorsReducer(INITIAL_STATE_FULL, new SetErrorsAction(FORM_CONTROL_INNER5_ID, errors));\r\n    expect(resultState.errors).toEqual({ _inner5: errors });\r\n    expect(resultState.isValid).toEqual(false);\r\n    expect(resultState.isInvalid).toEqual(true);\r\n  });\r\n\r\n  it('should aggregate nested child errors for group', () => {\r\n    const errors = { required: true };\r\n    const resultState = setErrorsReducer(INITIAL_STATE_FULL, new SetErrorsAction(FORM_CONTROL_INNER4_ID, errors));\r\n    expect(resultState.errors).toEqual({ _inner3: { _inner4: errors } });\r\n    expect(resultState.isValid).toEqual(false);\r\n    expect(resultState.isInvalid).toEqual(true);\r\n  });\r\n\r\n  it('should aggregate nested child errors for array', () => {\r\n    const errors = { required: true };\r\n    const resultState = setErrorsReducer(INITIAL_STATE_FULL, new SetErrorsAction(FORM_CONTROL_INNER5_0_ID, errors));\r\n    expect(resultState.errors).toEqual({ _inner5: { _0: errors } });\r\n    expect(resultState.isValid).toEqual(false);\r\n    expect(resultState.isInvalid).toEqual(true);\r\n  });\r\n\r\n  it('should aggregate multiple child errors', () => {\r\n    const errors1 = { required: true };\r\n    const errors2 = { min: 0 };\r\n    let resultState = setErrorsReducer(INITIAL_STATE_FULL, new SetErrorsAction(FORM_CONTROL_INNER_ID, errors1));\r\n    resultState = setErrorsReducer(resultState, new SetErrorsAction(FORM_CONTROL_INNER3_ID, errors2));\r\n    expect(resultState.errors).toEqual({ _inner: errors1, _inner3: errors2 });\r\n    expect(resultState.isValid).toEqual(false);\r\n    expect(resultState.isInvalid).toEqual(true);\r\n  });\r\n\r\n  it('should track child errors and own errors when own errors are changed', () => {\r\n    const errors1 = { required: true };\r\n    const errors2 = { min: 0 };\r\n    const state = {\r\n      ...INITIAL_STATE,\r\n      errors: {\r\n        _inner: errors2,\r\n      },\r\n      isValid: false,\r\n      isInvalid: true,\r\n      controls: {\r\n        inner: {\r\n          ...INITIAL_STATE.controls.inner,\r\n          isValid: false,\r\n          isInvalid: true,\r\n          errors: errors2,\r\n        },\r\n      },\r\n    };\r\n    const resultState = setErrorsReducer(state, new SetErrorsAction(FORM_CONTROL_ID, errors1));\r\n    expect(resultState.errors).toEqual({ ...errors1, _inner: errors2 });\r\n  });\r\n\r\n  it('should track own errors and child errors when child errors are changed', () => {\r\n    const errors1 = { required: true };\r\n    const state = {\r\n      ...INITIAL_STATE,\r\n      isValid: false,\r\n      isInvalid: true,\r\n      errors: errors1,\r\n    };\r\n    const errors2 = { min: 0 };\r\n    const resultState = setErrorsReducer(state, new SetErrorsAction(FORM_CONTROL_INNER_ID, errors2));\r\n    expect(resultState.errors).toEqual({ ...errors1, _inner: errors2 });\r\n  });\r\n});\r\n"]}
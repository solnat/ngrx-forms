{"version":3,"file":"clear-async-error.spec.js","sourceRoot":"","sources":["clear-async-error.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { ClearAsyncErrorAction } from '../../actions';\r\nimport { clearAsyncErrorReducer } from './clear-async-error';\r\nimport { FORM_CONTROL_ID, FORM_CONTROL_INNER_ID, INITIAL_STATE, INITIAL_STATE_FULL } from './test-util';\r\n\r\ndescribe(`form group ${clearAsyncErrorReducer.name}`, () => {\r\n  it('should skip any action of the wrong type', () => expect(clearAsyncErrorReducer(INITIAL_STATE, { type: '' } as any)).toBe(INITIAL_STATE));\r\n\r\n  it('should remove error from state', () => {\r\n    const name = 'required';\r\n    const state = { ...INITIAL_STATE, isValid: false, isInvalid: true, errors: { ['$' + name]: true }, pendingValidations: [name], isValidationPending: true };\r\n    const resultState = clearAsyncErrorReducer(state, new ClearAsyncErrorAction(FORM_CONTROL_ID, name));\r\n    expect(resultState.errors).toEqual({});\r\n    expect(resultState.isValid).toBe(true);\r\n    expect(resultState.isInvalid).toBe(false);\r\n  });\r\n\r\n  it('should remove the validation from pending validations if validation is the last pending', () => {\r\n    const name = 'required';\r\n    const state = { ...INITIAL_STATE, isValid: false, isInvalid: true, errors: { ['$' + name]: true }, pendingValidations: [name], isValidationPending: true };\r\n    const resultState = clearAsyncErrorReducer(state, new ClearAsyncErrorAction(FORM_CONTROL_ID, name));\r\n    expect(resultState.pendingValidations).toEqual([]);\r\n    expect(resultState.isValidationPending).toBe(false);\r\n  });\r\n\r\n  it('should remove the validation from pending validations if validation is not the last pending', () => {\r\n    const name = 'required';\r\n    const name2 = 'min';\r\n    const state = {\r\n      ...INITIAL_STATE,\r\n      isValid: false,\r\n      isInvalid: true,\r\n      errors: { ['$' + name]: true },\r\n      pendingValidations: [name, name2],\r\n      isValidationPending: true,\r\n    };\r\n\r\n    const resultState = clearAsyncErrorReducer(state, new ClearAsyncErrorAction(FORM_CONTROL_ID, name));\r\n    expect(resultState.pendingValidations).toEqual([name2]);\r\n    expect(resultState.isValidationPending).toBe(true);\r\n  });\r\n\r\n  it('should remove pending validation without changing the errors if no matching error is found', () => {\r\n    const name = 'required';\r\n    const errors = { $min: true };\r\n    const state = { ...INITIAL_STATE, isValid: false, isInvalid: true, errors, pendingValidations: [name], isValidationPending: true };\r\n    const resultState = clearAsyncErrorReducer(state, new ClearAsyncErrorAction(FORM_CONTROL_ID, name));\r\n    expect(resultState.errors).toBe(errors);\r\n    expect(resultState.pendingValidations).toEqual([]);\r\n    expect(resultState.isValidationPending).toBe(false);\r\n  });\r\n\r\n  it('should not update state if no matching pending validation is found', () => {\r\n    const name = 'required';\r\n    const state = { ...INITIAL_STATE, pendingValidations: ['min'], isValidationPending: true };\r\n    const resultState = clearAsyncErrorReducer(state, new ClearAsyncErrorAction(FORM_CONTROL_ID, name));\r\n    expect(resultState).toBe(state);\r\n  });\r\n\r\n  it('should aggregate child errors', () => {\r\n    const name = 'required';\r\n    const value = true;\r\n    const errors = { min: 0 };\r\n    const state = {\r\n      ...INITIAL_STATE,\r\n      pendingValidations: [name],\r\n      isValidationPending: true,\r\n      errors: { ['$' + name]: value },\r\n      controls: {\r\n        inner: {\r\n          ...INITIAL_STATE.controls.inner,\r\n          isValid: false,\r\n          isInvalid: true,\r\n          errors,\r\n        },\r\n      },\r\n    };\r\n    const resultState = clearAsyncErrorReducer(state, new ClearAsyncErrorAction(FORM_CONTROL_ID, name));\r\n    expect(resultState.errors).toEqual({ _inner: errors });\r\n    expect(resultState.isValid).toEqual(false);\r\n    expect(resultState.isInvalid).toEqual(true);\r\n    expect(resultState.isValidationPending).toEqual(false);\r\n  });\r\n\r\n  it('should aggregate child errors for group children', () => {\r\n    const name = 'required';\r\n    const value = true;\r\n    const errors = { min: 0 };\r\n    const state = {\r\n      ...INITIAL_STATE_FULL,\r\n      pendingValidations: [name],\r\n      isValidationPending: true,\r\n      errors: {\r\n        ['$' + name]: value,\r\n        _inner3: errors,\r\n      },\r\n      controls: {\r\n        ...INITIAL_STATE_FULL.controls,\r\n        inner3: {\r\n          ...INITIAL_STATE_FULL.controls.inner3,\r\n          isValid: false,\r\n          isInvalid: true,\r\n          errors,\r\n        },\r\n      },\r\n    };\r\n    const resultState = clearAsyncErrorReducer(state, new ClearAsyncErrorAction(FORM_CONTROL_ID, name));\r\n    expect(resultState.errors).toEqual({ _inner3: errors });\r\n    expect(resultState.isValid).toEqual(false);\r\n    expect(resultState.isInvalid).toEqual(true);\r\n    expect(resultState.isValidationPending).toEqual(false);\r\n  });\r\n\r\n  it('should aggregate child errors for array children', () => {\r\n    const name = 'required';\r\n    const value = true;\r\n    const errors = { min: 0 };\r\n    const state = {\r\n      ...INITIAL_STATE_FULL,\r\n      pendingValidations: [name],\r\n      isValidationPending: true,\r\n      errors: {\r\n        ['$' + name]: value,\r\n        _inner5: errors,\r\n      },\r\n      controls: {\r\n        ...INITIAL_STATE_FULL.controls,\r\n        inner5: {\r\n          ...INITIAL_STATE_FULL.controls.inner5,\r\n          isValid: false,\r\n          isInvalid: true,\r\n          errors,\r\n        },\r\n      },\r\n    };\r\n    const resultState = clearAsyncErrorReducer(state, new ClearAsyncErrorAction(FORM_CONTROL_ID, name));\r\n    expect(resultState.errors).toEqual({ _inner5: errors });\r\n    expect(resultState.isValid).toEqual(false);\r\n    expect(resultState.isInvalid).toEqual(true);\r\n  });\r\n\r\n  it('should aggregate multiple child errors', () => {\r\n    const name = 'required';\r\n    const value = true;\r\n    const errors1 = { min: 0 };\r\n    const errors2 = { max: 0 };\r\n    const state = {\r\n      ...INITIAL_STATE_FULL,\r\n      pendingValidations: [name],\r\n      isValidationPending: true,\r\n      errors: {\r\n        ['$' + name]: value,\r\n        _inner: errors1,\r\n        _inner3: errors2,\r\n      },\r\n      controls: {\r\n        inner: {\r\n          ...INITIAL_STATE_FULL.controls.inner,\r\n          isValid: false,\r\n          isInvalid: true,\r\n          errors: errors1,\r\n        },\r\n        inner3: {\r\n          ...INITIAL_STATE_FULL.controls.inner3,\r\n          isValid: false,\r\n          isInvalid: true,\r\n          errors: errors2,\r\n        },\r\n      },\r\n    };\r\n    const resultState = clearAsyncErrorReducer(state, new ClearAsyncErrorAction(FORM_CONTROL_ID, name));\r\n    expect(resultState.errors).toEqual({ _inner: errors1, _inner3: errors2 });\r\n    expect(resultState.isValid).toEqual(false);\r\n    expect(resultState.isInvalid).toEqual(true);\r\n    expect(resultState.isValidationPending).toEqual(false);\r\n  });\r\n\r\n  it('should track child errors and own errors when own errors are changed', () => {\r\n    const name1 = 'required';\r\n    const value1 = true;\r\n    const name2 = 'min';\r\n    const value2 = 0;\r\n    const state = {\r\n      ...INITIAL_STATE,\r\n      errors: {\r\n        ['$' + name1]: value1,\r\n        _inner: { ['$' + name2]: value2 },\r\n      },\r\n      isValid: false,\r\n      isInvalid: true,\r\n      pendingValidations: [name1],\r\n      isValidationPending: true,\r\n      controls: {\r\n        inner: {\r\n          ...INITIAL_STATE.controls.inner,\r\n          isValid: false,\r\n          isInvalid: true,\r\n          errors: { ['$' + name2]: value2 },\r\n        },\r\n      },\r\n    };\r\n    const resultState = clearAsyncErrorReducer(state, new ClearAsyncErrorAction(FORM_CONTROL_ID, name1));\r\n    expect(resultState.errors).toEqual({ _inner: { ['$' + name2]: value2 } });\r\n    expect(resultState.isValidationPending).toEqual(false);\r\n  });\r\n\r\n  it('should track own errors and child errors when child errors are changed', () => {\r\n    const name1 = 'required';\r\n    const value1 = true;\r\n    const name2 = 'min';\r\n    const value2 = 0;\r\n    const state = {\r\n      ...INITIAL_STATE,\r\n      errors: {\r\n        ['$' + name1]: value1,\r\n        _inner: { ['$' + name2]: value2 },\r\n      },\r\n      isValid: false,\r\n      isInvalid: true,\r\n      isValidationPending: true,\r\n      controls: {\r\n        inner: {\r\n          ...INITIAL_STATE.controls.inner,\r\n          isValid: false,\r\n          isInvalid: true,\r\n          errors: { ['$' + name2]: value2 },\r\n          pendingValidations: [name2],\r\n          isValidationPending: true,\r\n        },\r\n      },\r\n    };\r\n    const resultState = clearAsyncErrorReducer(state, new ClearAsyncErrorAction(FORM_CONTROL_INNER_ID, name2));\r\n    expect(resultState.errors).toEqual({ ['$' + name1]: value1 });\r\n    expect(resultState.isValidationPending).toEqual(false);\r\n  });\r\n\r\n  it('should mark state as validation pending if child control is validation pending', () => {\r\n    const name = 'required';\r\n    const state = {\r\n      ...INITIAL_STATE,\r\n      pendingValidations: [name],\r\n      isValidationPending: true,\r\n      controls: {\r\n        inner: {\r\n          ...INITIAL_STATE.controls.inner,\r\n          pendingValidations: [name],\r\n          isValidationPending: true,\r\n        },\r\n      },\r\n    };\r\n    const resultState = clearAsyncErrorReducer(state, new ClearAsyncErrorAction(FORM_CONTROL_ID, name));\r\n    expect(resultState.pendingValidations).toEqual([]);\r\n    expect(resultState.isValidationPending).toEqual(true);\r\n  });\r\n\r\n  it('should mark state as validation pending if child group is validation pending', () => {\r\n    const name = 'required';\r\n    const state = {\r\n      ...INITIAL_STATE_FULL,\r\n      pendingValidations: [name],\r\n      isValidationPending: true,\r\n      controls: {\r\n        ...INITIAL_STATE_FULL.controls,\r\n        inner3: {\r\n          ...INITIAL_STATE_FULL.controls.inner3,\r\n          pendingValidations: [name],\r\n          isValidationPending: true,\r\n        },\r\n      },\r\n    };\r\n    const resultState = clearAsyncErrorReducer(state, new ClearAsyncErrorAction(FORM_CONTROL_ID, name));\r\n    expect(resultState.pendingValidations).toEqual([]);\r\n    expect(resultState.isValidationPending).toEqual(true);\r\n  });\r\n\r\n  it('should mark state as validation pending if child array is validation pending', () => {\r\n    const name = 'required';\r\n    const state = {\r\n      ...INITIAL_STATE_FULL,\r\n      pendingValidations: [name],\r\n      isValidationPending: true,\r\n      controls: {\r\n        ...INITIAL_STATE_FULL.controls,\r\n        inner5: {\r\n          ...INITIAL_STATE_FULL.controls.inner5,\r\n          pendingValidations: [name],\r\n          isValidationPending: true,\r\n        },\r\n      },\r\n    };\r\n    const resultState = clearAsyncErrorReducer(state, new ClearAsyncErrorAction(FORM_CONTROL_ID, name));\r\n    expect(resultState.pendingValidations).toEqual([]);\r\n    expect(resultState.isValidationPending).toEqual(true);\r\n  });\r\n});\r\n"]}
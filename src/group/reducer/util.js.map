{"version":3,"file":"util.js","sourceRoot":"","sources":["util.ts"],"names":[],"mappings":";;AACA,+CAA+D;AAC/D,iDAAmE;AACnE,qCAQqB;AACrB,sCAAsD;AAEtD,0BACE,KAAgC,EAChC,MAAoB;IAEpB,EAAE,CAAC,CAAC,oBAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACxB,MAAM,CAAC,kCAAwB,CAAC,KAAY,EAAE,MAAa,CAAC,CAAC;IAC/D,CAAC;IAED,EAAE,CAAC,CAAC,oBAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACxB,MAAM,CAAC,kCAAwB,CAAC,KAAY,EAAE,MAAM,CAAC,CAAC;IACxD,CAAC;IAED,MAAM,CAAC,oCAA0B,CAAC,KAAY,EAAE,MAAM,CAAC,CAAC;AAC1D,CAAC;AAbD,4CAaC;AAED,gCACE,QAAmC,EACnC,aAAqD;IAErD,IAAI,UAAU,GAAG,KAAK,CAAC;IACvB,IAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;SACtC,MAAM,CAAC,UAAC,CAAC,EAAE,GAAG;QACb,CAAC,CAAC,GAAG,CAAC,GAAG,gBAAgB,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,aAAa,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC1E,UAAU,GAAG,UAAU,IAAI,CAAC,CAAC,GAAG,CAAC,KAAK,QAAQ,CAAC,GAAG,CAAC,CAAC;QACpD,MAAM,CAAC,CAAC,CAAC;IACX,CAAC,EAAE,EAA+B,CAAC,CAAC;IACtC,MAAM,CAAC,UAAU,GAAG,WAAW,GAAG,QAAQ,CAAC;AAC7C,CAAC;AAZD,wDAYC;AAED,2BACE,QAAmC,EACnC,MAAuB;IAEvB,IAAI,UAAU,GAAG,KAAK,CAAC;IACvB,IAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;SACtC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,CAAC,GAAG,EAAE,gBAAgB,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,CAAwC,EAArF,CAAqF,CAAC;SACjG,MAAM,CAAC,UAAC,GAAG,EAAE,EAAY;YAAX,WAAG,EAAE,aAAK;QACvB,UAAU,GAAG,UAAU,IAAI,KAAK,KAAK,QAAQ,CAAC,GAAG,CAAC,CAAC;QACnD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,YAAI,GAAC,GAAG,IAAG,KAAK,MAAG,CAAC;;IAC9C,CAAC,EAAE,EAA+B,CAAC,CAAC;IACtC,MAAM,CAAC,UAAU,GAAG,WAAW,GAAG,QAAQ,CAAC;AAC7C,CAAC;AAED,sBAAsD,KAA6B,EAAE,MAAuB;IAC1G,IAAM,QAAQ,GAAG,iBAAiB,CAAC,KAAK,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IAE3D,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC;QAChC,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAED,MAAM,CAAC,yBAAiB,CAAC,KAAK,CAAC,EAAE,EAAE,QAAQ,EAAE,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,kBAAkB,EAAE,KAAK,CAAC,qBAAqB,CAAC,CAAC;AACjI,CAAC;AARD,oCAQC","sourcesContent":["import { Actions } from '../../actions';\r\nimport { formArrayReducerInternal } from '../../array/reducer';\r\nimport { formControlReducerInternal } from '../../control/reducer';\r\nimport {\r\n  AbstractControlState,\r\n  FormGroupControls,\r\n  FormGroupState,\r\n  isArrayState,\r\n  isGroupState,\r\n  KeyValue,\r\n  computeGroupState,\r\n} from '../../state';\r\nimport { formGroupReducerInternal } from '../reducer';\r\n\r\nexport function callChildReducer(\r\n  state: AbstractControlState<any>,\r\n  action: Actions<any>,\r\n): AbstractControlState<any> {\r\n  if (isArrayState(state)) {\r\n    return formArrayReducerInternal(state as any, action as any);\r\n  }\r\n\r\n  if (isGroupState(state)) {\r\n    return formGroupReducerInternal(state as any, action);\r\n  }\r\n\r\n  return formControlReducerInternal(state as any, action);\r\n}\r\n\r\nexport function dispatchActionPerChild<TValue extends KeyValue>(\r\n  controls: FormGroupControls<TValue>,\r\n  actionCreator: (controlId: string) => Actions<TValue>,\r\n) {\r\n  let hasChanged = false;\r\n  const newControls = Object.keys(controls)\r\n    .reduce((c, key) => {\r\n      c[key] = callChildReducer(controls[key], actionCreator(controls[key].id));\r\n      hasChanged = hasChanged || c[key] !== controls[key];\r\n      return c;\r\n    }, {} as FormGroupControls<TValue>);\r\n  return hasChanged ? newControls : controls;\r\n}\r\n\r\nfunction callChildReducers<TValue extends { [key: string]: any }>(\r\n  controls: FormGroupControls<TValue>,\r\n  action: Actions<TValue>,\r\n): FormGroupControls<TValue> {\r\n  let hasChanged = false;\r\n  const newControls = Object.keys(controls)\r\n    .map(key => [key, callChildReducer(controls[key], action)] as [string, AbstractControlState<any>])\r\n    .reduce((res, [key, state]) => {\r\n      hasChanged = hasChanged || state !== controls[key];\r\n      return Object.assign(res, { [key]: state });\r\n    }, {} as FormGroupControls<TValue>);\r\n  return hasChanged ? newControls : controls;\r\n}\r\n\r\nexport function childReducer<TValue extends KeyValue>(state: FormGroupState<TValue>, action: Actions<TValue>) {\r\n  const controls = callChildReducers(state.controls, action);\r\n\r\n  if (state.controls === controls) {\r\n    return state;\r\n  }\r\n\r\n  return computeGroupState(state.id, controls, state.value, state.errors, state.pendingValidations, state.userDefinedProperties);\r\n}\r\n"]}
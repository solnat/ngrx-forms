{"version":3,"file":"set-value.js","sourceRoot":"","sources":["set-value.ts"],"names":[],"mappings":";;AAAA,yCAAwD;AACxD,qCAA+G;AAC/G,+BAAwD;AAExD,yBACE,KAA6B,EAC7B,MAAuB;IAEvB,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,KAAK,wBAAc,CAAC,IAAI,CAAC,CAAC,CAAC;QACxC,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAED,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,KAAK,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;QAClC,MAAM,CAAC,mBAAY,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IACrC,CAAC;IAED,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,KAAK,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAED,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,YAAY,IAAI,CAAC,CAAC,CAAC;QACzC,MAAM,IAAI,KAAK,CAAC,wEAAwE,CAAC,CAAC;IAC5F,CAAC;IAED,IAAM,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC;IAEnC,IAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;SAChC,MAAM,CAAC,UAAC,CAAC,EAAE,GAAG;QACb,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACzB,CAAC,CAAC,GAAG,CAAC,GAAG,wBAAgB,CAAI,KAAK,CAAC,EAAE,SAAI,GAAK,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;QAC9D,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,CAAC,CAAC,GAAG,CAAC,GAAG,uBAAgB,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,IAAI,wBAAc,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACzG,CAAC;QACD,MAAM,CAAC,CAAC,CAAC;IACX,CAAC,EAAE,EAA+B,CAAC,CAAC;IAEtC,MAAM,CAAC,yBAAiB,CAAC,KAAK,CAAC,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,kBAAkB,EAAE,KAAK,CAAC,qBAAqB,CAAC,CAAC;AAC3H,CAAC;AAjCD,0CAiCC","sourcesContent":["import { Actions, SetValueAction } from '../../actions';\r\nimport { computeGroupState, createChildState, FormGroupControls, FormGroupState, KeyValue } from '../../state';\r\nimport { callChildReducer, childReducer } from './util';\r\n\r\nexport function setValueReducer<TValue extends KeyValue>(\r\n  state: FormGroupState<TValue>,\r\n  action: Actions<TValue>,\r\n): FormGroupState<TValue> {\r\n  if (action.type !== SetValueAction.TYPE) {\r\n    return state;\r\n  }\r\n\r\n  if (action.controlId !== state.id) {\r\n    return childReducer(state, action);\r\n  }\r\n\r\n  if (state.value === action.payload.value) {\r\n    return state;\r\n  }\r\n\r\n  if (action.payload.value instanceof Date) {\r\n    throw new Error('Date values are not supported. Please used serialized strings instead.');\r\n  }\r\n\r\n  const value = action.payload.value;\r\n\r\n  const controls = Object.keys(value)\r\n    .reduce((c, key) => {\r\n      if (!state.controls[key]) {\r\n        c[key] = createChildState(`${state.id}.${key}`, value[key]);\r\n      } else {\r\n        c[key] = callChildReducer(state.controls[key], new SetValueAction(state.controls[key].id, value[key]));\r\n      }\r\n      return c;\r\n    }, {} as FormGroupControls<TValue>);\r\n\r\n  return computeGroupState(state.id, controls, value, state.errors, state.pendingValidations, state.userDefinedProperties);\r\n}\r\n"]}
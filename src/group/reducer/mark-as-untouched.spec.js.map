{"version":3,"file":"mark-as-untouched.spec.js","sourceRoot":"","sources":["mark-as-untouched.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { MarkAsUntouchedAction } from '../../actions';\r\nimport { cast } from '../../state';\r\nimport { markAsUntouchedReducer } from './mark-as-untouched';\r\nimport {\r\n  FORM_CONTROL_ID,\r\n  FORM_CONTROL_INNER2_ID,\r\n  FORM_CONTROL_INNER3_ID,\r\n  FORM_CONTROL_INNER5_ID,\r\n  FORM_CONTROL_INNER_ID,\r\n  INITIAL_STATE,\r\n  INITIAL_STATE_FULL,\r\n  setPropertiesRecursively,\r\n} from './test-util';\r\n\r\ndescribe(`form group ${markAsUntouchedReducer.name}`, () => {\r\n  it('should update state if touched', () => {\r\n    const state = { ...INITIAL_STATE, isTouched: true, isUntouched: false };\r\n    const resultState = markAsUntouchedReducer(state, new MarkAsUntouchedAction(FORM_CONTROL_ID));\r\n    expect(resultState.isTouched).toEqual(false);\r\n    expect(resultState.isUntouched).toEqual(true);\r\n  });\r\n\r\n  it('should not update state if untouched', () => {\r\n    const resultState = markAsUntouchedReducer(INITIAL_STATE, new MarkAsUntouchedAction(FORM_CONTROL_ID));\r\n    expect(resultState).toBe(INITIAL_STATE);\r\n  });\r\n\r\n  it('should mark control children as untouched', () => {\r\n    const state = cast(setPropertiesRecursively(INITIAL_STATE_FULL, [['isTouched', true], ['isUntouched', false]]));\r\n    const resultState = markAsUntouchedReducer(state, new MarkAsUntouchedAction(FORM_CONTROL_ID));\r\n    expect(resultState.controls.inner.isTouched).toEqual(false);\r\n    expect(resultState.controls.inner.isUntouched).toEqual(true);\r\n  });\r\n\r\n  it('should mark group children as untouched', () => {\r\n    const state = cast(setPropertiesRecursively(INITIAL_STATE_FULL, [['isTouched', true], ['isUntouched', false]]));\r\n    const resultState = markAsUntouchedReducer(state, new MarkAsUntouchedAction(FORM_CONTROL_ID));\r\n    expect(resultState.controls.inner3.isTouched).toEqual(false);\r\n    expect(resultState.controls.inner3.isUntouched).toEqual(true);\r\n  });\r\n\r\n  it('should mark array children as untouched', () => {\r\n    const state = cast(setPropertiesRecursively(INITIAL_STATE_FULL, [['isTouched', true], ['isUntouched', false]]));\r\n    const resultState = markAsUntouchedReducer(state, new MarkAsUntouchedAction(FORM_CONTROL_ID));\r\n    expect(resultState.controls.inner5.isTouched).toEqual(false);\r\n    expect(resultState.controls.inner5.isUntouched).toEqual(true);\r\n  });\r\n\r\n  it('should mark state as untouched if all children are untouched when control child is updated', () => {\r\n    const state = cast(setPropertiesRecursively(\r\n      INITIAL_STATE_FULL,\r\n      [['isTouched', true], ['isUntouched', false]],\r\n      FORM_CONTROL_INNER2_ID,\r\n      FORM_CONTROL_INNER3_ID,\r\n      FORM_CONTROL_INNER5_ID,\r\n    ));\r\n    const resultState = markAsUntouchedReducer(state, new MarkAsUntouchedAction(FORM_CONTROL_INNER_ID));\r\n    expect(resultState.isTouched).toEqual(false);\r\n    expect(resultState.isUntouched).toEqual(true);\r\n  });\r\n\r\n  it('should not mark state as untouched if not all children are untouched when control child is updated', () => {\r\n    const state = cast(setPropertiesRecursively(INITIAL_STATE_FULL, [['isTouched', true], ['isUntouched', false]]));\r\n    const resultState = markAsUntouchedReducer(state, new MarkAsUntouchedAction(FORM_CONTROL_INNER_ID));\r\n    expect(resultState.isTouched).toEqual(true);\r\n    expect(resultState.isUntouched).toEqual(false);\r\n  });\r\n\r\n  it('should mark state as untouched if all children are untouched when group child is updated', () => {\r\n    const state = cast(setPropertiesRecursively(\r\n      INITIAL_STATE_FULL,\r\n      [['isTouched', true], ['isUntouched', false]],\r\n      FORM_CONTROL_INNER_ID,\r\n      FORM_CONTROL_INNER2_ID,\r\n      FORM_CONTROL_INNER5_ID,\r\n    ));\r\n    const resultState = markAsUntouchedReducer(state, new MarkAsUntouchedAction(FORM_CONTROL_INNER3_ID));\r\n    expect(resultState.isTouched).toEqual(false);\r\n    expect(resultState.isUntouched).toEqual(true);\r\n  });\r\n\r\n  it('should mark state as untouched if all children are untouched when array child is updated', () => {\r\n    const state = cast(setPropertiesRecursively(\r\n      INITIAL_STATE_FULL,\r\n      [['isTouched', true], ['isUntouched', false]],\r\n      FORM_CONTROL_INNER_ID,\r\n      FORM_CONTROL_INNER2_ID,\r\n      FORM_CONTROL_INNER3_ID,\r\n    ));\r\n    const resultState = markAsUntouchedReducer(state, new MarkAsUntouchedAction(FORM_CONTROL_INNER5_ID));\r\n    expect(resultState.isTouched).toEqual(false);\r\n    expect(resultState.isUntouched).toEqual(true);\r\n  });\r\n});\r\n"]}
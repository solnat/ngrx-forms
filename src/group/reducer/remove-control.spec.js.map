{"version":3,"file":"remove-control.spec.js","sourceRoot":"","sources":["remove-control.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { RemoveGroupControlAction } from '../../actions';\r\nimport { createFormGroupState } from '../../state';\r\nimport { removeControlReducer } from './remove-control';\r\nimport { FORM_CONTROL_ID, FormGroupValue, INITIAL_STATE, INITIAL_STATE_FULL } from './test-util';\r\n\r\ndescribe(`form group ${removeControlReducer.name}`, () => {\r\n  it('should remove child state', () => {\r\n    const action = new RemoveGroupControlAction<FormGroupValue>(FORM_CONTROL_ID, 'inner2');\r\n    const resultState = removeControlReducer<FormGroupValue>(INITIAL_STATE_FULL, action);\r\n    expect(resultState.value).toEqual({ inner: '', inner3: { inner4: '' }, inner5: [''] });\r\n    expect(resultState.controls.inner2).toBeUndefined();\r\n  });\r\n\r\n  it('should remove child state for group children', () => {\r\n    const action = new RemoveGroupControlAction<FormGroupValue>(FORM_CONTROL_ID, 'inner3');\r\n    const resultState = removeControlReducer<FormGroupValue>(INITIAL_STATE_FULL, action);\r\n    expect(resultState.value).toEqual({ inner: '', inner2: '', inner5: [''] });\r\n    expect(resultState.controls.inner3).toBeUndefined();\r\n  });\r\n\r\n  it('should remove child state for array children', () => {\r\n    const action = new RemoveGroupControlAction<FormGroupValue>(FORM_CONTROL_ID, 'inner5');\r\n    const resultState = removeControlReducer<FormGroupValue>(INITIAL_STATE_FULL, action);\r\n    expect(resultState.value).toEqual({ inner: '', inner2: '', inner3: { inner4: '' } });\r\n    expect(resultState.controls.inner5).toBeUndefined();\r\n  });\r\n\r\n  it('should remove child errors for removed child', () => {\r\n    interface FormValue { inner?: number; }\r\n    const id = 'ID';\r\n    const errors = { required: true };\r\n    let state = createFormGroupState<FormValue>(id, { inner: 5 });\r\n    state = {\r\n      ...state,\r\n      errors: {\r\n        _inner: errors,\r\n      },\r\n      controls: {\r\n        inner: {\r\n          ...state.controls.inner,\r\n          errors,\r\n        },\r\n      },\r\n    };\r\n    const action = new RemoveGroupControlAction<FormValue>(id, 'inner');\r\n    const resultState = removeControlReducer<FormValue>(state, action);\r\n    expect(resultState.value).toEqual({});\r\n    expect(resultState.errors).toEqual({});\r\n    expect(resultState.controls.inner).toBeUndefined();\r\n  });\r\n\r\n  it('should remove child errors for removed child and keep own errors', () => {\r\n    interface FormValue { inner?: number; }\r\n    const id = 'ID';\r\n    const errors = { required: true };\r\n    let state = createFormGroupState<FormValue>(id, { inner: 5 });\r\n    state = {\r\n      ...state,\r\n      errors: {\r\n        _inner: errors,\r\n        ...errors,\r\n      },\r\n      controls: {\r\n        inner: {\r\n          ...state.controls.inner,\r\n          errors,\r\n        },\r\n      },\r\n    };\r\n    const action = new RemoveGroupControlAction<FormValue>(id, 'inner');\r\n    const resultState = removeControlReducer<FormValue>(state, action);\r\n    expect(resultState.value).toEqual({});\r\n    expect(resultState.errors).toEqual(errors);\r\n    expect(resultState.controls.inner).toBeUndefined();\r\n  });\r\n\r\n  it('should throw if trying to remove non-existing control', () => {\r\n    const action = new RemoveGroupControlAction<FormGroupValue>(FORM_CONTROL_ID, 'inner2');\r\n    expect(() => removeControlReducer<FormGroupValue>(INITIAL_STATE, action)).toThrowError();\r\n  });\r\n});\r\n"]}
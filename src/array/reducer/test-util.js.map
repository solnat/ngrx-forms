{"version":3,"file":"test-util.js","sourceRoot":"","sources":["test-util.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qCAAqG;AAExF,QAAA,eAAe,GAAG,SAAS,CAAC;AAC5B,QAAA,iBAAiB,GAAG,uBAAe,GAAG,IAAI,CAAC;AAC3C,QAAA,iBAAiB,GAAG,uBAAe,GAAG,IAAI,CAAC;AAC3C,QAAA,wBAAwB,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;AACpC,QAAA,qCAAqC,GAAG,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;AACvE,QAAA,qCAAqC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AACrD,QAAA,aAAa,GAAG,4BAAoB,CAAC,uBAAe,EAAE,gCAAwB,CAAC,CAAC;AAChF,QAAA,0BAA0B,GAAG,4BAAoB,CAAC,uBAAe,EAAE,6CAAqC,CAAC,CAAC;AAC1G,QAAA,0BAA0B,GAAG,4BAAoB,CAAC,uBAAe,EAAE,6CAAqC,CAAC,CAAC;AAE1G,QAAA,sBAAsB,GAAG,UACpC,KAAmC,EACnC,QAA4C,EAC5C,KAAU;IACV,oBAAuB;SAAvB,UAAuB,EAAvB,qBAAuB,EAAvB,IAAuB;QAAvB,mCAAuB;;IAEvB,EAAE,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACtC,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAED,KAAK,gBACA,KAAK,eACP,QAAQ,IAAG,KAAK,MAClB,CAAC;IAEF,EAAE,CAAC,CAAC,oBAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACxB,IAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,8BAAsB,gBAAC,CAAC,EAAE,QAAQ,EAAE,KAAK,SAAK,UAAU,IAAxD,CAAyD,CAAC,CAAC;QACpG,MAAM,CAAC,aACF,KAAK,IACR,QAAQ,UAAA,GACF,CAAC;IACX,CAAC;IAED,EAAE,CAAC,CAAC,oBAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACxB,IAAI,UAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC;QAC9B,UAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,UAAQ,CAAC,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,GAAG;YAC/C,IAAM,CAAC,GAAG,8BAAsB,gBAAC,UAAQ,CAAC,GAAG,CAAC,EAAE,QAAQ,EAAE,KAAK,SAAK,UAAU,EAAC,CAAC;YAChF,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACb,MAAM,CAAC,GAAG,CAAC;QACb,CAAC,EAAE,EAAS,CAAC,CAAC;QAEd,MAAM,CAAC,aACF,KAAK,IACR,QAAQ,YAAA,GACF,CAAC;IACX,CAAC;IAED,MAAM,CAAC,KAAK,CAAC;;AACf,CAAC,CAAC;AAEW,QAAA,wBAAwB,GAAG,UACtC,KAAmC,EACnC,UAA4D;IAC5D,oBAAuB;SAAvB,UAAuB,EAAvB,qBAAuB,EAAvB,IAAuB;QAAvB,mCAAuB;;IAEvB,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,CAAC,EAAE,EAAM;YAAL,SAAC,EAAE,SAAC;QAAM,OAAA,8BAAsB,gBAAC,CAAC,EAAE,CAAC,EAAE,CAAC,SAAK,UAAU;IAA7C,CAA8C,EAAE,KAAK,CAAC,CAAC;AACjG,CAAC,CAAC","sourcesContent":["import { AbstractControlState, createFormArrayState, isArrayState, isGroupState } from '../../state';\r\n\r\nexport const FORM_CONTROL_ID = 'test ID';\r\nexport const FORM_CONTROL_0_ID = FORM_CONTROL_ID + '.0';\r\nexport const FORM_CONTROL_1_ID = FORM_CONTROL_ID + '.1';\r\nexport const INITIAL_FORM_ARRAY_VALUE = ['', ''];\r\nexport const INITIAL_FORM_ARRAY_VALUE_NESTED_GROUP = [{ inner: '' }, { inner: '' }];\r\nexport const INITIAL_FORM_ARRAY_VALUE_NESTED_ARRAY = [[''], ['']];\r\nexport const INITIAL_STATE = createFormArrayState(FORM_CONTROL_ID, INITIAL_FORM_ARRAY_VALUE);\r\nexport const INITIAL_STATE_NESTED_GROUP = createFormArrayState(FORM_CONTROL_ID, INITIAL_FORM_ARRAY_VALUE_NESTED_GROUP);\r\nexport const INITIAL_STATE_NESTED_ARRAY = createFormArrayState(FORM_CONTROL_ID, INITIAL_FORM_ARRAY_VALUE_NESTED_ARRAY);\r\n\r\nexport const setPropertyRecursively = <TValue>(\r\n  state: AbstractControlState<TValue>,\r\n  property: keyof AbstractControlState<TValue>,\r\n  value: any,\r\n  ...excludeIds: string[],\r\n): AbstractControlState<TValue> => {\r\n  if (excludeIds.indexOf(state.id) >= 0) {\r\n    return state;\r\n  }\r\n\r\n  state = {\r\n    ...state,\r\n    [property]: value,\r\n  };\r\n\r\n  if (isArrayState(state)) {\r\n    const controls = state.controls.map(s => setPropertyRecursively(s, property, value, ...excludeIds));\r\n    return {\r\n      ...state,\r\n      controls,\r\n    } as any;\r\n  }\r\n\r\n  if (isGroupState(state)) {\r\n    let controls = state.controls;\r\n    controls = Object.keys(controls).reduce((res, key) => {\r\n      const s = setPropertyRecursively(controls[key], property, value, ...excludeIds);\r\n      res[key] = s;\r\n      return res;\r\n    }, {} as any);\r\n\r\n    return {\r\n      ...state,\r\n      controls,\r\n    } as any;\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nexport const setPropertiesRecursively = <TValue>(\r\n  state: AbstractControlState<TValue>,\r\n  properties: Array<[keyof AbstractControlState<TValue>, any]>,\r\n  ...excludeIds: string[],\r\n): AbstractControlState<TValue> => {\r\n  return properties.reduce((s, [p, v]) => setPropertyRecursively(s, p, v, ...excludeIds), state);\r\n};\r\n"]}
{"version":3,"file":"add-control.js","sourceRoot":"","sources":["add-control.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,yCAA+D;AAC/D,qCAAkF;AAClF,+BAAsC;AAEtC,2BACE,KAA6B,EAC7B,MAAyB;IAEzB,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,KAAK,+BAAqB,CAAC,IAAI,CAAC,CAAC,CAAC;QAC/C,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAED,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,KAAK,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;QAClC,MAAM,CAAC,mBAAY,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IACrC,CAAC;IAED,IAAM,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,KAAK,IAAI,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC;IAE3F,EAAE,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;QAC/C,MAAM,IAAI,KAAK,CAAC,WAAS,KAAK,qCAAgC,KAAK,CAAC,EAAE,sBAAiB,KAAK,CAAC,QAAQ,CAAC,MAAM,MAAG,CAAC,CAAC,CAAC,KAAK;IACzH,CAAC;IAED,IAAI,QAAQ,GAAO,KAAK,CAAC,QAAQ,QAAC,CAAC;IACnC,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,wBAAgB,CAAI,KAAK,CAAC,EAAE,SAAI,KAAO,EAAE,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;IAC1F,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,cAAM,CAAC,IAAE,EAAE,EAAK,KAAK,CAAC,EAAE,SAAI,CAAG,IAAG,EAAlC,CAAkC,CAAC,CAAC;IAEtE,MAAM,CAAC,yBAAiB,CACtB,KAAK,CAAC,EAAE,EACR,QAAQ,EACR,KAAK,CAAC,KAAK,EACX,KAAK,CAAC,MAAM,EACZ,KAAK,CAAC,kBAAkB,EACxB,KAAK,CAAC,qBAAqB,CAC5B,CAAC;AACJ,CAAC;AA9BD,8CA8BC","sourcesContent":["import { Actions, AddArrayControlAction } from '../../actions';\nimport { computeArrayState, createChildState, FormArrayState } from '../../state';\nimport { childReducer } from './util';\n\nexport function addControlReducer<TValue>(\n  state: FormArrayState<TValue>,\n  action: Actions<TValue[]>,\n): FormArrayState<TValue> {\n  if (action.type !== AddArrayControlAction.TYPE) {\n    return state;\n  }\n\n  if (action.controlId !== state.id) {\n    return childReducer(state, action);\n  }\n\n  const index = action.payload.index === null ? state.controls.length : action.payload.index;\n\n  if (index > state.controls.length || index < 0) {\n    throw new Error(`Index ${index} is out of bounds for array '${state.id}' with length ${state.controls.length}!`); // `;\n  }\n\n  let controls = [...state.controls];\n  controls.splice(index, 0, createChildState(`${state.id}.${index}`, action.payload.value));\n  controls = controls.map((c, i) => ({ ...c, id: `${state.id}.${i}` }));\n\n  return computeArrayState(\n    state.id,\n    controls,\n    state.value,\n    state.errors,\n    state.pendingValidations,\n    state.userDefinedProperties,\n  );\n}\n"]}
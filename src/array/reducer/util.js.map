{"version":3,"file":"util.js","sourceRoot":"","sources":["util.ts"],"names":[],"mappings":";;AACA,iDAAmE;AACnE,+CAA+D;AAC/D,qCAAkH;AAClH,sCAAsD;AAEtD,0BACE,KAAgC,EAChC,MAAoB;IAEpB,EAAE,CAAC,CAAC,oBAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACxB,MAAM,CAAC,kCAAwB,CAAC,KAAK,EAAE,MAAa,CAAC,CAAC;IACxD,CAAC;IAED,EAAE,CAAC,CAAC,oBAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACxB,MAAM,CAAC,kCAAwB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IACjD,CAAC;IAED,MAAM,CAAC,oCAA0B,CAAC,KAAY,EAAE,MAAM,CAAC,CAAC;AAC1D,CAAC;AAbD,4CAaC;AAED,gCACE,QAA6C,EAC7C,aAAqD;IAErD,IAAI,UAAU,GAAG,KAAK,CAAC;IACvB,IAAM,WAAW,GAAG,QAAQ;SACzB,GAAG,CAAC,UAAA,KAAK;QACR,IAAM,QAAQ,GAAG,gBAAgB,CAAC,KAAK,EAAE,aAAa,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;QAClE,UAAU,GAAG,UAAU,IAAI,KAAK,KAAK,QAAQ,CAAC;QAC9C,MAAM,CAAC,QAAQ,CAAC;IAClB,CAAC,CAAC,CAAC;IACL,MAAM,CAAC,UAAU,GAAG,WAAW,GAAG,QAAQ,CAAC;AAC7C,CAAC;AAZD,wDAYC;AAED,2BACE,QAA6C,EAC7C,MAAyB;IAEzB,IAAI,UAAU,GAAG,KAAK,CAAC;IACvB,IAAM,WAAW,GAAG,QAAQ;SACzB,GAAG,CAAC,UAAA,KAAK;QACR,IAAM,QAAQ,GAAG,gBAAgB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QACjD,UAAU,GAAG,UAAU,IAAI,KAAK,KAAK,QAAQ,CAAC;QAC9C,MAAM,CAAC,QAAQ,CAAC;IAClB,CAAC,CAAC,CAAC;IACL,MAAM,CAAC,UAAU,GAAG,WAAW,GAAG,QAAQ,CAAC;AAC7C,CAAC;AAED,sBAAqC,KAA6B,EAAE,MAAyB;IAC3F,IAAM,QAAQ,GAAG,iBAAiB,CAAC,KAAK,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IAE3D,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC;QAChC,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAED,MAAM,CAAC,yBAAiB,CAAC,KAAK,CAAC,EAAE,EAAE,QAAQ,EAAE,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,kBAAkB,EAAE,KAAK,CAAC,qBAAqB,CAAC,CAAC;AACjI,CAAC;AARD,oCAQC","sourcesContent":["import { Actions } from '../../actions';\nimport { formControlReducerInternal } from '../../control/reducer';\nimport { formGroupReducerInternal } from '../../group/reducer';\nimport { AbstractControlState, computeArrayState, FormArrayState, isArrayState, isGroupState } from '../../state';\nimport { formArrayReducerInternal } from '../reducer';\n\nexport function callChildReducer(\n  state: AbstractControlState<any>,\n  action: Actions<any>,\n): AbstractControlState<any> {\n  if (isArrayState(state)) {\n    return formArrayReducerInternal(state, action as any);\n  }\n\n  if (isGroupState(state)) {\n    return formGroupReducerInternal(state, action);\n  }\n\n  return formControlReducerInternal(state as any, action);\n}\n\nexport function dispatchActionPerChild<TValue>(\n  controls: Array<AbstractControlState<TValue>>,\n  actionCreator: (controlId: string) => Actions<TValue>,\n) {\n  let hasChanged = false;\n  const newControls = controls\n    .map(state => {\n      const newState = callChildReducer(state, actionCreator(state.id));\n      hasChanged = hasChanged || state !== newState;\n      return newState;\n    });\n  return hasChanged ? newControls : controls;\n}\n\nfunction callChildReducers<TValue>(\n  controls: Array<AbstractControlState<TValue>>,\n  action: Actions<TValue[]>,\n): Array<AbstractControlState<TValue>> {\n  let hasChanged = false;\n  const newControls = controls\n    .map(state => {\n      const newState = callChildReducer(state, action);\n      hasChanged = hasChanged || state !== newState;\n      return newState;\n    });\n  return hasChanged ? newControls : controls;\n}\n\nexport function childReducer<TValue>(state: FormArrayState<TValue>, action: Actions<TValue[]>) {\n  const controls = callChildReducers(state.controls, action);\n\n  if (state.controls === controls) {\n    return state;\n  }\n\n  return computeArrayState(state.id, controls, state.value, state.errors, state.pendingValidations, state.userDefinedProperties);\n}\n"]}
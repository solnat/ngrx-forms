{"version":3,"file":"enable.spec.js","sourceRoot":"","sources":["enable.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { EnableAction } from '../../actions';\r\nimport { cast } from '../../state';\r\nimport { enableReducer } from './enable';\r\nimport {\r\n  FORM_CONTROL_0_ID,\r\n  FORM_CONTROL_1_ID,\r\n  FORM_CONTROL_ID,\r\n  INITIAL_STATE,\r\n  INITIAL_STATE_NESTED_ARRAY,\r\n  INITIAL_STATE_NESTED_GROUP,\r\n  setPropertiesRecursively,\r\n} from './test-util';\r\n\r\ndescribe(`form array ${enableReducer.name}`, () => {\r\n  it('should enable itself and all children recursively', () => {\r\n    const state = cast(setPropertiesRecursively(INITIAL_STATE, [['isEnabled', false], ['isDisabled', true]]));\r\n    const resultState = enableReducer(state, new EnableAction(FORM_CONTROL_ID));\r\n    expect(resultState).toEqual(INITIAL_STATE);\r\n  });\r\n\r\n  it('should not update state if all children are enabled recursively', () => {\r\n    const resultState = enableReducer(INITIAL_STATE, new EnableAction(FORM_CONTROL_ID));\r\n    expect(resultState).toBe(INITIAL_STATE);\r\n  });\r\n\r\n  it('should enable children if the group itself is already enabled', () => {\r\n    const state = {\r\n      ...INITIAL_STATE,\r\n      controls: [\r\n        INITIAL_STATE.controls[0],\r\n        {\r\n          ...INITIAL_STATE.controls[1],\r\n          isEnabled: false,\r\n          isDisabled: true,\r\n        },\r\n      ],\r\n    };\r\n    const resultState = enableReducer(state, new EnableAction(FORM_CONTROL_ID));\r\n    expect(resultState).toEqual(INITIAL_STATE);\r\n  });\r\n\r\n  it('should enable if control child gets enabled', () => {\r\n    const state = cast(setPropertiesRecursively(INITIAL_STATE, [['isEnabled', false], ['isDisabled', true]], FORM_CONTROL_1_ID));\r\n    const resultState = enableReducer(state, new EnableAction(FORM_CONTROL_0_ID));\r\n    expect(resultState).toEqual(INITIAL_STATE);\r\n  });\r\n\r\n  it('should enable without enabling any other children if control child gets enabled', () => {\r\n    const state = cast(setPropertiesRecursively(INITIAL_STATE, [['isEnabled', false], ['isDisabled', true]]));\r\n    const resultState = enableReducer(state, new EnableAction(FORM_CONTROL_0_ID));\r\n    expect(resultState.isEnabled).toBe(true);\r\n    expect(resultState.isDisabled).toBe(false);\r\n    expect(resultState.controls[1].isEnabled).toBe(false);\r\n    expect(resultState.controls[1].isDisabled).toBe(true);\r\n  });\r\n\r\n  it('should enable without enabling any other children if group child gets enabled', () => {\r\n    const state = cast(setPropertiesRecursively(INITIAL_STATE_NESTED_GROUP, [['isEnabled', false], ['isDisabled', true]]));\r\n    const resultState = enableReducer(state, new EnableAction(FORM_CONTROL_0_ID));\r\n    expect(resultState.isEnabled).toBe(true);\r\n    expect(resultState.isDisabled).toBe(false);\r\n    expect(resultState.controls[1].isEnabled).toBe(false);\r\n    expect(resultState.controls[1].isDisabled).toBe(true);\r\n  });\r\n\r\n  it('should enable without enabling any other children if array child gets enabled', () => {\r\n    const state = cast(setPropertiesRecursively(INITIAL_STATE_NESTED_ARRAY, [['isEnabled', false], ['isDisabled', true]]));\r\n    const resultState = enableReducer(state, new EnableAction(FORM_CONTROL_0_ID));\r\n    expect(resultState.isEnabled).toBe(true);\r\n    expect(resultState.isDisabled).toBe(false);\r\n    expect(resultState.controls[1].isEnabled).toBe(false);\r\n    expect(resultState.controls[1].isDisabled).toBe(true);\r\n  });\r\n});\r\n"]}
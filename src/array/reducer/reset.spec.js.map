{"version":3,"file":"reset.spec.js","sourceRoot":"","sources":["reset.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { ResetAction } from '../../actions';\r\nimport { cast } from '../../state';\r\nimport { resetReducer } from './reset';\r\nimport {\r\n  FORM_CONTROL_0_ID,\r\n  FORM_CONTROL_1_ID,\r\n  FORM_CONTROL_ID,\r\n  INITIAL_STATE,\r\n  INITIAL_STATE_NESTED_ARRAY,\r\n  INITIAL_STATE_NESTED_GROUP,\r\n  setPropertiesRecursively,\r\n} from './test-util';\r\n\r\ndescribe(`form array ${resetReducer.name}`, () => {\r\n  it('should update state if dirty', () => {\r\n    const state = { ...INITIAL_STATE, isDirty: true, isPristine: false };\r\n    const resultState = resetReducer(state, new ResetAction(FORM_CONTROL_ID));\r\n    expect(resultState.isDirty).toEqual(false);\r\n    expect(resultState.isPristine).toEqual(true);\r\n    expect(resultState.isTouched).toEqual(false);\r\n    expect(resultState.isUntouched).toEqual(true);\r\n    expect(resultState.isSubmitted).toEqual(false);\r\n    expect(resultState.isUnsubmitted).toEqual(true);\r\n  });\r\n\r\n  it('should update state if touched', () => {\r\n    const state = { ...INITIAL_STATE, isTouched: true, isUntouched: false };\r\n    const resultState = resetReducer(state, new ResetAction(FORM_CONTROL_ID));\r\n    expect(resultState.isDirty).toEqual(false);\r\n    expect(resultState.isPristine).toEqual(true);\r\n    expect(resultState.isTouched).toEqual(false);\r\n    expect(resultState.isUntouched).toEqual(true);\r\n    expect(resultState.isSubmitted).toEqual(false);\r\n    expect(resultState.isUnsubmitted).toEqual(true);\r\n  });\r\n\r\n  it('should update state if submitted', () => {\r\n    const state = { ...INITIAL_STATE, isSubmitted: true, isUnsubmitted: false };\r\n    const resultState = resetReducer(state, new ResetAction(FORM_CONTROL_ID));\r\n    expect(resultState.isDirty).toEqual(false);\r\n    expect(resultState.isPristine).toEqual(true);\r\n    expect(resultState.isTouched).toEqual(false);\r\n    expect(resultState.isUntouched).toEqual(true);\r\n    expect(resultState.isSubmitted).toEqual(false);\r\n    expect(resultState.isUnsubmitted).toEqual(true);\r\n  });\r\n\r\n  it('should not update state if pristine and untouched and unsubmitted', () => {\r\n    const resultState = resetReducer(INITIAL_STATE, new ResetAction(FORM_CONTROL_ID));\r\n    expect(resultState).toBe(INITIAL_STATE);\r\n  });\r\n\r\n  it('should reset control children', () => {\r\n    const state = cast(setPropertiesRecursively(INITIAL_STATE, [['isDirty', true], ['isPristine', false]]));\r\n    const resultState = resetReducer(state, new ResetAction(FORM_CONTROL_ID));\r\n    expect(resultState.controls[0].isDirty).toEqual(false);\r\n    expect(resultState.controls[0].isPristine).toEqual(true);\r\n  });\r\n\r\n  it('should reset group children', () => {\r\n    const state = cast(setPropertiesRecursively(INITIAL_STATE_NESTED_GROUP, [['isDirty', true], ['isPristine', false]]));\r\n    const resultState = resetReducer(state, new ResetAction(FORM_CONTROL_ID));\r\n    expect(resultState.controls[0].isDirty).toEqual(false);\r\n    expect(resultState.controls[0].isPristine).toEqual(true);\r\n  });\r\n\r\n  it('should reset array children', () => {\r\n    const state = cast(setPropertiesRecursively(INITIAL_STATE_NESTED_ARRAY, [['isDirty', true], ['isPristine', false]]));\r\n    const resultState = resetReducer(state, new ResetAction(FORM_CONTROL_ID));\r\n    expect(resultState.controls[0].isDirty).toEqual(false);\r\n    expect(resultState.controls[0].isPristine).toEqual(true);\r\n  });\r\n\r\n  it('should reset state if all children are reset when control child is updated', () => {\r\n    const state = cast(setPropertiesRecursively(\r\n      INITIAL_STATE,\r\n      [['isDirty', true], ['isPristine', false], ['isTouched', true], ['isUntouched', false], ['isSubmitted', true], ['isUnsubmitted', false]],\r\n      FORM_CONTROL_0_ID,\r\n    ));\r\n    const resultState = resetReducer(state, new ResetAction(FORM_CONTROL_1_ID));\r\n    expect(resultState.isDirty).toEqual(false);\r\n    expect(resultState.isPristine).toEqual(true);\r\n  });\r\n\r\n  it('should not reset state if not all children are reset when control child is updated', () => {\r\n    const state = cast(setPropertiesRecursively(INITIAL_STATE, [['isDirty', true], ['isPristine', false]]));\r\n    const resultState = resetReducer(state, new ResetAction(FORM_CONTROL_0_ID));\r\n    expect(resultState.isDirty).toEqual(true);\r\n    expect(resultState.isPristine).toEqual(false);\r\n  });\r\n\r\n  it('should reset state if all children are reset when group child is updated', () => {\r\n    const state = cast(setPropertiesRecursively(\r\n      INITIAL_STATE_NESTED_GROUP,\r\n      [['isDirty', true], ['isPristine', false], ['isTouched', true], ['isUntouched', false], ['isSubmitted', true], ['isUnsubmitted', false]],\r\n      FORM_CONTROL_0_ID,\r\n    ));\r\n    const resultState = resetReducer(state, new ResetAction(FORM_CONTROL_1_ID));\r\n    expect(resultState.isDirty).toEqual(false);\r\n    expect(resultState.isPristine).toEqual(true);\r\n  });\r\n\r\n  it('should reset state if all children are reset when array child is updated', () => {\r\n    const state = cast(setPropertiesRecursively(\r\n      INITIAL_STATE_NESTED_ARRAY,\r\n      [['isDirty', true], ['isPristine', false], ['isTouched', true], ['isUntouched', false], ['isSubmitted', true], ['isUnsubmitted', false]],\r\n      FORM_CONTROL_0_ID,\r\n    ));\r\n    const resultState = resetReducer(state, new ResetAction(FORM_CONTROL_1_ID));\r\n    expect(resultState.isDirty).toEqual(false);\r\n    expect(resultState.isPristine).toEqual(true);\r\n  });\r\n});\r\n"]}
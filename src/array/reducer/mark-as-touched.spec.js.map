{"version":3,"file":"mark-as-touched.spec.js","sourceRoot":"","sources":["mark-as-touched.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { MarkAsTouchedAction } from '../../actions';\r\nimport { cast } from '../../state';\r\nimport { markAsTouchedReducer } from './mark-as-touched';\r\nimport {\r\n  FORM_CONTROL_0_ID,\r\n  FORM_CONTROL_ID,\r\n  INITIAL_STATE,\r\n  INITIAL_STATE_NESTED_ARRAY,\r\n  INITIAL_STATE_NESTED_GROUP,\r\n  setPropertiesRecursively,\r\n} from './test-util';\r\n\r\ndescribe(`form array ${markAsTouchedReducer.name}`, () => {\r\n  const INITIAL_STATE_TOUCHED = cast(setPropertiesRecursively(INITIAL_STATE, [['isTouched', true], ['isUntouched', false]]));\r\n\r\n  it('should mark itself and all children recursively as touched', () => {\r\n    const resultState = markAsTouchedReducer(INITIAL_STATE, new MarkAsTouchedAction(FORM_CONTROL_ID));\r\n    expect(resultState).toEqual(INITIAL_STATE_TOUCHED);\r\n  });\r\n\r\n  it('should not update state if all children are marked as touched recursively', () => {\r\n    const resultState = markAsTouchedReducer(INITIAL_STATE_TOUCHED, new MarkAsTouchedAction(FORM_CONTROL_ID));\r\n    expect(resultState).toBe(INITIAL_STATE_TOUCHED);\r\n  });\r\n\r\n  it('should mark children as touched if the group itself is already marked as touched', () => {\r\n    const state = {\r\n      ...INITIAL_STATE,\r\n      isTouched: true,\r\n      isUntouched: false,\r\n      controls: [\r\n        INITIAL_STATE.controls[0],\r\n        {\r\n          ...INITIAL_STATE.controls[1],\r\n          isTouched: true,\r\n          isUntouched: false,\r\n        },\r\n      ],\r\n    };\r\n    const resultState = markAsTouchedReducer(state, new MarkAsTouchedAction(FORM_CONTROL_ID));\r\n    expect(resultState).toEqual(INITIAL_STATE_TOUCHED);\r\n  });\r\n\r\n  it('should mark control children as touched', () => {\r\n    const resultState = markAsTouchedReducer(INITIAL_STATE, new MarkAsTouchedAction(FORM_CONTROL_ID));\r\n    expect(resultState.controls[0].isTouched).toEqual(true);\r\n    expect(resultState.controls[0].isUntouched).toEqual(false);\r\n  });\r\n\r\n  it('should mark group children as touched', () => {\r\n    const resultState = markAsTouchedReducer(INITIAL_STATE_NESTED_GROUP, new MarkAsTouchedAction(FORM_CONTROL_ID));\r\n    expect(resultState.controls[0].isTouched).toEqual(true);\r\n    expect(resultState.controls[0].isUntouched).toEqual(false);\r\n  });\r\n\r\n  it('should mark array children as touched', () => {\r\n    const resultState = markAsTouchedReducer(INITIAL_STATE_NESTED_ARRAY, new MarkAsTouchedAction(FORM_CONTROL_ID));\r\n    expect(resultState.controls[0].isTouched).toEqual(true);\r\n    expect(resultState.controls[0].isUntouched).toEqual(false);\r\n  });\r\n\r\n  it('should mark state as touched if control child is marked as touched', () => {\r\n    const resultState = markAsTouchedReducer(INITIAL_STATE, new MarkAsTouchedAction(FORM_CONTROL_0_ID));\r\n    expect(resultState.isTouched).toEqual(true);\r\n    expect(resultState.isUntouched).toEqual(false);\r\n  });\r\n\r\n  it('should mark state as touched if group child is marked as touched', () => {\r\n    const resultState = markAsTouchedReducer(INITIAL_STATE_NESTED_GROUP, new MarkAsTouchedAction(FORM_CONTROL_0_ID));\r\n    expect(resultState.isTouched).toEqual(true);\r\n    expect(resultState.isUntouched).toEqual(false);\r\n  });\r\n\r\n  it('should mark state as touched if array child is marked as touched', () => {\r\n    const resultState = markAsTouchedReducer(INITIAL_STATE_NESTED_ARRAY, new MarkAsTouchedAction(FORM_CONTROL_0_ID));\r\n    expect(resultState.isTouched).toEqual(true);\r\n    expect(resultState.isUntouched).toEqual(false);\r\n  });\r\n});\r\n"]}
{"version":3,"file":"remove-control.js","sourceRoot":"","sources":["remove-control.ts"],"names":[],"mappings":"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","sourcesContent":["import { Actions, RemoveArrayControlAction } from '../../actions';\nimport { AbstractControlState, computeArrayState, FormArrayState, FormGroupState, FormGroupControls, isArrayState, isGroupState } from '../../state';\nimport { childReducer } from './util';\n\nfunction updateIdRecursiveForGroup(state: FormGroupState<any>, newId: string) {\n  const controls: FormGroupControls<any> =\n    Object.keys(state.controls).reduce((agg, key) => Object.assign(agg, {\n      [key]: updateIdRecursive(state.controls[key], `${newId}.${key}`),\n    }), {});\n\n  return {\n    ...state,\n    id: newId,\n    controls,\n  };\n}\n\nfunction updateIdRecursiveForArray(state: FormArrayState<any>, newId: string) {\n  const controls = state.controls.map((c, i) => updateIdRecursive(c, `${newId}.${i}`));\n\n  return {\n    ...state,\n    id: newId,\n    controls,\n  };\n}\n\nfunction updateIdRecursive(state: AbstractControlState<any>, newId: string): AbstractControlState<any> {\n  if (state.id === newId) {\n    return state;\n  }\n\n  if (isGroupState(state)) {\n    return updateIdRecursiveForGroup(state, newId);\n  }\n\n  if (isArrayState(state)) {\n    return updateIdRecursiveForArray(state, newId);\n  }\n\n  return {\n    ...state,\n    id: newId,\n  };\n}\n\nexport function removeControlReducer<TValue>(\n  state: FormArrayState<TValue>,\n  action: Actions<TValue[]>,\n): FormArrayState<TValue> {\n  if (action.type !== RemoveArrayControlAction.TYPE) {\n    return state;\n  }\n\n  if (action.controlId !== state.id) {\n    return childReducer(state, action);\n  }\n\n  if (action.payload.index >= state.controls.length || action.payload.index < 0) {\n    throw new Error(`Index ${action.payload.index} is out of bounds for array '${state.id}' with length ${state.controls.length}!`); // `;\n  }\n\n  const index = action.payload.index;\n  const controls = state.controls.filter((_, i) => i !== index).map((c, i) => updateIdRecursive(c, `${state.id}.${i}`));\n\n  return computeArrayState(\n    state.id,\n    controls,\n    state.value,\n    state.errors,\n    state.pendingValidations,\n    state.userDefinedProperties,\n  );\n}\n"]}
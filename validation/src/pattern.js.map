{"version":3,"file":"pattern.js","sourceRoot":"","sources":["pattern.ts"],"names":[],"mappings":";;AAEA;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH,iBAAwB,OAAe;IACrC,EAAE,CAAC,CAAC,OAAO,KAAK,IAAI,IAAI,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC;QAC9C,MAAM,IAAI,KAAK,CAAC,uHAAqH,OAAO,MAAG,CAAC,CAAC;IACnJ,CAAC;IAED,MAAM,CAAC,UAAC,KAAoB;QAC1B,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACzC,MAAM,CAAC,EAAE,CAAC;QACZ,CAAC;QAED,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACxB,MAAM,CAAC,EAAE,CAAC;QACZ,CAAC;QAED,MAAM,CAAC;YACL,OAAO,EAAE;gBACP,OAAO,EAAE,OAAO,CAAC,QAAQ,EAAE;gBAC3B,MAAM,EAAE,KAAK;aACd;SACF,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC;AArBD,0BAqBC","sourcesContent":["import { ValidationErrors } from 'ngrx-forms';\r\n\r\n/**\r\n * A validation function that requires a value to match a regex.\r\n * Considers `null` and `''` as valid. Combine this function with the\r\n * `required` validation function if these values should be considered invalid.\r\n *\r\n * The validation error returned by this validation function has the following shape:\r\n *\r\n * ```typescript\r\n * {\r\n *   pattern: {\r\n *     pattern: string;\r\n *     actual: string;\r\n *   };\r\n * }\r\n * ```\r\n *\r\n * Usually you would use this validation function in conjunction with the `validate`\r\n * update function to perform synchronous validation in your reducer:\r\n *\r\n * ```typescript\r\n * updateGroup<MyFormValue>({\r\n *  numberWithPeriodsOrCommas: validate(pattern(/^[0-9.,]+$/)),\r\n * })\r\n * ```\r\n */\r\nexport function pattern(pattern: RegExp) {\r\n  if (pattern === null || pattern === undefined) {\r\n    throw new Error(`The pattern Validation function requires the pattern parameter to be a non-null string or regular expression, got ${pattern}!`);\r\n  }\r\n\r\n  return (value: string | null): ValidationErrors => {\r\n    if (value === null || value.length === 0) {\r\n      return {};\r\n    }\r\n\r\n    if (pattern.test(value)) {\r\n      return {};\r\n    }\r\n\r\n    return {\r\n      pattern: {\r\n        pattern: pattern.toString(),\r\n        actual: value,\r\n      },\r\n    };\r\n  };\r\n}\r\n"]}
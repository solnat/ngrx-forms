{"version":3,"file":"required.spec.js","sourceRoot":"","sources":["required.spec.ts"],"names":[],"mappings":";;AAAA,uCAAsC;AAEtC,QAAQ,CAAC,mBAAQ,CAAC,IAAI,EAAE;IACtB,EAAE,CAAC,iCAAiC,EAAE;QACpC,IAAM,KAAK,GAAG,IAAI,CAAC;QACnB,MAAM,CAAC,mBAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC;YAC9B,QAAQ,EAAE;gBACR,MAAM,EAAE,KAAK;aACd;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE;QAC5C,IAAM,KAAK,GAAG,EAAE,CAAC;QACjB,MAAM,CAAC,mBAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC;YAC9B,QAAQ,EAAE;gBACR,MAAM,EAAE,KAAK;aACd;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE;QAC3C,IAAM,KAAK,GAAU,EAAE,CAAC;QACxB,MAAM,CAAC,mBAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC;YAC9B,QAAQ,EAAE;gBACR,MAAM,EAAE,KAAK;aACd;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4CAA4C,EAAE;QAC/C,MAAM,CAAC,mBAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE;QAC1C,MAAM,CAAC,mBAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iDAAiD,EAAE;QACpD,MAAM,CAAC,mBAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE;QACxC,MAAM,CAAC,mBAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sCAAsC,EAAE;QACzC,MAAM,CAAC,mBAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE;QACnD,MAAM,CAAC,mBAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { required } from './required';\r\n\r\ndescribe(required.name, () => {\r\n  it('should return an error for null', () => {\r\n    const value = null;\r\n    expect(required(value)).toEqual({\r\n      required: {\r\n        actual: value,\r\n      },\r\n    });\r\n  });\r\n\r\n  it('should return an error for empty string', () => {\r\n    const value = '';\r\n    expect(required(value)).toEqual({\r\n      required: {\r\n        actual: value,\r\n      },\r\n    });\r\n  });\r\n\r\n  it('should return an error for empty array', () => {\r\n    const value: any[] = [];\r\n    expect(required(value)).toEqual({\r\n      required: {\r\n        actual: value,\r\n      },\r\n    });\r\n  });\r\n\r\n  it('should not return an error for number zero', () => {\r\n    expect(required(0)).toEqual({});\r\n  });\r\n\r\n  it('should not return an error for number', () => {\r\n    expect(required(415)).toEqual({});\r\n  });\r\n\r\n  it('should not return an error for non-empty string', () => {\r\n    expect(required('a')).toEqual({});\r\n  });\r\n\r\n  it('should not return an error for true', () => {\r\n    expect(required(true)).toEqual({});\r\n  });\r\n\r\n  it('should not return an error for false', () => {\r\n    expect(required(false)).toEqual({});\r\n  });\r\n\r\n  it('should not return an error for non-empty array', () => {\r\n    expect(required(['a'])).toEqual({});\r\n  });\r\n});\r\n"]}
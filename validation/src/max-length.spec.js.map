{"version":3,"file":"max-length.spec.js","sourceRoot":"","sources":["max-length.spec.ts"],"names":[],"mappings":";;AAAA,2CAAyC;AAEzC,QAAQ,CAAC,sBAAS,CAAC,IAAI,EAAE;IACvB,EAAE,CAAC,2CAA2C,EAAE;QAC9C,MAAM,CAAC,cAAM,OAAA,sBAAS,CAAC,IAAW,CAAC,EAAtB,CAAsB,CAAC,CAAC,OAAO,EAAE,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE;QACnD,MAAM,CAAC,cAAM,OAAA,sBAAS,CAAC,SAAgB,CAAC,EAA3B,CAA2B,CAAC,CAAC,OAAO,EAAE,CAAC;IACtD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE;QACxC,MAAM,CAAC,sBAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4EAA4E,EAAE;QAC/E,MAAM,CAAC,sBAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4EAA4E,EAAE;QAC/E,MAAM,CAAC,sBAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6EAA6E,EAAE;QAChF,MAAM,CAAC,sBAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2EAA2E,EAAE;QAC9E,MAAM,CAAC,sBAAS,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2EAA2E,EAAE;QAC9E,MAAM,CAAC,sBAAS,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4EAA4E,EAAE;QAC/E,MAAM,CAAC,sBAAS,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yEAAyE,EAAE;QAC5E,IAAM,cAAc,GAAG,CAAC,CAAC;QACzB,IAAM,KAAK,GAAG,KAAK,CAAC;QACpB,MAAM,CAAC,sBAAS,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC;YAC/C,SAAS,EAAE;gBACT,SAAS,EAAE,cAAc;gBACzB,KAAK,OAAA;gBACL,YAAY,EAAE,KAAK,CAAC,MAAM;aAC3B;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { maxLength } from './max-length';\r\n\r\ndescribe(maxLength.name, () => {\r\n  it('should throw for null maxLength parameter', () => {\r\n    expect(() => maxLength(null as any)).toThrow();\r\n  });\r\n\r\n  it('should throw for undefined maxLength parameter', () => {\r\n    expect(() => maxLength(undefined as any)).toThrow();\r\n  });\r\n\r\n  it('should not return an error for null', () => {\r\n    expect(maxLength(2)(null)).toEqual({});\r\n  });\r\n\r\n  it('should return an error if string value\\'s length is greater than maxLength', () => {\r\n    expect(maxLength(2)('abc')).not.toEqual({});\r\n  });\r\n\r\n  it('should not return an error if string value\\'s length is equal to maxLength', () => {\r\n    expect(maxLength(2)('ab')).toEqual({});\r\n  });\r\n\r\n  it('should not return an error if string value\\'s length is less than maxLength', () => {\r\n    expect(maxLength(2)('a')).toEqual({});\r\n  });\r\n\r\n  it('should return an error if array value\\'s length is greater than maxLength', () => {\r\n    expect(maxLength(2)(['a', 'b', 'c'])).not.toEqual({});\r\n  });\r\n\r\n  it('should not return an error if array value\\'s length is equal to maxLength', () => {\r\n    expect(maxLength(2)(['a', 'b'])).toEqual({});\r\n  });\r\n\r\n  it('should not return an error if array value\\'s length is less than maxLength', () => {\r\n    expect(maxLength(2)(['a'])).toEqual({});\r\n  });\r\n\r\n  it('should return errors with maxLength, value, and actualLength properties', () => {\r\n    const maxLengthParam = 2;\r\n    const value = 'abc';\r\n    expect(maxLength(maxLengthParam)(value)).toEqual({\r\n      maxLength: {\r\n        maxLength: maxLengthParam,\r\n        value,\r\n        actualLength: value.length,\r\n      },\r\n    });\r\n  });\r\n});\r\n"]}
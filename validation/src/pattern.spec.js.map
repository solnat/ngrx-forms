{"version":3,"file":"pattern.spec.js","sourceRoot":"","sources":["pattern.spec.ts"],"names":[],"mappings":";;AAAA,qCAAoC;AAEpC,QAAQ,CAAC,iBAAO,CAAC,IAAI,EAAE;IACrB,EAAE,CAAC,yCAAyC,EAAE;QAC5C,MAAM,CAAC,cAAM,OAAA,iBAAO,CAAC,IAAW,CAAC,EAApB,CAAoB,CAAC,CAAC,OAAO,EAAE,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8CAA8C,EAAE;QACjD,MAAM,CAAC,cAAM,OAAA,iBAAO,CAAC,SAAgB,CAAC,EAAzB,CAAyB,CAAC,CAAC,OAAO,EAAE,CAAC;IACpD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE;QACxC,MAAM,CAAC,iBAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE;QAChD,MAAM,CAAC,iBAAO,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE;QACxD,MAAM,CAAC,iBAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wDAAwD,EAAE;QAC3D,MAAM,CAAC,iBAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yDAAyD,EAAE;QAC5D,IAAM,YAAY,GAAG,IAAI,CAAC;QAC1B,IAAM,WAAW,GAAG,GAAG,CAAC;QACxB,MAAM,CAAC,iBAAO,CAAC,YAAY,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC;YACjD,OAAO,EAAE;gBACP,OAAO,EAAE,YAAY,CAAC,QAAQ,EAAE;gBAChC,MAAM,EAAE,WAAW;aACpB;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { pattern } from './pattern';\r\n\r\ndescribe(pattern.name, () => {\r\n  it('should throw for null pattern parameter', () => {\r\n    expect(() => pattern(null as any)).toThrow();\r\n  });\r\n\r\n  it('should throw for undefined pattern parameter', () => {\r\n    expect(() => pattern(undefined as any)).toThrow();\r\n  });\r\n\r\n  it('should not return an error for null', () => {\r\n    expect(pattern(/a/g)(null)).toEqual({});\r\n  });\r\n\r\n  it('should not return an error for empty string', () => {\r\n    expect(pattern(/a/g)('')).toEqual({});\r\n  });\r\n\r\n  it('should not return an error if value matches pattern', () => {\r\n    expect(pattern(/a/g)('a')).toEqual({});\r\n  });\r\n\r\n  it('should return an error if value does not match pattern', () => {\r\n    expect(pattern(/a/g)('b')).not.toEqual({});\r\n  });\r\n\r\n  it('should return errors with pattern and actual properties', () => {\r\n    const patternValue = /a/g;\r\n    const actualValue = 'b';\r\n    expect(pattern(patternValue)(actualValue)).toEqual({\r\n      pattern: {\r\n        pattern: patternValue.toString(),\r\n        actual: actualValue,\r\n      },\r\n    });\r\n  });\r\n});\r\n"]}
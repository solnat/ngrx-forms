{"version":3,"file":"less-than-or-equal-to.spec.js","sourceRoot":"","sources":["less-than-or-equal-to.spec.ts"],"names":[],"mappings":";;AAAA,iEAA4D;AAE5D,QAAQ,CAAC,yCAAiB,CAAC,IAAI,EAAE;IAC/B,EAAE,CAAC,2CAA2C,EAAE;QAC9C,MAAM,CAAC,cAAM,OAAA,yCAAiB,CAAC,IAAW,CAAC,EAA9B,CAA8B,CAAC,CAAC,OAAO,EAAE,CAAC;IACzD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE;QACnD,MAAM,CAAC,cAAM,OAAA,yCAAiB,CAAC,SAAgB,CAAC,EAAnC,CAAmC,CAAC,CAAC,OAAO,EAAE,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE;QACxC,MAAM,CAAC,yCAAiB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2DAA2D,EAAE;QAC9D,MAAM,CAAC,yCAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2DAA2D,EAAE;QAC9D,MAAM,CAAC,yCAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4DAA4D,EAAE;QAC/D,MAAM,CAAC,yCAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2DAA2D,EAAE;QAC9D,IAAM,SAAS,GAAG,CAAC,CAAC;QACpB,IAAM,MAAM,GAAG,CAAC,CAAC;QACjB,MAAM,CAAC,yCAAiB,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC;YACnD,iBAAiB,EAAE;gBACjB,SAAS,WAAA;gBACT,MAAM,QAAA;aACP;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { lessThanOrEqualTo } from './less-than-or-equal-to';\r\n\r\ndescribe(lessThanOrEqualTo.name, () => {\r\n  it('should throw for null comparand parameter', () => {\r\n    expect(() => lessThanOrEqualTo(null as any)).toThrow();\r\n  });\r\n\r\n  it('should throw for undefined comparand parameter', () => {\r\n    expect(() => lessThanOrEqualTo(undefined as any)).toThrow();\r\n  });\r\n\r\n  it('should not return an error for null', () => {\r\n    expect(lessThanOrEqualTo(1)(null)).toEqual({});\r\n  });\r\n\r\n  it('should return an error if value is greater than comparand', () => {\r\n    expect(lessThanOrEqualTo(1)(2)).not.toEqual({});\r\n  });\r\n\r\n  it('should not return an error if value is equal to comparand', () => {\r\n    expect(lessThanOrEqualTo(1)(1)).toEqual({});\r\n  });\r\n\r\n  it('should not return an error if value is less than comparand', () => {\r\n    expect(lessThanOrEqualTo(1)(0)).toEqual({});\r\n  });\r\n\r\n  it('should return errors with comparand and actual properties', () => {\r\n    const comparand = 1;\r\n    const actual = 2;\r\n    expect(lessThanOrEqualTo(comparand)(actual)).toEqual({\r\n      lessThanOrEqualTo: {\r\n        comparand,\r\n        actual,\r\n      },\r\n    });\r\n  });\r\n});\r\n"]}
{"version":3,"file":"greater-than-or-equal-to.spec.js","sourceRoot":"","sources":["greater-than-or-equal-to.spec.ts"],"names":[],"mappings":";;AAAA,uEAAkE;AAElE,QAAQ,CAAC,+CAAoB,CAAC,IAAI,EAAE;IAClC,EAAE,CAAC,2CAA2C,EAAE;QAC9C,MAAM,CAAC,cAAM,OAAA,+CAAoB,CAAC,IAAW,CAAC,EAAjC,CAAiC,CAAC,CAAC,OAAO,EAAE,CAAC;IAC5D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE;QACnD,MAAM,CAAC,cAAM,OAAA,+CAAoB,CAAC,SAAgB,CAAC,EAAtC,CAAsC,CAAC,CAAC,OAAO,EAAE,CAAC;IACjE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE;QACxC,MAAM,CAAC,+CAAoB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+DAA+D,EAAE;QAClE,MAAM,CAAC,+CAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2DAA2D,EAAE;QAC9D,MAAM,CAAC,+CAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wDAAwD,EAAE;QAC3D,MAAM,CAAC,+CAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2DAA2D,EAAE;QAC9D,IAAM,SAAS,GAAG,CAAC,CAAC;QACpB,IAAM,MAAM,GAAG,CAAC,CAAC;QACjB,MAAM,CAAC,+CAAoB,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC;YACtD,oBAAoB,EAAE;gBACpB,SAAS,WAAA;gBACT,MAAM,QAAA;aACP;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { greaterThanOrEqualTo } from './greater-than-or-equal-to';\r\n\r\ndescribe(greaterThanOrEqualTo.name, () => {\r\n  it('should throw for null comparand parameter', () => {\r\n    expect(() => greaterThanOrEqualTo(null as any)).toThrow();\r\n  });\r\n\r\n  it('should throw for undefined comparand parameter', () => {\r\n    expect(() => greaterThanOrEqualTo(undefined as any)).toThrow();\r\n  });\r\n\r\n  it('should not return an error for null', () => {\r\n    expect(greaterThanOrEqualTo(1)(null)).toEqual({});\r\n  });\r\n\r\n  it('should not return an error if value is greater than comparand', () => {\r\n    expect(greaterThanOrEqualTo(1)(2)).toEqual({});\r\n  });\r\n\r\n  it('should not return an error if value is equal to comparand', () => {\r\n    expect(greaterThanOrEqualTo(1)(1)).toEqual({});\r\n  });\r\n\r\n  it('should return an error if value is less than comparand', () => {\r\n    expect(greaterThanOrEqualTo(1)(0)).not.toEqual({});\r\n  });\r\n\r\n  it('should return errors with comparand and actual properties', () => {\r\n    const comparand = 1;\r\n    const actual = 0;\r\n    expect(greaterThanOrEqualTo(comparand)(actual)).toEqual({\r\n      greaterThanOrEqualTo: {\r\n        comparand,\r\n        actual,\r\n      },\r\n    });\r\n  });\r\n});\r\n"]}
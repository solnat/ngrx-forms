{"version":3,"file":"greater-than.js","sourceRoot":"","sources":["greater-than.ts"],"names":[],"mappings":";;AAEA;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH,qBAA4B,SAAiB;IAC3C,EAAE,CAAC,CAAC,SAAS,KAAK,IAAI,IAAI,SAAS,KAAK,SAAS,CAAC,CAAC,CAAC;QAClD,MAAM,IAAI,KAAK,CAAC,uGAAqG,SAAS,MAAG,CAAC,CAAC;IACrI,CAAC;IAED,MAAM,CAAC,UAAC,KAAoB;QAC1B,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,EAAE,CAAC;QACZ,CAAC;QAED,EAAE,CAAC,CAAC,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC;YACtB,MAAM,CAAC,EAAE,CAAC;QACZ,CAAC;QAED,MAAM,CAAC;YACL,WAAW,EAAE;gBACX,SAAS,WAAA;gBACT,MAAM,EAAE,KAAK;aACd;SACF,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC;AArBD,kCAqBC","sourcesContent":["import { ValidationErrors } from 'ngrx-forms';\r\n\r\n/**\r\n * A validation function that requires the value to be greater than a number.\r\n * Considers `null` as valid. Combine this function with the `required` validation\r\n * function if `null` should be considered invalid.\r\n *\r\n * The validation error returned by this validation function has the following shape:\r\n *\r\n * ```typescript\r\n * {\r\n *   greaterThan: {\r\n *     comparand: number;\r\n *     actual: number;\r\n *   };\r\n * }\r\n * ```\r\n *\r\n * Usually you would use this validation function in conjunction with the `validate`\r\n * update function to perform synchronous validation in your reducer:\r\n *\r\n * ```typescript\r\n * updateGroup<MyFormValue>({\r\n *  amount: validate(greaterThan(10)),\r\n * })\r\n * ```\r\n */\r\nexport function greaterThan(comparand: number) {\r\n  if (comparand === null || comparand === undefined) {\r\n    throw new Error(`The greaterThan Validation function requires the comparand parameter to be a non-null number, got ${comparand}!`);\r\n  }\r\n\r\n  return (value: number | null): ValidationErrors => {\r\n    if (value === null) {\r\n      return {};\r\n    }\r\n\r\n    if (value > comparand) {\r\n      return {};\r\n    }\r\n\r\n    return {\r\n      greaterThan: {\r\n        comparand,\r\n        actual: value,\r\n      },\r\n    };\r\n  };\r\n}\r\n"]}
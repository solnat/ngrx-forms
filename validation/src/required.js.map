{"version":3,"file":"required.js","sourceRoot":"","sources":["required.ts"],"names":[],"mappings":";;AAEA;;;;;;;;;;;;;;;;;;;;;GAqBG;AACH,kBAA4B,KAAe;IACzC,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,IAAK,KAAa,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;QAClD,MAAM,CAAC,EAAE,CAAC;IACZ,CAAC;IAED,MAAM,CAAC;QACL,QAAQ,EAAE;YACR,MAAM,EAAE,KAAK;SACd;KACF,CAAC;AACJ,CAAC;AAVD,4BAUC","sourcesContent":["import { ValidationErrors } from 'ngrx-forms';\r\n\r\n/**\r\n * A validation function that requires the value to be non-`null` and non-empty.\r\n *\r\n * The validation error returned by this validation function has the following shape:\r\n *\r\n * ```typescript\r\n * {\r\n *   required: {\r\n *     actual: T;\r\n *   };\r\n * }\r\n * ```\r\n *\r\n * Usually you would use this validation function in conjunction with the `validate`\r\n * update function to perform synchronous validation in your reducer:\r\n *\r\n * ```typescript\r\n * updateGroup<MyFormValue>({\r\n *  name: validate(required),\r\n * })\r\n * ```\r\n */\r\nexport function required<T>(value: T | null): ValidationErrors {\r\n  if (value !== null && (value as any).length !== 0) {\r\n    return {};\r\n  }\r\n\r\n  return {\r\n    required: {\r\n      actual: value,\r\n    },\r\n  };\r\n}\r\n"]}
{"version":3,"file":"greater-than.spec.js","sourceRoot":"","sources":["greater-than.spec.ts"],"names":[],"mappings":";;AAAA,+CAA6C;AAE7C,QAAQ,CAAC,0BAAW,CAAC,IAAI,EAAE;IACzB,EAAE,CAAC,2CAA2C,EAAE;QAC9C,MAAM,CAAC,cAAM,OAAA,0BAAW,CAAC,IAAW,CAAC,EAAxB,CAAwB,CAAC,CAAC,OAAO,EAAE,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE;QACnD,MAAM,CAAC,cAAM,OAAA,0BAAW,CAAC,SAAgB,CAAC,EAA7B,CAA6B,CAAC,CAAC,OAAO,EAAE,CAAC;IACxD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE;QACxC,MAAM,CAAC,0BAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+DAA+D,EAAE;QAClE,MAAM,CAAC,0BAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uDAAuD,EAAE;QAC1D,MAAM,CAAC,0BAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wDAAwD,EAAE;QAC3D,MAAM,CAAC,0BAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2DAA2D,EAAE;QAC9D,IAAM,SAAS,GAAG,CAAC,CAAC;QACpB,IAAM,MAAM,GAAG,CAAC,CAAC;QACjB,MAAM,CAAC,0BAAW,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC;YAC7C,WAAW,EAAE;gBACX,SAAS,WAAA;gBACT,MAAM,QAAA;aACP;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { greaterThan } from './greater-than';\r\n\r\ndescribe(greaterThan.name, () => {\r\n  it('should throw for null comparand parameter', () => {\r\n    expect(() => greaterThan(null as any)).toThrow();\r\n  });\r\n\r\n  it('should throw for undefined comparand parameter', () => {\r\n    expect(() => greaterThan(undefined as any)).toThrow();\r\n  });\r\n\r\n  it('should not return an error for null', () => {\r\n    expect(greaterThan(1)(null)).toEqual({});\r\n  });\r\n\r\n  it('should not return an error if value is greater than comparand', () => {\r\n    expect(greaterThan(1)(2)).toEqual({});\r\n  });\r\n\r\n  it('should return an error if value is equal to comparand', () => {\r\n    expect(greaterThan(1)(1)).not.toEqual({});\r\n  });\r\n\r\n  it('should return an error if value is less than comparand', () => {\r\n    expect(greaterThan(1)(0)).not.toEqual({});\r\n  });\r\n\r\n  it('should return errors with comparand and actual properties', () => {\r\n    const comparand = 1;\r\n    const actual = 0;\r\n    expect(greaterThan(comparand)(actual)).toEqual({\r\n      greaterThan: {\r\n        comparand,\r\n        actual,\r\n      },\r\n    });\r\n  });\r\n});\r\n"]}